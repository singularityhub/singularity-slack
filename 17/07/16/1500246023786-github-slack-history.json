[
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315631917|#810: Adding pep8 for Python>",
                "text": "@gmkurtzer this is ready for review. Specifically, this PR does the following:\n\n• adds a check for the python code conforming to <https://www.python.org/dev/peps/pep-0008/|pep8>. This will ensure that code added is styled in a clean and concise way - it's a lot of work to do for an entire repo that already exists, but trivial when you are working on small bits. I just did the first, so things should be relatively easy moving forward!\n• I tested calling pep8 in the testing vs using <https://pep8speaks.com/|pep8speaks>, and I've decided to choose the second as the first introduces many potential future bugs as the organization / flow of testing changes (for example, the errors above were because it was testing an older version of singularity that hadn't been fixed.) Pep8speaks is much nicer, and tests the exact files that are touched for the specific PR. See above for his robot messages :)\n• we don't have a singularity hub import (shub uri) so I removed this test. It doesn't make sense we had it (I think we discussed) and we can re-add when it is implemented.\n• This branch (used) to have the self bootstrap, but I removed it to be added with another PR (after checks are implemented).",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315631917|#810: Adding pep8 for Python>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500234038.423289",
        "date": 1500234038423
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315619549|#810: Adding pep8 for Python>",
                "text": "Note that there ARE still pep8 issues with the tests, need to fix those.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315619549|#810: Adding pep8 for Python>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500221708.397174",
        "date": 1500221708397
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315585094|#810: Adding pep8 for Python>",
                "text": "look at the robot!! cool!!\n\nokay, I will finish this up tomorrow, need to head home :) The tests will fail because of the bugs the robot found, which I expected and make me very happy :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315585094|#810: Adding pep8 for Python>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500180039.035246",
        "date": 1500180039035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by pep8speaks on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315584949|#810: Adding pep8 for Python>",
                "text": "Hello @vsoch! Thanks for submitting the PR.\n\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/base.py|`libexec/python/base.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/base.py#L338|Line 338:9>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/base.py#L345>|Line 345:13&gt;: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/docker/api.py|`libexec/python/docker/api.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/docker/api.py#L178|Line 178:9>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/docker/api.py#L236>|Line 236:9&gt;: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/docker/api.py#L273>|Line 273:9&gt;: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/docker/api.py#L344>|Line 344:9&gt;: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/add.py|`libexec/python/helpers/json/add.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/add.py#L79|Line 79:5>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/add.py#L94>|Line 94:1&gt;: <https://duckduckgo.com/?q=pep8%20E305|E305> expected 2 blank lines after class or function definition, found 1\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/dump.py|`libexec/python/helpers/json/dump.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/dump.py#L60|Line 60:5>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/dump.py#L71>|Line 71:1&gt;: <https://duckduckgo.com/?q=pep8%20E305|E305> expected 2 blank lines after class or function definition, found 1\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/inspect.py|`libexec/python/helpers/json/inspect.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/helpers/json/inspect.py#L52|Line 52:1>: <https://duckduckgo.com/?q=pep8%20E305|E305> expected 2 blank lines after class or function definition, found 1\n\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/import.py|`libexec/python/import.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/import.py#L107|Line 107:1>: <https://duckduckgo.com/?q=pep8%20E305|E305> expected 2 blank lines after class or function definition, found 1\n\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/shub/api.py|`libexec/python/shub/api.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/shub/api.py#L58|Line 58:1>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n&gt; &lt;<https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/shub/api.py#L118>|Line 118:9&gt;: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'\n• In the file <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/sutils.py|`libexec/python/sutils.py`>, following are the PEP8 issues :\n\n&gt; <https://github.com/singularityware/singularity/blob/b3f87ac45679a0db42b5d9c30cfc50f6b56e332c/libexec/python/sutils.py#L188|Line 188:9>: <https://duckduckgo.com/?q=pep8%20E722|E722> do not use bare except'",
                "pretext": "[singularityware/singularity] New comment by pep8speaks on pull request <https://github.com/singularityware/singularity/pull/810#issuecomment-315584949|#810: Adding pep8 for Python>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500179731.021143",
        "date": 1500179731021
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#810 Adding pep8 for Python' https://github.com/singularityware/singularity/pull/810 by vsoch",
                "text": "This is the first round of work to add pep8 parsing for Python - I haven't finished yet but want to start the PR to configure the pep8speaks (robot) and test out how this works. Carry on, nothing to see here! I'll post more details when this is ready to look at.\n\nIt also looks like I had the self bootstrap work in this branch - no worries I can finish that up and include, or just undo it :P  If we get the checks in, the self bootstrap might actually have feet!",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#810 Adding pep8 for Python",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/810",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500179725.020856",
        "date": 1500179725020
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/809#issuecomment-315568731|#809: Problem of installing OFED in Singularity>",
                "text": "It should be something like `./mlnxofedinstall -k [Kernel Version]`\nSo... `./mlnxofedinstall -k 3.10.16-123.10.9_abc`\n\nJust put in the kernel version of what version you want to install against instead of using `uname -r`\n\n-J",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/809#issuecomment-315568731|#809: Problem of installing OFED in Singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500159328.915362",
        "date": 1500159328915
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/780#issuecomment-315568643|#780: Adding arch support>",
                "text": "Referenced PR has been merged into development branch. Thank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/780#issuecomment-315568643|#780: Adding arch support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500159212.908630",
        "date": 1500159212908
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-315568613|#768: Development - arm/ARCH support in debootstrap>",
                "text": "Looks great, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-315568613|#768: Development - arm/ARCH support in debootstrap>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500159175.906466",
        "date": 1500159175906
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/768|#768 Development - arm/ARCH support in debootstrap> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/768|#768 Development - arm/ARCH support in debootstrap> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500159168.906045",
        "date": 1500159168906
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#809 Problem of installing OFED in Singularity' https://github.com/singularityware/singularity/issues/809 by hfutxrg",
                "text": "I am trying to use Singularity to run a program on our cluster where all nodes are connected by EDR Infiniband. All nodes in our cluster have RHEL 7.2 OS. But for some reason, the program could not run successfully on RHEL, so I want to create a Singularity container with Ubuntu 16.04 OS and run the program on Ubuntu with Singularity.\n\nThe issue right now is that I cannot install Mellanox OFED driver in the Singularity container. Because the output of \"uname -a\" still shows RHEL kernel within the container, OFED package could not detect Ubuntu OS, so it cannot install successfully.\n\n*Version of Singularity:*\n\n2.3.1\n\n*Expected behavior*\n\nWe should be able to install Mellanox OFED driver successfully.\n\n*Actual behavior*\n\nWhen I install OFED within container, it has the following messages:\n\nThis program will install the MLNX_OFED_LINUX package on your machine.\nNote that all other Mellanox, OEM, OFED, or Distribution IB packages will be removed.\nDo you want to continue?[y/N]:y\n\nChecking SW Requirements...\n\nOne or more required packages for installing MLNX_OFED are missing.\n/lib/modules/3.10.0-327.el7.x86_64/build/scripts is required for the Installation.\nAttempting to install the following missing packages:\n*linux-headers-3.10.0-327.el7.x86_64*\nFailed command: apt-get install -y linux-headers-3.10.0-327.el7.x86_64\n\n*Steps to reproduce behavior*\n\nsingularity create ubuntu-test.img\nsingularity bootstrap ubuntu-test.img ubuntu.def\nsingularity shell -w ubuntu-test.img\nwget <http://www.mellanox.com/downloads/ofed/MLNX_OFED-3.3-1.0.4.0/MLNX_OFED_LINUX-3.3-1.0.4.0-ubuntu16.04-x86_64.tgz>\ntar xzfv MLNX_OFED_LINUX-3.3-1.0.4.0-ubuntu16.04-x86_64.tgz\ncd MLNX_OFED_LINUX-3.3-1.0.4.0-ubuntu16.04-x86_64\n./mlnxofedinstall",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hfutxrg|hfutxrg>",
                "title": "#809 Problem of installing OFED in Singularity",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/809",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500154754.632758",
        "date": 1500154754632
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#808 [python] add pep8 testing' https://github.com/singularityware/singularity/issues/808 by vsoch",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch> (assigned to <https://github.com/vsoch|vsoch>)",
                "title": "#808 [python] add pep8 testing",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/808",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500146076.002888",
        "date": 1500146076002
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315549330|#789: Infrastructure for Security (and other) Checks>",
                "text": "okay a few tweaks:\n\n• I made the naming of the files correspond with the level (1-3) so it's easy to visually see looking at the folder\n• I added a new check for bash history and profile files at root's home\n• I made a new tag, \"bootstrap\" for defaults to occur at bootstrap, including the above check\n• renamed the function to make it a bit shorter :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315549330|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500139549.464839",
        "date": 1500139549464
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315547417|#789: Infrastructure for Security (and other) Checks>",
                "text": "I think given that pull/import can happen in a non root space, it wouldn't be the right context to have checks, because likely the user wouldn't be able to do any fixes. I wonder if a suitable place would be in plugins / the registry controlled by admins, so they can essentially perform tests on outgoing images to run (eg, think SLURM jobs) and then choose to not run given a fail?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315547417|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500138004.328029",
        "date": 1500138004328
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315545468|#789: Infrastructure for Security (and other) Checks>",
                "text": "hmm that's an interesting idea - I guess the assumption is that it's unlikely for the user to pull/import and then use check? What do others think? ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315545468|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500136166.166597",
        "date": 1500136166166
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315540669|#789: Infrastructure for Security (and other) Checks>",
                "text": "&gt; before this gets out of hand\nrotfl Wow!  You're on a real tear here!  \n\nThis looks really great.  I think I'm getting the idea that these checks are useful for all kinds of things.  We could use them to encourage a bunch of best practices in addition to doing security tests and such.  \n\nOne thing I'm thinking is that it might be good to integrate this into the `pull` and `import` commands too.  If I'm a user doing a bootstrap with a definition file than chance are pretty OK that I know whats in the definition file and so I don't necessarily need to do a bunch of checks.  But if I'm doing a `pull`, I might not have any idea what is in the container, so tests may become important.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315540669|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500131502.766778",
        "date": 1500131502766
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315532319|#789: Infrastructure for Security (and other) Checks>",
                "text": "ok! Just added checks to bootstrap. Here is how it works:\n\nNormal bootstrap is the same (checks disabled by default)\n```sudo singularity bootstrap image.img Singularity \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nSkipping checks\n```\nbut note the message to skip checks. When we ask for checks, default runs level 3, default tag:\n\n```sudo singularity bootstrap --checks image.img Singularity \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nRunning checks\nSTART 1-hello-world.sh tags[security default] level[LOW]\nHello World, security level 1\nPASS: (retval=0) bash /usr/local/libexec/singularity/helpers/checks/1-hello-world.sh \nSTART 2-cache-content.py tags[default clean] level[LOW]\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/2-cache-content.py \n```\nWe can ask for a specific level. In this case I want `--high`, but note that no checks are defined for level `high` and tag `default`:\n\n```sudo singularity bootstrap --checks --high image.img Singularity \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nRunning checks\n```\n\nNow let's specify a level that does have checks, to make sure the level flag is working, period.\n```sudo singularity bootstrap --checks --low image.img Singularity \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nRunning checks\nSTART 1-hello-world.sh tags[security default] level[LOW]\nHello World, security level 1\nPASS: (retval=0) bash /usr/local/libexec/singularity/helpers/checks/1-hello-world.sh \nSTART 2-cache-content.py tags[default clean] level[LOW]\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/2-cache-content.py \n```\nNow let's ask just for tag `clean` which should just run one check:\n\n```sudo singularity bootstrap --checks --tag clean image.img Singularit\nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nRunning checks\nSTART 2-cache-content.py tags[default clean] level[LOW]\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/2-cache-content.py \n```\n\nFinally, let's try one that requires sudo, which should work fine given we are doing bootstrap:\n\n```sudo singularity bootstrap --checks --tag docker image.img Singularity \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/library/centos:7\nCache folder set to /root/.singularity/docker\nExploding layer: sha256:7b6bb4652a1be64d39920f7d8c12c5f0bd8abfc10820177109e73817357c07e3.tar.gz\nExploding layer: sha256:60e3079474b1671bcc20b340572ee6cae735ecdd5a13d6686475ca4916eb6003.tar.gz\nUser defined %runscript found! Taking priority.\nAdding runscript\nFinalizing Singularity container\nRunning checks\nSTART 4-docker.py tags[docker] level[LOW]\nPROBLEM:  You should not put content in roots home.\nRESOLVE:  Install to /opt or /usr/local\nanaconda-ks.cfg\noriginal-ks.cfg\n.bash_profile\n.bash_logout\nFAIL: (retval=1)\n python /usr/local/libexec/singularity/helpers/checks/4-docker.py \n```\nAnd this check fails because files were found in root's home! We can of course tweak details of the test, for example there are several profiles that I was allowing in root home (eg, `.bashrc` types but now I'm wondering if that is needed at all? \n\nThere are a ton of different ones I want to write but I should probably stop and let you take a look before this gets out of hand, lol. :P",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315532319|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500123426.155191",
        "date": 1500123426155
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-315524301|#768: Development - arm/ARCH support in debootstrap>",
                "text": "Bump",
                "pretext": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-315524301|#768: Development - arm/ARCH support in debootstrap>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500113204.583102",
        "date": 1500113204583
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315509982|#789: Infrastructure for Security (and other) Checks>",
                "text": "The docker tag, for example, would nicely work with a docker bootstrap (when sudo is required). We could also have tags that just show info, or check for particular libraries / dependencies.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315509982|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500094691.569740",
        "date": 1500094691569
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315508784|#789: Infrastructure for Security (and other) Checks>",
                "text": "<https://asciinema.org/a/129063?speed=3|whole shabang>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315508784|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500092796.462668",
        "date": 1500092796462
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315508661|#789: Infrastructure for Security (and other) Checks>",
                "text": "ok! (and I swear to god I'm going home after this) I just added one more check to illustrate the following:\n\n• checks can require sudo\n• we should have checks for best practices for things like general image file system, and common docker issues.\n\nWhat I did is add the (start to) a docker check script. And I'll show you here how it demonstrates the above. First, we can run the defaults, and we don't see the docker check (it doesn't have `default` tag)\n\n```\n$ singularity check  ubuntu.img\nSTART 1-hello-world.sh tags[security default] level[LOW]\nHello World, security level 1\nPASS: (retval=0) bash /usr/local/libexec/singularity/helpers/checks/1-hello-world.sh \n\nSTART 2-cache-content.py tags[default clean] level[LOW]\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/2-cache-content.py \n```\nAlso notice that I cleaned up the print output to NOT include redundant information. Now let's try a check for the docker tag, but without sudo (note that I will need sudo to look into `/root`)\n\n```$ singularity check --tag docker  ubuntu.img\nSTART 4-docker.py tags[docker] level[LOW]\nYou must run this test as sudo, skipping\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/4-docker.py \n```\nIt tells me I need to run as root. Now let's do that:\n\n```START 4-docker.py tags[docker] level[LOW]\nPROBLEM:  You should not put content in roots home.\nRESOLVE:  Install to /opt or /usr/local\nFAIL: (retval=1)\n python /usr/local/libexec/singularity/helpers/checks/4-docker.py \n```\n\nAnd when I use a base (that doesn't have anything other than `.bashrc` and `profile` the test passes:\n\n```START 4-docker.py tags[docker] level[LOW]\nPASS: (retval=0) python /usr/local/libexec/singularity/helpers/checks/4-docker.py \n```\nWICKED COOL!\nokay lol going home, can't wait to talk about this!",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315508661|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500092593.445165",
        "date": 1500092593445
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315507559|#789: Infrastructure for Security (and other) Checks>",
                "text": "okay, behold tags!! --&gt; <https://asciinema.org/a/129060?speed=3>\n\nThis is so cool :) We can make checks to do ANYTHING *diabolical laugh*",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315507559|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500091210.357508",
        "date": 1500091210357
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315506077|#789: Infrastructure for Security (and other) Checks>",
                "text": "I'm adding the tags feature now - it will run tag \"default\" by default",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315506077|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500089096.228551",
        "date": 1500089096228
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315505656|#789: Infrastructure for Security (and other) Checks>",
                "text": "Also see the notes I added here <https://github.com/vsoch/singularity/blob/add/security/libexec/helpers/README.md#adding-a-check>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315505656|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500088572.195262",
        "date": 1500088572195
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315503743|#789: Infrastructure for Security (and other) Checks>",
                "text": "@gmkurtzer and @GodloveD here is the recent addition:\n\n<https://asciinema.org/a/129059?speed=3>\n\nAs stated in the asciinema, I'd like to discuss:\n\n• how we want to integrate into bootstrap vs. on demand check (mount isn't a go anymore @gmkurtzer ?)\n• if/how we want to make a set of default checks (via some tag perhaps?) and then how to allow the user to customize tags during bootstrap vs. on demand\n• how should the user add custom scripts (eg, on demand) other than adding to the checks folder and a line to check.sh?\n• who should be allowed to run, under what permission? (Given no changes are made, it makes sense that anyone could, UNLESS it exposes something important, or the check requires sudo to run).\n\nI realize a lot of the password stuffs probably isn't relevant, because we don't include home. What I'd like to do is figure out reasonable answers to the above, implement, and then merge, announce, and get contributions from others for all the checks that (the users) desire. I suck at security so I generally guess at these things.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315503743|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500086124.030094",
        "date": 1500086124030
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#807 Archlinux from scratch does not work' https://github.com/singularityware/singularity/issues/807 by jgrzebyta",
                "text": "*Version of Singularity:*\n\n`2.3.1-dist`\n\n*Expected behavior*\n\nCustomised archlinux created from scratch (not `docker`) should be created with java and git. \n\n*Actual behavior*\n\nI have error using attached config file: \n```/bin/sh: 13: pacman: not found\nABORT: Aborting with RETVAL=255\n```\nIf I move the whole part with pacman and paccache to `%post` section than have error\n`ERROR: Could not locate /bin/sh inside the container`\n\n*Steps to reproduce behavior*\n\nAttched `Singularity` file:\n<https://github.com/singularityware/singularity/files/1149975/Singularity.txt|Singularity.txt>",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/jgrzebyta|jgrzebyta>",
                "title": "#807 Archlinux from scratch does not work",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/807",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500083144.800992",
        "date": 1500083144800
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315491682|#789: Infrastructure for Security (and other) Checks>",
                "text": "@GodloveD I thought through this, and I think we want an approach that allows for both. The reason for hard coding into the helpers/check.sh is to allow assigning labels (levels and tags). And given that this isn't actually compiled (it's a shell script) it's not such a crazy idea to require an admin to drop the script in a folder, and then assign it a level. I realized that if we took the \"drop in folder and go\" approach we would still need a way to define this metadata, and that still comes down to editing a file somewhere.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315491682|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500075637.963170",
        "date": 1500075637963
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-315491329|#790: Update installation procedure to use 2.3.1>",
                "text": "@gmkurtzer this should be ok to merge, although we need to check whether this should be merged into master (since it's just installation docs) or into development.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-315491329|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500075428.929705",
        "date": 1500075428929
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315478692|#789: Infrastructure for Security (and other) Checks>",
                "text": "Wait.  I think I'm having some ideas... :smiling_imp: I'll PM you.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315478692|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500069737.690544",
        "date": 1500069737690
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315478431|#789: Infrastructure for Security (and other) Checks>",
                "text": "One thing we could do is check the container for anything with an SUID bit.  But I don't know how worrisome that is anyway given that you can't use it.  This is hard because you basically have to think about how you would make a malicious container.  That's hard to do with the Singularity model.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315478431|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500069650.664452",
        "date": 1500069650664
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315472051|#789: Infrastructure for Security (and other) Checks>",
                "text": "I would be really interested to see what kinds of checks you have in mind!  I'll have to think and see what kinds of things I can come up with too.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315472051|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500067639.043037",
        "date": 1500067639043
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315472001|#802: Feature: Multi-Stage Builds>",
                "text": "<http://www.vanessasaur.us/2017/research-container-standard/|BRAIN DUMP> :hankey: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315472001|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500067622.037645",
        "date": 1500067622037
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315471505|#789: Infrastructure for Security (and other) Checks>",
                "text": "I think so, as long as there aren't any loopholes to inject / insert something malicious, I'm ok with this. Do you want to help me come up with a tiny list of \"basic\" checks to implement? I'd like to finish this up this weekend, and I can start on these tweaks this afternoon!! No more conference!! lol.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315471505|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500067460.983251",
        "date": 1500067460983
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315470677|#789: Infrastructure for Security (and other) Checks>",
                "text": "I just thought that the subdirectory itself would be root owned so only\nroot could add to it.  Do you think that is a safe assumption?\n\nOn Fri, Jul 14, 2017 at 5:13 PM, Vanessa Sochat <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; yes I thought about that - wouldn't it be an issue if someone could\n&gt; maliciously add a script? Oh but you are saying they would need to be root\n&gt; owned right? What would the bash look like to get and parse over the files\n&gt; in the folder, and the determine ownership?\n&gt; \n&gt; —\n&gt; You are receiving this because you commented.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/pull/789#issuecomment-315469233>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AHUUXLJGJKfeMYKSwk-4eR5wpBtE9GYLks5sN9n2gaJpZM4OL0fR>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315470677|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500067227.904731",
        "date": 1500067227904
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315469233|#789: Infrastructure for Security (and other) Checks>",
                "text": "yes I thought about that - wouldn't it be an issue if someone could maliciously add a script? Oh but you are saying they would need to be root owned right? What would the bash look like to get and parse over the files in the folder, and the determine ownership?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315469233|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500066805.756385",
        "date": 1500066805756
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315468614|#789: Infrastructure for Security (and other) Checks>",
                "text": "Hi @vsoch.  This is really cool!  I've been playing with this a little and I have one question.  It looks like if you want to add a new check you have to recompile the code.  Is that correct?  What would you think about letting an administrator add a shell script to the `/checks` directory and then be able to use that script without recompiling? ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-315468614|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500066626.691380",
        "date": 1500066626691
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315458406|#802: Feature: Multi-Stage Builds>",
                "text": "Ok, this is what I think I'd want to do: <https://gist.github.com/vsoch/ecd8386c8bd32936fb7574679a36b87c>. If we create a simple approach like this that:\n\n1. fits in with current software organization\n2. is both modular for data and software, but still creates reproducible containers\n3. allows for programmatic parsing to be able to easily find software and capture the contents of a container.\n\nThen we can have a more organized base to work from, along with clearer directions (even templates) for researchers to follow to create software. We tell them how to build their thing, we package it in a way so it can be added to a container like:\n\n```import shub://anaconda3:latest\n```\nand that would cache that entire package for the user (for re-use) and also make it possible (if ever wanted) to export, not only from a bootstrap, but from a container:\n\n#bootstrap \n```singularity export container.img shub://anaconda3:latest \n```\nI would even go as far as to say that we stay away from system provided packages / software that are provided with package managers. For example, instead of a system python, I would use anaconda, miniconda, etc.\n\nAnyway - please read the above. I think if we work on a simple goal for this standard, and then start building examples and tools around it, we can tackle a few problems at once: the organizational / curation issue with containers, the ability to have more modularity while still preserving reproducibility, and finally, a repository of data and software containers.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315458406|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500063774.519166",
        "date": 1500063774519
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315444291|#802: Feature: Multi-Stage Builds>",
                "text": "I'm glad my request has fueled such fantastic brain dumps so far! Looking forward to the next one!!",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315444291|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500059671.728567",
        "date": 1500059671728
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315439943|#802: Feature: Multi-Stage Builds>",
                "text": "hey everyone I have a brain dump coming soon - need to decide where to put it :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315439943|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500058626.234354",
        "date": 1500058626234
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315395449|#800: fixing link so that /environment is honored>",
                "text": "Echoing to environment was never \"best use\" only as \"this is the workaround for now.\" In my mind it's very clear to have these two options:\n\n1. define environment under %environment for runtime, predictable things\n2. echo to `$SINGULARITY_ENVIRONMENT` to do the same thing for dynamic variables.\n\nThe others that you mention are simply not options we advocate. They were, and still are, hacks.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315395449|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500047534.570251",
        "date": 1500047534570
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315342845|#800: fixing link so that /environment is honored>",
                "text": "I think it would complicate matters from the user perspective by adding a 3rd method for setting up the environment.  In other words we tell the user \"echo to `/environment`.   No wait don't do that anymore now you should use `%environment` (unless you can't in which case you should echo to `/.singularity.d/environmet`).  No wait now you should echo to an env var instead.\"  This is basically part of the user interface.  I think we need to pick a method and stick to it.  Since we started with echoing to `/environment` however flawed that is I think we should still support it.  \n\nI'm not saying it complicates the code, I'm saying it complicates the user experience.  We should consider how much responsibility we are putting on the user to keep up with every change we make because they have to alter their workflow to keep up.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315342845|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1500033632.028641",
        "date": 1500033632028
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315248880|#800: fixing link so that /environment is honored>",
                "text": "oh +1, that makes sense. Too many :carrot: :carrot: &gt;&gt;&gt;",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315248880|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499997615.880555",
        "date": 1499997615880
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315245944|#802: Feature: Multi-Stage Builds>",
                "text": "Here is another interesting proposal for syntax that is being considered over on the docker repo, moby/moby#32100. Here they consider a very explicit EXPORT and IMPORT syntax. Just more food for thought.",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315245944|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499996359.649356",
        "date": 1499996359649
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315243642|#800: fixing link so that /environment is honored>",
                "text": "I think the $ENVIRONMENT_FILE should point to a new environment file, so %environment doesn't accidently get overwritten by a single `&gt;`.\n\n@GodloveD, I'm curious too what this would complicate. Can you elaborate?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315243642|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499995249.440544",
        "date": 1499995249440
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315241421|#800: fixing link so that /environment is honored>",
                "text": "&gt; &gt; let's define the environment variable to the environment file such that this can be done portably\ncool, so you mean this idea:\n\n```echo \"PANCAKES=yesplease\" &gt;&gt; $SINGULARITY_ENVIRONMENT\n```\n\nI think this makes most sense to support the way we are doing things now, while still allowing an easy workflow for the user to do it dynamically. @GodloveD what are your concerns with this approach?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315241421|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499994225.242515",
        "date": 1499994225242
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315240185|#800: fixing link so that /environment is honored>",
                "text": "I think those ideas are great @vsoch! Keep in mind too that the %environment scriptlet will do the same thing, but it won't handle dynamically created info like you are talking about. So yes, let's define the environment variable to the environment file such that this can be done portably. Shall we add that feature to this PR or create another? Up to you @GodloveD!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-315240185|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499993639.122751",
        "date": 1499993639122
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315236842|#802: Feature: Multi-Stage Builds>",
                "text": "The amazing thing here is (at least in my mind) I've now stumbled onto what I think might have been Docker's thought process for bringing in layers in the first place - you have users creating images, and there is some need to cache - what's the best way to do it? By tar guzzing up whatever is the difference from one line to the next, of course! And how do we identify it? By the sha256 sum, of course! If we had some method for a user to say \"I am defining this previous image to be X, and from X I will copy this file path into my image here\" that is basically similar to letting them package up some subset of a previous build, and then add to the current. But it's arguably worse than the Docker approach, because we don't really have a good way to uniquely identify them, or for a user to nicely do the import (other than manual.) \n\nSo - in my mind I think we need to do better than both approaches. Here is a dump of thoughts:\n\n*An import is a data container*\n\nA data container is really no different than some subset of content to put in a container. Thus, for this import, it's not \"pieces of other images\" that should be import, but rather data containers. They might have data, or software, both are good. We run into the issue given that the dump includes things like environment variables. We can either put the burden on defining what is needed on the user (and not bring any of the environment in with the data imports) or we can attempt to add to a master environment by having a new file created in `env/` for each data folder added. The same would go for the other metadata, it would need to be added to preserve information about each addition. This seems like a good rationale for us having the /env folder the way that we do, given that there aren't a huge number of imports that aren't reasonable. Again, the order of operations for what is defined is dependent on the user. If a particular software has it's own environment variables, it arguably shouldn't conflict too badly.\n\n*Enforce modularity with rules for dumping*\n\nThe riskiest thing about dumping things on top of other things is the potential for screwing something up. It pretty much always happens. We need (somewhat) a re-organization of \"where is best practice to put things.\" Minimally, if we enforce a rule that folders dumped cannot overwrite stuff already there, this would work naturally. For example, let's say I have some software that gets installed to `/usr/local` (like some weird container software I know...) If I were to just dump, I wouldn't actually overwrite anything, because singularity makes it's own folders within each, eg:\n\n• /usr/local/libexec/singularity\n• /usr/local/etc/singularity\n• /usr/local/bin/singularity\n\nSo it would be good practice to install in this manner. For data / files, we would want something similar, starting at some base folder, and then different \"data containers\" being added as subdirectories to that, never overwriting another one. Eg:\n\n• `/data` is in the root of my container\n     • onto it I dump a data object intended for `/data/sub1` - no overlap, no issue\n     • then `/data/sub2` - no overlap, no issue\n\nOverall I'd have:\n\n```/data\n    sub1/\n    sub2/\n```\nIf I then came along and tried to dump `/data/sub1`? I shouldn't be allowed to do that.\n\n*Organization of data containers*\n\nHashes are great for uniquely identifying contents, but the problem I have with them is that they are random/messy combinations of things. I would want a data container / package to be a single modular thing - eg, one python package, or one entire dataset. I need to think more about this part, but if we do allow for the generation of data containers, and arguably we could even do away with letting users decide for software and use package managers / repos and then host them somewhere, we could arguably come up with a nice namespace / organizational schema for modular software things. They would have hashes to verify things, but the \"thing\" that the user sees and writes to import into the container would be a more human friendly uri.\n\nThat's all my travel baggged brain can handle for now, haha. Thoughts?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315236842|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499991957.796507",
        "date": 1499991957796
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315233991|#802: Feature: Multi-Stage Builds>",
                "text": "I need to think more about this, because it's venturing into the \"orchestration and combination\" bit more than just \"build a single container \" (eg, think of the difference between docker-compose and Dockerfile. Those two things should be distinct I think, meaning that we don't want to make it unclear to the user what a Singularity recipe is for, versus \"some other thing.\"",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315233991|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499990626.521556",
        "date": 1499990626521
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315231780|#802: Feature: Multi-Stage Builds>",
                "text": "@gmkurtzer I think the original question is enunciated clearly in the post that was linked. Essentially, building a temporary container with the intention of copying some build artifacts into the final container.",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315231780|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499989703.305321",
        "date": 1499989703305
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315230923|#802: Feature: Multi-Stage Builds>",
                "text": "I would like to have an internal/native way of bootstrapping/building a container from within another container. That can solve lots of various issues and concerns, but does that answer the main request of this issue?\n\nGoing back to the original question... I think we can pretty easily add a %post1, %post2, %post3, and snapshot between them leaving intermediate containers. But... how useful is this? I would suggest actually that it would be better to do this by hand. Bootstrap one container, copy the image, bootstrap against the copy with another bootstrap file (without the \"BootStrap: ...\" line), and then keep going over and over.\n\nBTW, I do love the idea of \"abusing\" the %setup to create a temporary container! Haha, never thought of that!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-315230923|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499989354.223490",
        "date": 1499989354223
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315223140|#806: Failed to sudo make install in cluster>",
                "text": "Naively looking at the error, it looks like it thinks bin is something else (not a directory). Do you have anything in your `.bashrc` or startup profile that edits what \"bin\" equates to?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315223140|#806: Failed to sudo make install in cluster>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499986251.418879",
        "date": 1499986251418
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315214678|#806: Failed to sudo make install in cluster>",
                "text": "Are you trying to install on a network file system?  Perhaps one that has root perms disabled?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315214678|#806: Failed to sudo make install in cluster>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499983370.527030",
        "date": 1499983370527
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by MZreal on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315214377|#806: Failed to sudo make install in cluster>",
                "text": "Hi @vsoch, I have sudo permission only on the node that I want to install  singularity.\nI don't have sudo on the whole cluster (the other nodes).",
                "pretext": "[singularityware/singularity] New comment by MZreal on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315214377|#806: Failed to sudo make install in cluster>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499983270.489107",
        "date": 1499983270489
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315201386|#806: Failed to sudo make install in cluster>",
                "text": "Hey @MZreal. Do you have sudo permissions on your cluster? ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/806#issuecomment-315201386|#806: Failed to sudo make install in cluster>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499979740.003004",
        "date": 1499979740003
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#806 Failed to sudo make install in cluster' https://github.com/singularityware/singularity/issues/806 by MZreal",
                "text": "I used the commands below to install singularity on one node in a cluster\ngit clone <https://github.com/singularityware/singularity.git>\ncd singularity\n./autogen.sh\n./configure --prefix=/usr/local\nmake\nsudo make install\n\nIn the last command \"sudo make install\" it returned\nMaking install in bin\n/bin/sh: line 20 : cd: bin: Not a directory\nmake: *** [install-recursive] Error 1\n\nBut I can install singularity using these commands in my own desktop.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/MZreal|MZreal>",
                "title": "#806 Failed to sudo make install in cluster",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/806",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499973143.688375",
        "date": 1499973143688
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/804#issuecomment-315124985|#804: Can Singularity fully encapsulate X11?>",
                "text": "Yes, as @vsoch mentioned, X11 should be supported in it's default running configuration. I am going to close this, but if you find any issues, please comment and we can reopen it. Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/804#issuecomment-315124985|#804: Can Singularity fully encapsulate X11?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499962051.513448",
        "date": 1499962051513
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/804|#804 Can Singularity fully encapsulate X11?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/804|#804 Can Singularity fully encapsulate X11?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499962051.513394",
        "date": 1499962051513
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/805|#805 Bug fixes> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/805|#805 Bug fixes> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499961276.038436",
        "date": 1499961276038
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/805#issuecomment-315121032|#805: Bug fixes>",
                "text": "This is fantastic, thank you @cclerget!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/805#issuecomment-315121032|#805: Bug fixes>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499961249.021611",
        "date": 1499961249021
    },
    {
        "type": "message",
        "user": "alaindomissy",
        "text": "Who am I",
        "ts": "1499912066.711514",
        "date": 1499912066711
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/801|#801 import docker image error> by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/801|#801 import docker image error> by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499911020.515241",
        "date": 1499911020515
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314947721|#801: import docker image error>",
                "text": "thank you very much, I will pay attention to it",
                "pretext": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314947721|#801: import docker image error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499911014.514095",
        "date": 1499911014514
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#805 Bug fixes' https://github.com/singularityware/singularity/pull/805 by cclerget",
                "text": "Includes:\n\n• fix registry set key values\n• nodev enforcement for mount\n• restriction when no_new_privs support\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/cclerget|cclerget>",
                "title": "#805 Bug fixes",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/805",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499878652.443682",
        "date": 1499878652443
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/804#issuecomment-314808120|#804: Can Singularity fully encapsulate X11?>",
                "text": "I might be totally wrong about this, but my instinct is that singularity would share the same display as the host, so the error message is saying that it's already running! What you could try is to remove opening the new displays (and having them share, which may work for your application) or if you want to isolate, try running the container with `--containall` For example, here is standard shell:\n\n```$ singularity shell ubuntu.img\nSingularity ubuntu:~&gt; echo $DISPLAY\n:0\nSingularity ubuntu:~&gt; exit\nexit\n```\nNote that it's the same  on my host. And here is with containall:\n```\nsingularity shell --containall ubuntu.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity ubuntu:~&gt; echo $DISPLAY\n\nSingularity ubuntu:~&gt; \n```\nNotice the second is empty! So maybe one of those tricks will work? ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/804#issuecomment-314808120|#804: Can Singularity fully encapsulate X11?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499873747.528344",
        "date": 1499873747528
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#804 Can Singularity fully encapsulate X11?' https://github.com/singularityware/singularity/issues/804 by aday00",
                "text": "Dear Singularity gurus,\n\nThanks for the Singularity tool, it's very useful, and we're trying to move away from Docker.  Can Singularity fully encapsulate X11?\n\nI have an X application with automated button clicks etc.  A Docker instance runs its own X11 independent of other Dockers, and each Docker instance does this:\n```export DISPLAY=:0.0\nXvfb $DISPLAY -pixdepths 32 -screen 0 1280x1024x24\nstartxfce4 &amp;\n...\n```\n\nThat works fine with Docker, but with Singularity I get this error:\n`/usr/bin/startxfce4: X server already running on display :0.0`\n\nIt seems like Singularity isn't fully encapsulating X, so multiple Singularity instances on the same compute node collide in X.  It would be better to not use X at all, automating button clicks is not a good way to go, but this gets a one-off data preprocessing step done with unmodified external code.\n\nThanks for your consideration,\n-A",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/aday00|aday00>",
                "title": "#804 Can Singularity fully encapsulate X11?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/804",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499873314.245007",
        "date": 1499873314245
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314790623|#802: Feature: Multi-Stage Builds>",
                "text": ":astonished: -&gt; WOW!  This is really cool stuff!  I love the way you two are using and abusing the `%setup` section!  I think there are definitely lots of great potential applications for this.  As far as encouraging best practices... meh.  I'm always on the side of \"let's give people as much power as we can\".  If that means giving user's enough rope to hang themselves, then so be it.  Rope is useful for lots of things beyond suicide.  :smile_cat: ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314790623|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499870432.352671",
        "date": 1499870432352
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314608034|#802: Feature: Multi-Stage Builds>",
                "text": "@bauerm97 that is really cool! @gmkurtzer what are your thoughts? I take a similar (but different approach) that doesn't aim to break builds into pieces, but to only build the minimal size needed (with some padding). I basically build into a folder first, calculate the size and add some padding, and then run the bootstrap \"for real.\" I think building into a folder would take away some of the need to mount a singularity image with writable - what about doing something like this:\n\n*build-env.def*\n\n```\nBootstrap: docker\nFrom: ubuntu\n\n%post\n    touch /test.cpp\n```\n\n*build-final.def*\n\n```\nBootstrap: docker\nFrom: ubuntu\n\n%setup\n    mkdir estimate\n    sudo singularity bootstrap estimate build-env.def\n    size=$(du -sh estimate | awk '{print $1}')\n    mv estimate/test.cpp ${SINGULARITY_ROOTFS}/ \n```\n\nThe reason I added the bit about size is so that we could (if needed) at some point expand the image being built into given that it's not big enough. But arguably you could skip that and just have:\n\n```\nBootstrap: docker\nFrom: ubuntu\n\n%setup\n    mkdir estimate\n    sudo singularity bootstrap estimate build-env.def\n    mv estimate/test.cpp ${SINGULARITY_ROOTFS}/ \n```\n\nso then that would look like in final, and note that I changed \"using\" to \"import\", and I switched around the order so it's `import: [VARIABLE]:[FOLDER]`\n\n*build-final.def*\n\n```\nBootstrap: docker\nFrom: ubuntu\n\nimport: BUILD_ENV=/path/to/example\n\n%post\n    cp ${BUILD-ENV}/test.cpp /test.cpp\n```\nThis is a cool idea, but when you think about it, it really comes down to maintaining a base of quasi images (folders or images) and then having them defined as variables, and grabbing bits at runtime. This seems like a less elegant solution than just have layers, and it still breaks reproducibility because it creates a huge additional dependency of those things.\n\nBut on the other hand, I really like the modularity of it, especially since the final image does have all the requirements. I wonder if we could take a simpler approach that just lets the user import some subset of files / locations from an already existing image? Eg, I could have a folder of \"dependency images\"\n\n```/components\n     python\n     science\n     environment\n```\n\nand then when I write a new image and want to use them, I import what I want to where I want:\n\n```\nBootstrap: docker\nFrom: ubuntu\n\n%import \nBUILD_ENV /components/environment/base1\nPYTHON_MODULES /components/python/anaconda3\nRUNTIME /components/environment\n\n%post\n    cp ${BUILD-ENV}/test.cpp /test.cpp\n    cp ${PYTHON_MODULES}/ /anaconda3\n    cp ${RUNTIME}/runscript1 /.singularity.d/runscript    \n```\n\nBut again, is this really any different from having a `%files` section? If we allowed the user to define a variable to a path on the host for different groups of files, and then made those paths available in `%post`, that would be doing the same. \n\nIf we did have import, the statements would need to be kept as metadata, likely under labels (`/.singularity.d/labels.json`) but that's really not so useful because it's unlikely that someone would ever find it again.\n\nI like this idea, but breaking images into pieces is a dangerous game. It's hard enough to encourage good practices for reproducibility without having multiple things to grab from, and is the end goal really just saving a couple minutes of build time?\n\nIf we think through this further, I would want the following:\n• that this is somehow fundamentally different / improving upon the current way we can add files to images. Right now it just seems like we are taking the extra step to build first, and then add files from the build.\n• assurance that the import components are available for all, and not lost and then the image can't be rebuild.\n• a complete record of metadata associated with all imports\n\n@gmkurtzer what are your thoughts? Is there some quasi reasonable approach to this? I like the idea a lot for sure, but it gets me a bit nervous going in this direction.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314608034|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499818686.240474",
        "date": 1499818686240
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/803#issuecomment-314574417|#803: Fork.c overhaul to use clone() instead of fork()>",
                "text": "This looks fantastic @bauerm97, but I'll wait for feedback from @bbockelm before I do the merge. Also, I'd like to merge locally, and take a closer look.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/803#issuecomment-314574417|#803: Fork.c overhaul to use clone() instead of fork()>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499807759.846943",
        "date": 1499807759846
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314570225|#802: Feature: Multi-Stage Builds>",
                "text": "@blakedewey so I read through that article and I believe we can already achieve that functionality, we just don't provide a pretty wrapper for it (yet?).\n\nSo let's consider two definition files, both located in the same location:\n\n```\n//build-env.def\nBootstrap: docker\nFrom: ubuntu\n\n%post\n    touch /test.cpp\n\n```\n\n```\n//build-final.def\nBootstrap: docker\nFrom: ubuntu\n\n%setup\n    singularity create -s 568 build-env\n    sudo singularity bootstrap build-env build-env.def\n    singularity shell -w build-env &amp;&amp; mv /test.cpp .\n    mv test.cpp ${SINGULARITY_ROOTFS}/\n\n```\n\nI think that if you attempt to bootstrap build-final now, it will build the build-env container, enter it, copy the target out of the container, and then move it into the new build-final container. Obviously this isn't really pretty, but I believe this accomplishes what you're looking for. If this is the use case you're looking for, we can probably build a wrapper for this (in fact, @vsoch might have already written a very similar thing for singularity-hub to minimize image size?)",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314570225|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499806820.403553",
        "date": 1499806820403
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/803#issuecomment-314546373|#803: Fork.c overhaul to use clone() instead of fork()>",
                "text": "@bbockelm Could you weigh in on why the build was failing when I attempted to allocate the current max stack limit with an out of memory errnor? For now I've switched the stack size to 1MB and hopefully that should be enough, but I'm not sure",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/803#issuecomment-314546373|#803: Fork.c overhaul to use clone() instead of fork()>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499801115.437542",
        "date": 1499801115437
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/793|#793 Use clone as fallback when unshare fails with CLONE_NEWPID> by <https://github.com/bauerm97|bauerm97>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/793|#793 Use clone as fallback when unshare fails with CLONE_NEWPID> by <https://github.com/bauerm97|bauerm97>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499799844.772095",
        "date": 1499799844772
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-314541278|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "See #803 ",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-314541278|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499799844.772069",
        "date": 1499799844772
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#803 Fork.c overhaul to use clone() instead of fork()' https://github.com/singularityware/singularity/pull/803 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\nAs discussed in #777, on some systems a call to `unshare()` will fail in some systems that support `CLONE_NEWPID` only for `clone()`. The original fix ( #793 ) was to simply check if calling `unshare()` failed and attempt to use `clone()` as a fallback. This works as a temporary fix, but there is no reason not to always use `clone()`.\n\nThis PR does the following:\n\n1. Implement `fork_ns()` which mimics `fork()` interface but uses `clone()`. Thanks @bbockelm \n2. Add two new functions to install the signal handlers. These are in functions so that in the future we can move to a more \"object oriented\" forking methodology as discussed w/ Greg.\n3. Add new function `wait_child()` which listens on the pipes that were created for the signal handlers to write to, and propagates signals as expected. This function use to be inside of `singularity_fork()`\n4. `singularity_fork()` now has the same behavior as `fork()`. Both the parent and child will return before blocking. It is now the parent's responsibility to call `wait_child()` after it calls `singularity_fork()` if it wishes to block for the signals. Further, if `singularity_fork()` is called with escalated privileges, we will not raise and drop privileges before and after the call to `fork_ns()` so that we preserve the ability to call binaries as root (_e.g. create.c_)\n5. Update all calls to `singularity_fork*` to match the new interface [takes one additional argument, _unsigned int flags_, which are passed as flags to `clone()`]\n6. src/lib/runtime/ns/pid/pid.c is much more streamlined.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #777 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: \n@singularityware/singularity-admin \n@AdamSimpson Please ensure that this PR fixes your issue as well\n@bbockelm Would like your thoughts on the refactoring of fork.c, maybe better stack size code?",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#803 Fork.c overhaul to use clone() instead of fork()",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/803",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499799763.726987",
        "date": 1499799763726
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314536667|#802: Feature: Multi-Stage Builds>",
                "image_url": "https://cdn-images-1.medium.com/max/1200/1*95NtOiBWDJv0Ka__kVjZWQ.jpeg",
                "image_width": 444,
                "image_height": 250,
                "image_bytes": 105662,
                "text": "I hadn't thought of multiple import calls. That may be an interesting idea. But I don't believe it has to be that complex. \n\nSee the Docker example here: <https://medium.com/travis-on-docker/multi-stage-docker-builds-for-creating-tiny-go-images-e0e1867efe5a>\n\nYou are explicitly copying what you have built in the previous container to specifically avoid what you are talking about. ",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314536667|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499798768.160133",
        "date": 1499798768160
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314534896|#802: Feature: Multi-Stage Builds>",
                "text": "The issue is with combining the two - given everything else is equivalent minus two (isolated) libraries, it would be easy to dump both into the same image. Imagine something in the bootstrap spec that might let you do this like:\n\n```Bootstrap: docker\nFrom tensorflow/library1\nFrom tensorflow/library2\n```\nBut then it would be (more likely) that dumping one on top of the other creates some kind of error if a setting isn't honored, etc. Imagine a very simple case of one config file being shared, and then one dump overrides the original and only one library is configured. I can't imagine how messy it would get given some (but not total) overlap of containers.\n\nWould you be willing and able to test this idea? Eg, take some of these docker intermediate images, get their uri to import, and then try manually building your singularity image with a call to import twice with a new singularity container. I'd be interested to know for how many examples it works, what bugs you hit, and simple things like what happens if the order is reversed. I do think it (could?) be possibly considered to have this kind of functionality - after all there is nothing stopping a user from doing `singularity import` twice for the same container, it would simply be extended (in some way) to bootstrap.\n\nYou could also just do the import twice, but that's probably not well preserved. Maybe some kind of orchestration file to create an image, and import some set of layers would be a reasonable workaround?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314534896|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499798376.941180",
        "date": 1499798376941
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314532965|#802: Feature: Multi-Stage Builds>",
                "text": "Love the lolcow. I have that running fine with %post there. The thing I was looking to do was take the build artifacts from two different docker images together. Say you have another library that you are using in conjunction with Tensorflow (it really makes sense with &gt;2), then you could build each independently and simply pull and combine. Makes it very easy for sharing complex images, where there may be a whole host of software at specific versions that need to be used in the same image.",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314532965|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797938.692685",
        "date": 1499797938692
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314532724|#802: Feature: Multi-Stage Builds>",
                "text": "all hail the lolcow!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314532724|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797883.660057",
        "date": 1499797883660
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314531640|#800: fixing link so that /environment is honored>",
                "text": "ok @gmkurtzer do you want to weigh in here?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314531640|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797646.521236",
        "date": 1499797646521
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314531623|#802: Feature: Multi-Stage Builds>",
                "text": "Sure.  That's how my <https://github.com/GodloveD/lolcow-installer|lolcow-installer> works.  It pulls down an existing <https://hub.docker.com/r/godlovedc/lolcow/|Docker Hub image> and then adds a `%runscript`.  But there is nothing preventing you from adding a `%post` section too if you are so inclined.  <https://hpc.nih.gov/examples/centos_TFlow4GPU.def|Here> is a simple TensorFlow example that also does something similar.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314531623|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797644.520033",
        "date": 1499797644520
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314529758|#802: Feature: Multi-Stage Builds>",
                "text": "Do you have an example of that @GodloveD? That may be a very reasonable workaround, as currently I am just working in docker then importing to Singularity (which is working just fine!). As you said it would just be nice to have it natively supported so that I can develop the two side-by-side.",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314529758|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797234.289645",
        "date": 1499797234289
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314528885|#802: Feature: Multi-Stage Builds>",
                "text": "You can sortof do the same thing now by starting with a Docker Hub image and using docker as your bootstrap agent in your definition file.  I agree that it would be wonderful to also be able to do that with containers on shub or with local containers.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314528885|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499797046.183688",
        "date": 1499797046183
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314528106|#802: Feature: Multi-Stage Builds>",
                "text": "I don't think it necessarily breaks reproducibility any more than a linear build path would. You would have multiple dependencies, sure, but that could exist in one Singularity spec file as well. You would also be able to reproducibly build any number of combinations of versions for your dependencies. \n\nDocker actually does it pretty simply by allowing copying from intermediate containers. It actually creates the \"build\" image completely, then allows access to the file system so that you can copy out files. It's not even as complicated as using layers.",
                "pretext": "[singularityware/singularity] New comment by blakedewey on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314528106|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499796867.082939",
        "date": 1499796867082
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314524426|#802: Feature: Multi-Stage Builds>",
                "text": "I think this probably works because an intermediate build is a layer. Arguably you could achieve the same in Singularity by way of cleaning up (rm -rf) build and unnecessary directories. What it sounds like you want is more efficiency in building - eg, given that you are using dependency X five times, you should be able to store that as an \"intermediate build\" and then dump that layer.\n\nThis is an interesting question because it would be nice to have, but it potentially breaks reproducibility in making a single container dependent on multiple other things. The workaround for this would be to simply keep building your containers with Docker, and then convert the final minimal thing into a Singularity image.  In order to achieve the same functionality as Docker we would need to have some way to merge / combine containers, which gets messy. How would you propose this to work?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/802#issuecomment-314524426|#802: Feature: Multi-Stage Builds>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499796034.618303",
        "date": 1499796034618
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314478488|#800: fixing link so that /environment is honored>",
                "text": "And I think that adding an env var that we can `echo` to will only complicate matters even more.  I think changes like this that impact the user interface should not be made lightly.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314478488|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499786353.916231",
        "date": 1499786353916
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314477464|#800: fixing link so that /environment is honored>",
                "text": "I should probably say that this is not my idea.  I made this PR at @gmkurtzer request following a meeting we had yesterday.  So he should probably weigh in.  \n\nI don't really see any reason to leave `/singularity` where it is but to move `/environment` to the `/.singularity.d` directory.  Seems like it should be one or the other.  \n\nMaybe it was a bad idea to pollute the root directory with those files in the first place, but what's done is done.  It's a big headache for users if the locations keep changing.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314477464|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499786155.788032",
        "date": 1499786155788
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#802 Feature: Multi-Stage Builds' https://github.com/singularityware/singularity/issues/802 by blakedewey",
                "text": "This is a feature request and thought experiment to go along with #138. \n\nAs of CE 17.05, Docker supports Multi-Stage Builds, where intermediate containers are created and destroyed during the build process. This has the effect of minimizing the final image (by removing all components required for building), but also has some effect on caching, as an intermediate image can be pre-built and called into the final build using a FROM line, potentially even pulling it from a Hub. This could be a great addition to Singularity, especially where large builds can create awkwardly large binary files or compilation times are very long.\n\nHas anyone considered this? ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/blakedewey|blakedewey>",
                "title": "#802 Feature: Multi-Stage Builds",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/802",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499785529.386210",
        "date": 1499785529386
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314471648|#801: import docker image error>",
                "text": "And <https://www.gnu.org/software/tar/manual/html_section/tar_27.html#warnings|here> are the docs for using tar. I'd be curious how that tar was made to produce an old timestamp.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314471648|#801: import docker image error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499785059.070771",
        "date": 1499785059070
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314471374|#801: import docker image error>",
                "text": "This seems to be an issue with tar, suggesting something about the archive is weird. Did you try this command with `--warning=no-timestamp` to disregard the warning? Also, why are you importing with tar instead of just using the docker uri? Eg:\n\n```singularity import container.img docker://intel/caffee:4.0\n```\n\nI also notice that you are running as root? Be careful with this because it could produce an image with different permissions than you would expect.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/801#issuecomment-314471374|#801: import docker image error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499785005.035120",
        "date": 1499785005035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314469521|#800: fixing link so that /environment is honored>",
                "text": "I think we moved the file into the metadata folder because it affords a distinct barrier between \"container\" and \"metadata.\" To have \"some in and some out\" would be confusing. Perhaps a workaround would be to allow the user to echo to the same path, but via an environment variable set during bootstrap? Eg,\n\n```echo \"PANCAKES=yesplease\" &gt;&gt; SINGULARITY_ENVIRONMENT\n```\n\nand that way, we can preserve the clean / distinct -ness of the metadata folder, while still making it an intuitive workflow. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314469521|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499784655.805920",
        "date": 1499784655805
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314454632|#800: fixing link so that /environment is honored>",
                "text": "I think the current method is to echo to `/.singularity.d/env/90-environment.sh`.  That seems much worse and less intuitive than echoing to `/environment`.  Popping the `/environment` link back to the top level will also mirror the current behavior of `/singularity` so it will be more consistent.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314454632|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499781949.114991",
        "date": 1499781949114
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#801 import docker image error' https://github.com/singularityware/singularity/issues/801 by yangyang-zhang",
                "text": "*Version of Singularity:*\n\n[root@c031 intel_caffe]# singularity --version\n2.3.1-dist\n\n*Expected behavior*\n\nThe docker image tar is  Make it yourself，Docker is in normal use\n\n*Actual behavior*\n\n[root@c031 intel_caffe]# ll ~/docker/intel_caffe_v4.0.tar \n-rw------- 1 root root 2176706048 Jul 11 19:17 /root/docker/intel_caffe_v4.0.tar\n[root@c031 intel_caffe]# cat ~/docker/intel_caffe_v4.0.tar  | singularity  import intelcaffe.img \n/usr/bin/tar: manifest.json: implausibly old time stamp 1970-01-01 08:00:00\n/usr/bin/tar: repositories: implausibly old time stamp 1970-01-01 08:00:00\n\n*Steps to reproduce behavior*\n\nWrite here.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "title": "#801 import docker image error",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/801",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499772185.945790",
        "date": 1499772185945
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314308345|#800: fixing link so that /environment is honored>",
                "text": "I would advocate for supporting a way to define environment variables during post (that cannot be determined) and still not supporting users echoing into /environment.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314308345|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499741528.126901",
        "date": 1499741528126
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314289630|#800: fixing link so that /environment is honored>",
                "text": "I think that `/environment` was supposed to be symlink_ed_ but instead that thing getting symlinked is /.singularity.d/environment.  That's not really maintaining backward compatibility or going with the new scheme either.\n\nThere are also things that cannot be done with catting to an environment file.  You may not know what env vars need to be written out to the /environment until after the %setup section has run some things.  So there is no way you can just put it in the %environment section.  \n\nOn a separate note, I have no idea why the travis build failed.  ???",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314289630|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499733694.662355",
        "date": 1499733694662
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314288601|#800: fixing link so that /environment is honored>",
                "text": "I agree we should support older images that have the /environment, but I don't think we should be encouraging people to echo things / write into `/environment` directly. This is why we added `%environment`. Do you think it is reasonable to support older images with `/environment`, but for images created with ability to use `%environment` we shouldn't encourage the old hacky way?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314288601|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499733258.576668",
        "date": 1499733258576
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314288455|#800: fixing link so that /environment is honored>",
                "text": "I think `/environment` is a symlink? It gets generated from the contents of the singularity metadata env folder (`/.singularity.d/env/*`)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/800#issuecomment-314288455|#800: fixing link so that /environment is honored>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499733186.562460",
        "date": 1499733186562
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-314288162|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "text": "and for just the docker python bits, you can use `SINGULARITY_CACHEDIR`. If that doesn't work there is an override from the calling function that would be a bug we should look into. Here is where the setting is found (and other variants you can use to disable and use tmp, etc.) <https://github.com/singularityware/singularity/blob/adf5259ac94d7b213c649f073dcda32459b0c8b7/libexec/python/defaults.py#L107>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-314288162|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499733050.534797",
        "date": 1499733050534
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-314287474|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "text": "Actually, good call @vsoch, I forgot about that. You can influence where things get cached locally via `SINGULARITY_LOCALCACHEDIR`.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-314287474|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499732760.475249",
        "date": 1499732760475
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#800 fixing link so that /environment is honored' https://github.com/singularityware/singularity/pull/800 by GodloveD",
                "text": "*Description of the Pull Request (PR):*\n\nFixes backward compatibility with `/environment` file\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #799\n\n*Checkoff for all PRs:*\n\n• :white_check_mark:  I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• :white_check_mark:  I have tested this PR locally with a `make test`\n• :white_check_mark:  This PR is NOT against the project's master branch\n• :white_check_mark:  I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• :white_check_mark:  This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/GodloveD|GodloveD>",
                "title": "#800 fixing link so that /environment is honored",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/800",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499730799.036091",
        "date": 1499730799036
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#799 `/environment` not honored in Singularity 2.3' https://github.com/singularityware/singularity/issues/799 by GodloveD",
                "text": "*Version of Singularity:*\n\n2.3.1\n\n*Expected behavior*\n\n`/environment` file should be honored\n\n*Actual behavior*\n\n`/environment` file is not honored\n\n*Steps to reproduce behavior*\n\nConsider the following definition file:\n```\nBootStrap: docker\nFrom: ubuntu:latest   # This is a comment\n\n%post\n    echo \"export FOO=bar\" &gt; /environment\n```If you use it to `create` and `bootstrap` a file in Singularity 2.2.1 and then execute the following command you can see the env var `FOO`\n```\n$ singularity exec some.img printenv | grep FOO\nFOO=bar\n```But if you do the same thing in 2.3.1...\n```\n$ singularity exec some.img printenv | grep FOO\n```\nNo `FOO`!  :cry: ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#799 `/environment` not honored in Singularity 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/799",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499730555.978292",
        "date": 1499730555978
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314259368|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "ok here ya go! Let us know if you have more for the (currently tiny) list : <http://singularity.lbl.gov/docs-docker>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314259368|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499723276.845114",
        "date": 1499723276845
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314257611|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Singularity importing from Docker, to make it possible for userspace, cannot do more than dumping layers. \nI would consider a call to `ldconfig` more of an installation step, reasonable to do in a Dockerfile, not so reasonable to do in userspace without being an admin. I also think adding something on the side of Singularity is akin to hardcoding a very specific solution to a very particular problem, and given that it's easily fixed on your end, I'm not convinced it should be added to Singularity.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314257611|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499722821.662735",
        "date": 1499722821662
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314254538|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "If special requirements with regards to dockerfiles can be avoided that is\nof a course preferred solution since it increases compatibility and avoids\nrunning into confusing errors.\n\nWe'll be adding the ldconfig calls to our dockerfiles as a fix for now, but\na solution within Singularity would be much better.\n\nOn Jul 10, 2017 2:26 PM, \"Vanessa Sochat\" <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; @jmstover <https://github.com/jmstover> I think as @chrisfilo\n&gt; <https://github.com/chrisfilo> suggested this would be best done in the\n&gt; Dockerfile. And +1 @chrisfilo <https://github.com/chrisfilo> we should\n&gt; have a \"best practices\" page for Docker images intended for singularity -\n&gt; i'll get on that soon. If you have any other things you've learned please\n&gt; post them here. And @gmkurtzer <https://github.com/gmkurtzer> yes feel\n&gt; free to close when you have reviewed all points.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/795#issuecomment-314252207>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AAOkpxPFEQLSaBh4qm1WrCN7sokZ5Neuks5sMpcGgaJpZM4OP7rf>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314254538|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499722314.456016",
        "date": 1499722314456
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314252207|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "@jmstover I think as @chrisfilo suggested this would be best done in the Dockerfile. And +1 @chrisfilo we should have a \"best practices\" page for Docker images intended for singularity - i'll get on that soon. If you have any other things you've learned please post them here. And @gmkurtzer yes feel free to close when you have reviewed all points.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314252207|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499721990.316201",
        "date": 1499721990316
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314238322|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Ok - we will add it to our dockerfiles.\n\nIf there is a guide for building docker images that should work with singularity this tip should be added to it.\n\n@gmkurtzer you can close this issue whenever you feel like it (don't want to cut off the ongoing discussion).",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314238322|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499720164.463248",
        "date": 1499720164463
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314237646|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "@vsoch Would it be easy to add in on a docker:// URI to call `ldconfig` after the import steps?\n\n-J",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314237646|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499720082.421051",
        "date": 1499720082421
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314235821|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Yes, I'm pulling `mriqc:latest` - I still encountered the same error when just trying\n```LD_LIBRARY_CONFIG=/usr/lib/x86_64-linux-gnu/mesa:$LD_LIBRARY_CONFIG\n```\nbut, if I explicitly call ldconfig before running mriqc, the library is found! Thanks for the help!",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314235821|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499719885.320577",
        "date": 1499719885320
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-314216770|#789: Infrastructure for Security (and other) Checks>",
                "text": "heyo! Just a quick note that I'll be back to work on this when I get back from PEARC. See ya tomorrow @gmkurtzer !",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-314216770|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499716511.605027",
        "date": 1499716511605
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314203800|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Can you try adding in a explicit call to `ldconfig` in your def file at the end when you're done? It's probably like @chrisfilo mentioned, and it's not being ran when the image is still writable.\n\nOr... maybe not, you're calling directly to `docker://poldracklab/mriqc:latest` aren't you... As a test, what if you add `/usr/lib/x86_64-linux-gnu/mesa` to your environment `LD_LIBRARY_CONFIG` before you try running the command?\n\n-J",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314203800|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499713515.084636",
        "date": 1499713515084
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314201317|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "@jmstover looks like both images' /etc/ld.sof.conf point to the lib\n\n*Singularity pull*\n\n```\nSingularity mriqc:latest:~&gt; cat  /etc/ld.so.conf\ninclude /etc/ld.so.conf.d/*.conf\n\nSingularity mriqc:latest:~&gt; cat  /etc/ld.so.conf.d/*.conf\n\n*libc default configuration*\n\n/usr/local/lib\n\n*Multiarch support*\n\n/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu/mesa-egl\n/usr/lib/x86_64-linux-gnu/mesa\n```\n\n*Docker2Singularity*\n\n```\nmathiasg@openmind7:voice$ cat /etc/ld.so.conf\ninclude /etc/ld.so.conf.d/*.conf\n\nmathiasg@openmind7:voice$ cat /etc/ld.so.conf.d/*.conf\n\n*libc default configuration*\n\n/usr/local/lib\n\n*Multiarch support*\n\n/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu\n/usr/lib/x86_64-linux-gnu/mesa-egl\n/usr/lib/x86_64-linux-gnu/mesa\n```",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314201317|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499712934.767906",
        "date": 1499712934767
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/773|#773 added inspect command to help doc> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/773|#773 added inspect command to help doc> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499708841.501270",
        "date": 1499708841501
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314180620|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Maybe docker2singularity implicitly updates ld cache, but singualrity\npull/exec does not (because the image is read only by then)...\n\nOn Mon, Jul 10, 2017 at 10:36 AM, Jason Stover <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; Is /usr/lib/x86_64-linux-gnu/mesa in /etc/ld.so.conf (or a file in\n&gt; /etc/ld.so.conf.d/*) in the Singularity image? What about when you do the\n&gt; docker2singularity?\n&gt; \n&gt; -J\n&gt; \n&gt; On Mon, Jul 10, 2017 at 11:48 AM, Mathias Goncalves &lt;\n&gt; notifications@github.com&gt; wrote:\n&gt; &gt; @chrisfilo <https://github.com/chrisfilo> hmm, it isn't found.\n&gt; &gt; \n&gt; &gt; • d2s\n&gt; &gt;\n&gt; &gt; mathiasg@openmind7:~$ ldd /usr/lib/afni/bin/3dSkullStrip\n&gt; &gt; linux-vdso.so.1 =&gt; (0x00007fff3d3fe000)\n&gt; &gt; libXm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXm.so.4 (0x00002b0adda3a000)\n&gt; &gt; libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00002b0addf03000)\n&gt; &gt; libSUMA.so =&gt; /usr/lib/afni/lib/libSUMA.so (0x00002b0ade20c000)\n&gt; &gt; libglut.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libglut.so.3\n&gt; &gt; (0x00002b0aded93000)\n&gt; &gt; libmri.so =&gt; /usr/lib/afni/lib/libmri.so (0x00002b0adefdb000)\n&gt; &gt; libXt.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXt.so.6 (0x00002b0adfc3c000)\n&gt; &gt; libvolpack.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libvolpack.so.1\n&gt; &gt; (0x00002b0adfea5000)\n&gt; &gt; libnetcdf.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libnetcdf.so.11\n&gt; &gt; (0x00002b0ae00eb000)\n&gt; &gt; libf2c.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libf2c.so.2\n&gt; &gt; (0x00002b0ae344e000)\n&gt; &gt; libgiftiio.so.0 =&gt; /usr/lib/libgiftiio.so.0 (0x00002b0ae366b000)\n&gt; &gt; libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1\n&gt; &gt; (0x00002b0ae388b000)\n&gt; &gt; libniftiio.so.2 =&gt; /usr/lib/libniftiio.so.2 (0x00002b0ae3ab4000)\n&gt; &gt; libznz.so.2 =&gt; /usr/lib/libznz.so.2 (0x00002b0ae3cd6000)\n&gt; &gt; libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00002b0ae3eda000)\n&gt; &gt; libnifticdf.so.2 =&gt; /usr/lib/libnifticdf.so.2 (0x00002b0ae40f4000)\n&gt; &gt; libSM.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 (0x00002b0ae4311000)\n&gt; &gt; libICE.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6\n&gt; &gt; (0x00002b0ae4519000)\n&gt; &gt; libX11.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6\n&gt; &gt; (0x00002b0ae4733000)\n&gt; &gt; libXext.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6\n&gt; &gt; (0x00002b0ae4a6d000)\n&gt; &gt; libXmHTML.so.1.1 =&gt; /usr/lib/x86_64-linux-gnu/libXmHTML.so.1.1\n&gt; &gt; (0x00002b0ae4c7f000)\n&gt; &gt; libgts-0.7.so.5 =&gt; /usr/lib/x86_64-linux-gnu/libgts-0.7.so.5\n&gt; &gt; (0x00002b0ae4efc000)\n&gt; &gt; libgsl.so.19 =&gt; /usr/lib/x86_64-linux-gnu/libgsl.so.19\n&gt; &gt; (0x00002b0ae5159000)\n&gt; &gt; libgslcblas.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgslcblas.so.0\n&gt; &gt; (0x00002b0ae5598000)\n&gt; &gt; libGLw.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLw.so.1\n&gt; &gt; (0x00002b0ae57d6000)\n&gt; &gt; libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1\n&gt; &gt; (0x00002b0ae59dd000)\n&gt; &gt; libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0\n&gt; &gt; (0x00002b0ae5bff000)\n&gt; &gt; libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00002b0ae5e1c000)\n&gt; &gt; libXmu.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXmu.so.6\n&gt; &gt; (0x00002b0ae61e5000)\n&gt; &gt; libfontconfig.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libfontconfig.so.1\n&gt; &gt; (0x00002b0ae63fe000)\n&gt; &gt; libXft.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libXft.so.2\n&gt; &gt; (0x00002b0ae6641000)\n&gt; &gt; libjpeg.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libjpeg.so.8\n&gt; &gt; (0x00002b0ae6856000)\n&gt; &gt; libpng12.so.0 =&gt; /lib/x86_64-linux-gnu/libpng12.so.0\n&gt; &gt; (0x00002b0ae6aaf000)\n&gt; &gt; /lib64/ld-linux-x86-64.so.2 (0x00002b0add812000)\n&gt; &gt; libGLU.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLU.so.1\n&gt; &gt; (0x00002b0ae6cd4000)\n&gt; &gt; libGL.so.1 =&gt; /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1\n&gt; &gt; (0x00002b0ae6f43000)\n&gt; &gt; libtracktools.so =&gt; /usr/lib/afni/lib/libtracktools.so\n&gt; &gt; (0x00002b0ae71b7000)\n&gt; &gt; lib3DEdge.so =&gt; /usr/lib/afni/lib/lib3DEdge.so (0x00002b0ae73e4000)\n&gt; &gt; libsegtools.so =&gt; /usr/lib/afni/lib/libsegtools.so (0x00002b0ae75f9000)\n&gt; &gt; libXi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXi.so.6 (0x00002b0ae780e000)\n&gt; &gt; libXxf86vm.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1\n&gt; &gt; (0x00002b0ae7a1e000)\n&gt; &gt; libhdf5_serial_hl.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial_hl.so.10\n&gt; &gt; (0x00002b0ae7c24000)\n&gt; &gt; libhdf5_serial.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial.so.10\n&gt; &gt; (0x00002b0ae7e44000)\n&gt; &gt; libcurl-gnutls.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4\n&gt; &gt; (0x00002b0ae82e1000)\n&gt; &gt; libuuid.so.1 =&gt; /lib/x86_64-linux-gnu/libuuid.so.1 (0x00002b0ae854e000)\n&gt; &gt; libxcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1\n&gt; &gt; (0x00002b0ae8753000)\n&gt; &gt; libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00002b0ae8975000)\n&gt; &gt; libXpm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXpm.so.4\n&gt; &gt; (0x00002b0ae8b79000)\n&gt; &gt; libglib-2.0.so.0 =&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0\n&gt; &gt; (0x00002b0ae8d8b000)\n&gt; &gt; libfreetype.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libfreetype.so.6\n&gt; &gt; (0x00002b0ae909c000)\n&gt; &gt; libXrender.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1\n&gt; &gt; (0x00002b0ae9346000)\n&gt; &gt; libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6\n&gt; &gt; (0x00002b0ae9550000)\n&gt; &gt; libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1\n&gt; &gt; (0x00002b0ae98d2000)\n&gt; &gt; libxcb-dri3.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0\n&gt; &gt; (0x00002b0ae9ae8000)\n&gt; &gt; libxcb-present.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-present.so.0\n&gt; &gt; (0x00002b0ae9ceb000)\n&gt; &gt; libxcb-sync.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1\n&gt; &gt; (0x00002b0ae9eee000)\n&gt; &gt; libxshmfence.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxshmfence.so.1\n&gt; &gt; (0x00002b0aea0f5000)\n&gt; &gt; libglapi.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglapi.so.0\n&gt; &gt; (0x00002b0aea2f8000)\n&gt; &gt; libXdamage.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXdamage.so.1\n&gt; &gt; (0x00002b0aea527000)\n&gt; &gt; libXfixes.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libXfixes.so.3\n&gt; &gt; (0x00002b0aea72a000)\n&gt; &gt; libX11-xcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1\n&gt; &gt; (0x00002b0aea930000)\n&gt; &gt; libxcb-glx.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0\n&gt; &gt; (0x00002b0aeab32000)\n&gt; &gt; libxcb-dri2.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0\n&gt; &gt; (0x00002b0aead4b000)\n&gt; &gt; libdrm.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libdrm.so.2\n&gt; &gt; (0x00002b0aeaf50000)\n&gt; &gt; libsz.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsz.so.2 (0x00002b0aeb15f000)\n&gt; &gt; libidn.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libidn.so.11\n&gt; &gt; (0x00002b0aeb362000)\n&gt; &gt; librtmp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librtmp.so.1\n&gt; &gt; (0x00002b0aeb595000)\n&gt; &gt; libnettle.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.6\n&gt; &gt; (0x00002b0aeb7b1000)\n&gt; &gt; libgnutls.so.30 =&gt; /usr/lib/x86_64-linux-gnu/libgnutls.so.30\n&gt; &gt; (0x00002b0aeb9e7000)\n&gt; &gt; libgssapi_krb5.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2\n&gt; &gt; (0x00002b0aebd17000)\n&gt; &gt; liblber-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2\n&gt; &gt; (0x00002b0aebf61000)\n&gt; &gt; libldap_r-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2\n&gt; &gt; (0x00002b0aec170000)\n&gt; &gt; libXau.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6\n&gt; &gt; (0x00002b0aec3c1000)\n&gt; &gt; libXdmcp.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6\n&gt; &gt; (0x00002b0aec5c5000)\n&gt; &gt; libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00002b0aec7cb000)\n&gt; &gt; libaec.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libaec.s…",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314180620|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499708549.338884",
        "date": 1499708549338
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314178977|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Is /usr/lib/x86_64-linux-gnu/mesa in /etc/ld.so.conf (or a file in\n/etc/ld.so.conf.d/*) in the Singularity image? What about when you do the\ndocker2singularity?\n\n-J\n\nOn Mon, Jul 10, 2017 at 11:48 AM, Mathias Goncalves &lt;\nnotifications@github.com&gt; wrote:\n\n&gt; @chrisfilo <https://github.com/chrisfilo> hmm, it isn't found.\n&gt; \n&gt; • d2s\n&gt; \n&gt; mathiasg@openmind7:~$ ldd /usr/lib/afni/bin/3dSkullStrip\n&gt;   linux-vdso.so.1 =&gt;  (0x00007fff3d3fe000)\n&gt;   libXm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXm.so.4 (0x00002b0adda3a000)\n&gt;   libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00002b0addf03000)\n&gt;   libSUMA.so =&gt; /usr/lib/afni/lib/libSUMA.so (0x00002b0ade20c000)\n&gt;   libglut.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libglut.so.3 (0x00002b0aded93000)\n&gt;   libmri.so =&gt; /usr/lib/afni/lib/libmri.so (0x00002b0adefdb000)\n&gt;   libXt.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXt.so.6 (0x00002b0adfc3c000)\n&gt;   libvolpack.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libvolpack.so.1 (0x00002b0adfea5000)\n&gt;   libnetcdf.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libnetcdf.so.11 (0x00002b0ae00eb000)\n&gt;   libf2c.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libf2c.so.2 (0x00002b0ae344e000)\n&gt;   libgiftiio.so.0 =&gt; /usr/lib/libgiftiio.so.0 (0x00002b0ae366b000)\n&gt;   libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00002b0ae388b000)\n&gt;   libniftiio.so.2 =&gt; /usr/lib/libniftiio.so.2 (0x00002b0ae3ab4000)\n&gt;   libznz.so.2 =&gt; /usr/lib/libznz.so.2 (0x00002b0ae3cd6000)\n&gt;   libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00002b0ae3eda000)\n&gt;   libnifticdf.so.2 =&gt; /usr/lib/libnifticdf.so.2 (0x00002b0ae40f4000)\n&gt;   libSM.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 (0x00002b0ae4311000)\n&gt;   libICE.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6 (0x00002b0ae4519000)\n&gt;   libX11.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00002b0ae4733000)\n&gt;   libXext.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00002b0ae4a6d000)\n&gt;   libXmHTML.so.1.1 =&gt; /usr/lib/x86_64-linux-gnu/libXmHTML.so.1.1 (0x00002b0ae4c7f000)\n&gt;   libgts-0.7.so.5 =&gt; /usr/lib/x86_64-linux-gnu/libgts-0.7.so.5 (0x00002b0ae4efc000)\n&gt;   libgsl.so.19 =&gt; /usr/lib/x86_64-linux-gnu/libgsl.so.19 (0x00002b0ae5159000)\n&gt;   libgslcblas.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgslcblas.so.0 (0x00002b0ae5598000)\n&gt;   libGLw.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLw.so.1 (0x00002b0ae57d6000)\n&gt;   libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00002b0ae59dd000)\n&gt;   libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00002b0ae5bff000)\n&gt;   libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00002b0ae5e1c000)\n&gt;   libXmu.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXmu.so.6 (0x00002b0ae61e5000)\n&gt;   libfontconfig.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 (0x00002b0ae63fe000)\n&gt;   libXft.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libXft.so.2 (0x00002b0ae6641000)\n&gt;   libjpeg.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libjpeg.so.8 (0x00002b0ae6856000)\n&gt;   libpng12.so.0 =&gt; /lib/x86_64-linux-gnu/libpng12.so.0 (0x00002b0ae6aaf000)\n&gt;   /lib64/ld-linux-x86-64.so.2 (0x00002b0add812000)\n&gt;   libGLU.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLU.so.1 (0x00002b0ae6cd4000)\n&gt;   libGL.so.1 =&gt; /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 (0x00002b0ae6f43000)\n&gt;   libtracktools.so =&gt; /usr/lib/afni/lib/libtracktools.so (0x00002b0ae71b7000)\n&gt;   lib3DEdge.so =&gt; /usr/lib/afni/lib/lib3DEdge.so (0x00002b0ae73e4000)\n&gt;   libsegtools.so =&gt; /usr/lib/afni/lib/libsegtools.so (0x00002b0ae75f9000)\n&gt;   libXi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXi.so.6 (0x00002b0ae780e000)\n&gt;   libXxf86vm.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1 (0x00002b0ae7a1e000)\n&gt;   libhdf5_serial_hl.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial_hl.so.10 (0x00002b0ae7c24000)\n&gt;   libhdf5_serial.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial.so.10 (0x00002b0ae7e44000)\n&gt;   libcurl-gnutls.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4 (0x00002b0ae82e1000)\n&gt;   libuuid.so.1 =&gt; /lib/x86_64-linux-gnu/libuuid.so.1 (0x00002b0ae854e000)\n&gt;   libxcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00002b0ae8753000)\n&gt;   libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00002b0ae8975000)\n&gt;   libXpm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXpm.so.4 (0x00002b0ae8b79000)\n&gt;   libglib-2.0.so.0 =&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00002b0ae8d8b000)\n&gt;   libfreetype.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libfreetype.so.6 (0x00002b0ae909c000)\n&gt;   libXrender.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 (0x00002b0ae9346000)\n&gt;   libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00002b0ae9550000)\n&gt;   libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00002b0ae98d2000)\n&gt;   libxcb-dri3.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0 (0x00002b0ae9ae8000)\n&gt;   libxcb-present.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-present.so.0 (0x00002b0ae9ceb000)\n&gt;   libxcb-sync.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1 (0x00002b0ae9eee000)\n&gt;   libxshmfence.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxshmfence.so.1 (0x00002b0aea0f5000)\n&gt;   libglapi.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglapi.so.0 (0x00002b0aea2f8000)\n&gt;   libXdamage.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXdamage.so.1 (0x00002b0aea527000)\n&gt;   libXfixes.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libXfixes.so.3 (0x00002b0aea72a000)\n&gt;   libX11-xcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1 (0x00002b0aea930000)\n&gt;   libxcb-glx.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0 (0x00002b0aeab32000)\n&gt;   libxcb-dri2.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0 (0x00002b0aead4b000)\n&gt;   libdrm.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libdrm.so.2 (0x00002b0aeaf50000)\n&gt;   libsz.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsz.so.2 (0x00002b0aeb15f000)\n&gt;   libidn.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libidn.so.11 (0x00002b0aeb362000)\n&gt;   librtmp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librtmp.so.1 (0x00002b0aeb595000)\n&gt;   libnettle.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.6 (0x00002b0aeb7b1000)\n&gt;   libgnutls.so.30 =&gt; /usr/lib/x86_64-linux-gnu/libgnutls.so.30 (0x00002b0aeb9e7000)\n&gt;   libgssapi_krb5.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00002b0aebd17000)\n&gt;   liblber-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2 (0x00002b0aebf61000)\n&gt;   libldap_r-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2 (0x00002b0aec170000)\n&gt;   libXau.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00002b0aec3c1000)\n&gt;   libXdmcp.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00002b0aec5c5000)\n&gt;   libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00002b0aec7cb000)\n&gt;   libaec.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libaec.so.0 (0x00002b0aeca3b000)\n&gt;   libhogweed.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libhogweed.so.4 (0x00002b0aecc43000)\n&gt;   libgmp.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00002b0aece76000)\n&gt;   libp11-kit.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00002b0aed0f6000)\n&gt;   libtasn1.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libtasn1.so.6 (0x00002b0aed35a000)\n&gt;   libkrb5.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00002b0aed56d000)\n&gt;   libk5crypto.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00002b0aed83f000)\n&gt;   libcom_err.so.2 =&gt; /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00002b0aeda6e000)\n&gt;   libkrb5support.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00002b0aedc72000)\n&gt;   libresolv.so.2 =&gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00002b0aede7d000)\n&gt;   libsasl2.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00002b0aee098000)\n&gt;   libgssapi.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi.so.3 (0x00002b0aee2b3000)\n&gt;   libffi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libffi.so.6 …",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314178977|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499708178.135126",
        "date": 1499708178135
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314165614|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "@chrisfilo hmm, it isn't found.\n\n• d2s\n\n```mathiasg@openmind7:~$ ldd /usr/lib/afni/bin/3dSkullStrip\n    linux-vdso.so.1 =&gt;  (0x00007fff3d3fe000)\n    libXm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXm.so.4 (0x00002b0adda3a000)\n    libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00002b0addf03000)\n    libSUMA.so =&gt; /usr/lib/afni/lib/libSUMA.so (0x00002b0ade20c000)\n    libglut.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libglut.so.3 (0x00002b0aded93000)\n    libmri.so =&gt; /usr/lib/afni/lib/libmri.so (0x00002b0adefdb000)\n    libXt.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXt.so.6 (0x00002b0adfc3c000)\n    libvolpack.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libvolpack.so.1 (0x00002b0adfea5000)\n    libnetcdf.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libnetcdf.so.11 (0x00002b0ae00eb000)\n    libf2c.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libf2c.so.2 (0x00002b0ae344e000)\n    libgiftiio.so.0 =&gt; /usr/lib/libgiftiio.so.0 (0x00002b0ae366b000)\n    libexpat.so.1 =&gt; /lib/x86_64-linux-gnu/libexpat.so.1 (0x00002b0ae388b000)\n    libniftiio.so.2 =&gt; /usr/lib/libniftiio.so.2 (0x00002b0ae3ab4000)\n    libznz.so.2 =&gt; /usr/lib/libznz.so.2 (0x00002b0ae3cd6000)\n    libz.so.1 =&gt; /lib/x86_64-linux-gnu/libz.so.1 (0x00002b0ae3eda000)\n    libnifticdf.so.2 =&gt; /usr/lib/libnifticdf.so.2 (0x00002b0ae40f4000)\n    libSM.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libSM.so.6 (0x00002b0ae4311000)\n    libICE.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libICE.so.6 (0x00002b0ae4519000)\n    libX11.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libX11.so.6 (0x00002b0ae4733000)\n    libXext.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXext.so.6 (0x00002b0ae4a6d000)\n    libXmHTML.so.1.1 =&gt; /usr/lib/x86_64-linux-gnu/libXmHTML.so.1.1 (0x00002b0ae4c7f000)\n    libgts-0.7.so.5 =&gt; /usr/lib/x86_64-linux-gnu/libgts-0.7.so.5 (0x00002b0ae4efc000)\n    libgsl.so.19 =&gt; /usr/lib/x86_64-linux-gnu/libgsl.so.19 (0x00002b0ae5159000)\n    libgslcblas.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libgslcblas.so.0 (0x00002b0ae5598000)\n    libGLw.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLw.so.1 (0x00002b0ae57d6000)\n    libgomp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libgomp.so.1 (0x00002b0ae59dd000)\n    libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00002b0ae5bff000)\n    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00002b0ae5e1c000)\n    libXmu.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXmu.so.6 (0x00002b0ae61e5000)\n    libfontconfig.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libfontconfig.so.1 (0x00002b0ae63fe000)\n    libXft.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libXft.so.2 (0x00002b0ae6641000)\n    libjpeg.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libjpeg.so.8 (0x00002b0ae6856000)\n    libpng12.so.0 =&gt; /lib/x86_64-linux-gnu/libpng12.so.0 (0x00002b0ae6aaf000)\n    /lib64/ld-linux-x86-64.so.2 (0x00002b0add812000)\n    libGLU.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libGLU.so.1 (0x00002b0ae6cd4000)\n    libGL.so.1 =&gt; /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 (0x00002b0ae6f43000)\n    libtracktools.so =&gt; /usr/lib/afni/lib/libtracktools.so (0x00002b0ae71b7000)\n    lib3DEdge.so =&gt; /usr/lib/afni/lib/lib3DEdge.so (0x00002b0ae73e4000)\n    libsegtools.so =&gt; /usr/lib/afni/lib/libsegtools.so (0x00002b0ae75f9000)\n    libXi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXi.so.6 (0x00002b0ae780e000)\n    libXxf86vm.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXxf86vm.so.1 (0x00002b0ae7a1e000)\n    libhdf5_serial_hl.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial_hl.so.10 (0x00002b0ae7c24000)\n    libhdf5_serial.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libhdf5_serial.so.10 (0x00002b0ae7e44000)\n    libcurl-gnutls.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libcurl-gnutls.so.4 (0x00002b0ae82e1000)\n    libuuid.so.1 =&gt; /lib/x86_64-linux-gnu/libuuid.so.1 (0x00002b0ae854e000)\n    libxcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb.so.1 (0x00002b0ae8753000)\n    libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00002b0ae8975000)\n    libXpm.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libXpm.so.4 (0x00002b0ae8b79000)\n    libglib-2.0.so.0 =&gt; /lib/x86_64-linux-gnu/libglib-2.0.so.0 (0x00002b0ae8d8b000)\n    libfreetype.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libfreetype.so.6 (0x00002b0ae909c000)\n    libXrender.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXrender.so.1 (0x00002b0ae9346000)\n    libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00002b0ae9550000)\n    libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00002b0ae98d2000)\n    libxcb-dri3.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri3.so.0 (0x00002b0ae9ae8000)\n    libxcb-present.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-present.so.0 (0x00002b0ae9ceb000)\n    libxcb-sync.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-sync.so.1 (0x00002b0ae9eee000)\n    libxshmfence.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libxshmfence.so.1 (0x00002b0aea0f5000)\n    libglapi.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libglapi.so.0 (0x00002b0aea2f8000)\n    libXdamage.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libXdamage.so.1 (0x00002b0aea527000)\n    libXfixes.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libXfixes.so.3 (0x00002b0aea72a000)\n    libX11-xcb.so.1 =&gt; /usr/lib/x86_64-linux-gnu/libX11-xcb.so.1 (0x00002b0aea930000)\n    libxcb-glx.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-glx.so.0 (0x00002b0aeab32000)\n    libxcb-dri2.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libxcb-dri2.so.0 (0x00002b0aead4b000)\n    libdrm.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libdrm.so.2 (0x00002b0aeaf50000)\n    libsz.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsz.so.2 (0x00002b0aeb15f000)\n    libidn.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libidn.so.11 (0x00002b0aeb362000)\n    librtmp.so.1 =&gt; /usr/lib/x86_64-linux-gnu/librtmp.so.1 (0x00002b0aeb595000)\n    libnettle.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libnettle.so.6 (0x00002b0aeb7b1000)\n    libgnutls.so.30 =&gt; /usr/lib/x86_64-linux-gnu/libgnutls.so.30 (0x00002b0aeb9e7000)\n    libgssapi_krb5.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi_krb5.so.2 (0x00002b0aebd17000)\n    liblber-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/liblber-2.4.so.2 (0x00002b0aebf61000)\n    libldap_r-2.4.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libldap_r-2.4.so.2 (0x00002b0aec170000)\n    libXau.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXau.so.6 (0x00002b0aec3c1000)\n    libXdmcp.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libXdmcp.so.6 (0x00002b0aec5c5000)\n    libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00002b0aec7cb000)\n    libaec.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libaec.so.0 (0x00002b0aeca3b000)\n    libhogweed.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libhogweed.so.4 (0x00002b0aecc43000)\n    libgmp.so.10 =&gt; /usr/lib/x86_64-linux-gnu/libgmp.so.10 (0x00002b0aece76000)\n    libp11-kit.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libp11-kit.so.0 (0x00002b0aed0f6000)\n    libtasn1.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libtasn1.so.6 (0x00002b0aed35a000)\n    libkrb5.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.3 (0x00002b0aed56d000)\n    libk5crypto.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libk5crypto.so.3 (0x00002b0aed83f000)\n    libcom_err.so.2 =&gt; /lib/x86_64-linux-gnu/libcom_err.so.2 (0x00002b0aeda6e000)\n    libkrb5support.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5support.so.0 (0x00002b0aedc72000)\n    libresolv.so.2 =&gt; /lib/x86_64-linux-gnu/libresolv.so.2 (0x00002b0aede7d000)\n    libsasl2.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libsasl2.so.2 (0x00002b0aee098000)\n    libgssapi.so.3 =&gt; /usr/lib/x86_64-linux-gnu/libgssapi.so.3 (0x00002b0aee2b3000)\n    libffi.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libffi.so.6 (0x00002b0aee4f4000)\n    libkeyutils.so.1 =&gt; /lib/x86_64-linux-gnu/libkeyutils.so.1 (0x00002b0aee6fc000)\n    libheimntlm.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libheimntlm.so.0 (0x00002b0aee900000)\n    libkrb5.so.26 =&gt; /usr/lib/x86_64-linux-gnu/libkrb5.so.26 (0x00002b0aeeb09000)\n    libasn1.so.8 =&gt; /usr/lib/x86_64-linux-gnu/libasn1.so.8 (0x00002b0aeed93000)\n    libhcrypto.so.4 =&gt; /usr/lib/x86_64-linux-gnu/libhcrypto.so.4 (0x00002b0aef035000)\n    libroken.so.18 =&gt; /usr/lib/x86_64-linux-gnu/libroken.so.18 (0x00002b0aef268000)\n    libwind.so.0 =&gt; /usr/lib/x8…",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314165614|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499705288.549246",
        "date": 1499705288549
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314152983|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "So maybe the missing symlink was not causing your original problem. The permissions of the relevant files seem to be correct. Could you show the outputs of `ldd` run on the `3dSkullStrip` binary for the two images?",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314152983|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499702687.115905",
        "date": 1499702687115
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314151388|#795: Missing symlink in container image created using `singularity pull`>",
                "image_url": "https://pastebin.com/i/facebook.png",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 19206,
                "text": "*docker2singularity*\n\n```mathiasg@openmind7:~$ ls -l /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1\nlrwxrwxrwx 1 root root 14 Jan 26 00:17 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 -&gt; libGL.so.1.2.0\nmathiasg@openmind7:~$ ls -l /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1.2.0 \n-rw-r--r-- 1 root root 471680 Jan 26 00:17 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1.2.0\nmathiasg@openmind7:~$ $LD_LIBRARY_PATH \nbash: /usr/lib/fsl/5.0:: No such file or directory\n```\n• <https://pastebin.com/MyMpUAMP|full environment>\n\n*singularity pull*\n\n```Singularity mriqc:latest:~&gt; ls -l /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1\nlrwxrwxrwx 1 mathiasg gablab 14 Jan 26 00:17 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 -&gt; libGL.so.1.2.0\nSingularity mriqc:latest:~&gt; ls -l /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1.2.0 \n-rw-r--r-- 1 mathiasg gablab 471680 Jan 26 00:17 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1.2.0\nSingularity mriqc:latest:~&gt; $LD_LIBRARY_PATH \nbash: /usr/lib/fsl/5.0::/.singularity.d/libs: No such file or directory\n```\n• <https://pastebin.com/fA3ZNtpr|full environment>",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314151388|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            },
            {
                "fallback": "Pastebin: singularity pull - Pastebin.com",
                "image_url": "https://pastebin.com/i/facebook.png",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 19206,
                "service_name": "Pastebin",
                "title": "singularity pull - Pastebin.com",
                "id": 2,
                "title_link": "https://pastebin.com/fA3ZNtpr",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499702364.912254",
        "date": 1499702364912
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314143933|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "Does the symlink resolve to the right file? Are all the env variables (LD_LIBRARY_PATH for example) present?",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314143933|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499700918.030502",
        "date": 1499700918030
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314140677|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "However, still running into the same error when actually running the pipeline\n\n```RuntimeError: Command:\n3dSkullStrip -input /mnt/workdir/mathias/qa_workdir2/workflow_enumerator/anatMRIQCT2w/AFNISkullStripWorkflow/_in_file_..mnt..data..sub-BANDA002..anat..sub-BANDA002_T2w.nii.gz/skullstrip/sub-BANDA002_T2w_conformed_corrected.nii.gz -prefix sub-BANDA002_T2w_conformed_corrected_skullstrip.nii.gz\nStandard output:\n3dSkullStrip: error while loading shared libraries: libGL.so.1: cannot open shared object file: No such file or directory\n```\n\nfor the record, this is command that is being called\n```singularity exec -B $base:/mnt docker://poldracklab/mriqc:latest mriqc --participant_label $subj --verbose-reports --n_procs 10 --mem_gb 10 -w $WORKDIR $DATADIR $OUTDIR participant\n```",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314140677|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499700303.641141",
        "date": 1499700303641
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314129994|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "@gmkurtzer after trying with `2.3.1`, the symlink is present using your command",
                "pretext": "[singularityware/singularity] New comment by mgxd on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-314129994|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499698267.357553",
        "date": 1499698267357
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#798 Dir in OverlayFS from Layer only 1MB' https://github.com/singularityware/singularity/issues/798 by ax3l",
                "text": "*Version of Singularity:*\n\n2.3.1-dist on Debian testing (buster/sid)\n\n*Expected behavior*\n\nDirectories created from a layer (`%post` script or imported docker layer) should have a large OverlayFS when run.\n\n*Actual behavior*\n\nFor directories created during the bootstrap of a singularity image, only 1MB OverlayFS will be available for modifications at runtime.\n\nThis is sub-ideal if I want to run JIT-ed projects or frameworks on which at runtime the users compile additional software.\n\nI also might just be using Singularity wrongly, in that case: is there a way to mount/bind an empty `tmpfs` from the host to the container path below when the container is started (`run`)?\n\n*Steps to reproduce behavior*\n\n*Singularity file*\n```\nBootstrap: docker\nFrom: ubuntu:16.04\n\n%post\nmkdir /home/something\nfind /home/something -type d -exec chmod a+rwx {} \\;\n\n%runscript\nexec /bin/bash -c 'cd /home/something &amp;&amp; /bin/bash -l'\n```\n\nThen execute:\n```singularity create ubuntu.img\nsudo singularity bootstrap ubuntu.img Singularity\nsingularity run ubuntu.img\n```\n\nAnd inside the container:\n```bash\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nOverlayFS       1.0M     0  1.0M   0% /\n[...]\n\n$ dd if=/dev/zero bs=1M count=1024 of=aa \ndd: error writing 'aa': No space left on device\n2+0 records in\n1+0 records out\n1048576 bytes (1.0 MB, 1.0 MiB) copied, 0.00141735 s, 740 MB/s\n\n$ df -h\nFilesystem      Size  Used Avail Use% Mounted on\nOverlayFS       1.0M  1.0M     0 100% /\n/dev/sda3       854G   34G  812G   4% /tmp\nudev            3.9G     0  3.9G   0% /dev\ntmpfs           3.9G     0  3.9G   0% /dev/shm\ntmpfs            16M  8.0K   16M   1% /etc/group\ntmpfs           799M  9.4M  790M   2% /etc/resolv.conf\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ax3l|ax3l>",
                "title": "#798 Dir in OverlayFS from Layer only 1MB",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/798",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499679492.756879",
        "date": 1499679492756
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-313999013|#784: A patch for slurm plugin build (master)>",
                "text": "I have some more time allocated this week to test it further. There is a sequence of several calls from the old API that needs to be remapped to the sequence of the new API. The current version is basically a sequence from the sexec.c prior to version of 2.3 that needs to be changed to reflect the current API. ",
                "pretext": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-313999013|#784: A patch for slurm plugin build (master)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499660879.215536",
        "date": 1499660879215
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/792#issuecomment-313990833|#792: Mounting an image is failed>",
                "text": "you are right，according to the  link is <http://singularity.lbl.gov/image-content>， i have a question，\nhow should  i change the default mount directory ?",
                "pretext": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/792#issuecomment-313990833|#792: Mounting an image is failed>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499655975.563872",
        "date": 1499655975563
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-313978690|#790: Update installation procedure to use 2.3.1>",
                "text": "Looks good to me. I would click \"update branch\" first @gmkurtzer to make sure some new change didn't break this PR (I think since it's install docs it is unlikely). +1 from me!",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-313978690|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499649166.613027",
        "date": 1499649166613
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-313978006|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "text": "Is this not customizable based on `SINGULARITY_CACHEDIR` ? Do you mean the root of the image itself, or the docker layers?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-313978006|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499648584.543578",
        "date": 1499648584543
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/792#issuecomment-313951803|#792: Mounting an image is failed>",
                "text": "Can you please check your version of Singularity, that is not the output of 2.3.1 and the options have changed. This is what you should see:\n\n```\n$ singularity --version\n2.3.1-master.gd7dcaf5\ngmk@gmkdev2:~$ singularity mount container.img /tmp/container/\nERROR  : Exec failed: /tmp/container/: Permission denied\nABORT  : Retval = 255\ngmk@gmkdev2:~$ singularity mount container.img\ncontainer.img is mounted at: /usr/local/var/singularity/mnt/container\n\nSingularity&gt; ls -l /usr/local/var/singularity/mnt/container\ntotal 92\n...\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/792#issuecomment-313951803|#792: Mounting an image is failed>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499631470.086754",
        "date": 1499631470086
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-313951546|#795: Missing symlink in container image created using `singularity pull`>",
                "text": "This seems to be working for me:\n```$ singularity exec docker://poldracklab/mriqc:0.9.6 ls -l /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1\nDocker image path: index.docker.io/poldracklab/mriqc:0.9.6\nCache folder set to /home/gmk/.singularity/docker\nCreating container runtime...\nlrwxrwxrwx 1 gmk gmk 14 Jan 26 00:17 /usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 -&gt; libGL.so.1.2.0\n```\n\nWhat is the current status?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/795#issuecomment-313951546|#795: Missing symlink in container image created using `singularity pull`>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499631193.065599",
        "date": 1499631193065
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-313951518|#784: A patch for slurm plugin build (master)>",
                "text": "I haven't looked at this yet, but I would be surprised if it works properly but I'm also surprised it is building properly given the API changes that have occurred. Are there any updates on the testing?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-313951518|#784: A patch for slurm plugin build (master)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499631162.063231",
        "date": 1499631162063
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-313951234|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "text": "This may not be something you want on a network scratch share, so things may break. Additionally, this will require a lot of small file IO which may not be good for a scratch file system.\n\nI would recommend to import from docker and put into a Singularity image instead. That is more optimal for shared file systems and a better utilization of resources.\n\nWith that said, I'm not disagreeing with your request. It can/should be supported.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/791#issuecomment-313951234|#791: Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499630843.039075",
        "date": 1499630843039
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-313948797|#779: Import command order>",
                "text": "@remyd1, a warning or error should be possible assuming that it can be caught. Can you give an example CLI mock up of what you are thinking?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-313948797|#779: Import command order>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499628154.829441",
        "date": 1499628154829
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-313948413|#757: Too many levels of symbolic links>",
                "text": "This is a shot in the dark, but by any chance, does changing `mount slave = yes` to \"no\" have any effect?\n\nI'm sorry I can't be of more help, I haven't used the automounter for over 15 years! lol\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-313948413|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499628065.822439",
        "date": 1499628065822
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-313945343|#727: home mount erase /usr/ in container>",
                "text": "Hi @mschnepf,\n\nI'm not sure I follow exactly what you are getting at, but for the current implementation of the home mount Singularity module, this is expected. I do think that it could use some optimization such that this gets handled smarter and I'll add that to the next big milestone.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-313945343|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499627480.777276",
        "date": 1499627480777
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-313942098|#790: Update installation procedure to use 2.3.1>",
                "text": "This looks good to me. Are we ready to merge?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-313942098|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499626919.733595",
        "date": 1499626919733
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313939989|#789: Infrastructure for Security (and other) Checks>",
                "text": "Apologies, I forgot to mention that the mountpoint argument to `.../libexec/singularity/bin/mount(-suid)` is not longer used. That is why `SINGULARITY_MOUNTPOINT` is defined, and it must be used as that is where the file system will be mounted.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313939989|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499626549.703275",
        "date": 1499626549703
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/796|#796 Docker/manifest message fix> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/796|#796 Docker/manifest message fix> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499475745.206757",
        "date": 1499475745206
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/796#issuecomment-313823592|#796: Docker/manifest message fix>",
                "text": "This looks good to me, merging. Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/796#issuecomment-313823592|#796: Docker/manifest message fix>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499475738.205901",
        "date": 1499475738205
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313764645|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "If you have time top hop on the slack channel so I can pick your mind about this a bit, that would be useful :)",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313764645|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499453659.771551",
        "date": 1499453659771
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313764361|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "@bbockelm I parsed through the do/while yesterday and think I've wrapped my head around it now. I would like singularity_fork to behave identically to fork(). My plan to accomplish this is still maintain the workflow that you've written in, however I would like to move the idea of the do/while loop out to singularity_fork_run() [That way fork will return for the child and the parent at the same time]. I plan to still set up the signal handling within singularity_fork(), however what one does with that information will become the responsibility of the function that calls singularity_fork(). In the case of singularity_fork_run(), it will still ensure that your a) and b) points are upheld, however other invocations of singularity_fork() might want different behavior for the parent (perhaps the parent will just exit).",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313764361|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499453582.733889",
        "date": 1499453582733
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313763542|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "For the question about the `do`/`while` loop: indeed, the idea is to make sure:\na) Parent and child exit at the same time.\nb) Make sure signals sent to the child are propagated to the parent and vice-versa.",
                "pretext": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313763542|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499453362.626454",
        "date": 1499453362626
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313763272|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "That would work!\n\nWell, mostly.  The danger here is that glibc will arrange an explicit guard page to protect against things like the Stack Clash family of bugs -- this does not!\n\nThat said, even the glibc safeguards are surmountable.  We should probably review all the user inputs and do things like reject invocations where `argv` is larger than 1MB and try to avoid use of things like `alloca`.",
                "pretext": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313763272|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499453295.594308",
        "date": 1499453295594
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313762620|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "@bbockelm About the stack size, does something like this seem appropriate? Basically I just grab the stack limit and we go from there. That way we don't ever need to worry about it.\n\n```\n struct rlimit stack_limit;\n\n  if ( -1 == getrlimit(RLIMIT_STACK, &amp;stack_limit) ) {\n      singularity_message(ERROR, \"Unable to get current stack limit: %d\\n\", strerror(errno));\n      ABORT(255);\n  }\n\n int stack_size = stack_limit.rlim_cur;\n```",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313762620|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499453131.514184",
        "date": 1499453131514
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313736620|#785: Fix --nv option>",
                "text": "Adding a fix for nested loops by @GodloveD - it was originally committed against a wrong branch in my fork.",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313736620|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499446635.251802",
        "date": 1499446635251
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313720305|#789: Infrastructure for Security (and other) Checks>",
                "text": "I just added the bits to actually run the scripts, and report back based on the return value (just like stest but not with exit on fail) so now it's like:\n\n```vanessa@vanessa-ThinkPad-T450s:~/Desktop/test/singularity$ singularity check --high ubuntu.img\nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] \nvanessa@vanessa-ThinkPad-T450s:~/Desktop/test/singularity$ singularity check -m ubuntu.img\nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] \nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/2-hello-world.sh tags[security] level[MED] \nvanessa@vanessa-ThinkPad-T450s:~/Desktop/test/singularity$ singularity check -l ubuntu.img\nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] \nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/2-hello-world.sh tags[security] level[MED] \nPASS: (retval=0)/usr/local/libexec/singularity/helpers/checks/3-hello-world.sh tags[security] level[LOW]\n```\nwhat we could now do is have an environment variable that, if set, will try to fix the security issue (rather than just saying PASS or FAIL). I also think instead of directing output to tmp, the message on fail should be clearly shown.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313720305|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499442683.225440",
        "date": 1499442683225
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313657179|#789: Infrastructure for Security (and other) Checks>",
                "text": "@gmkurtzer I chose mountpoint instead of ROOTFS because, as is currently implemented, it mimics the action of a mount (and then runs checks over that mounted base). It would support bootstrap because, like in inspect, I set one variable to point to the other.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313657179|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499427023.030025",
        "date": 1499427023030
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313655879|#777: SLES11 failure due to PID namespace support>",
                "text": "@bbockelm It is indeed planned and in fact we already have a few pilot projects using it succesfully. Once this issue gets worked out we should be able to release the documentation and make it available for general use.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313655879|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499426575.908690",
        "date": 1499426575908
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/797|#797 singularity import Error> by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/797|#797 singularity import Error> by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499418345.368081",
        "date": 1499418345368
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313628704|#797: singularity import Error>",
                "text": "if that works, please close the issue :P",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313628704|#797: singularity import Error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499418286.347437",
        "date": 1499418286347
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313627700|#797: singularity import Error>",
                "text": "thank you very much",
                "pretext": "[singularityware/singularity] New comment by yangyang-zhang on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313627700|#797: singularity import Error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499418021.253251",
        "date": 1499418021253
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313626007|#797: singularity import Error>",
                "text": "```\n$ singularity import --help\nUSAGE: singularity [...] import &lt;container path&gt; [import from URI]\n\nImport takes a URI and will populate a container with the contents of\nthe URI. If no URI is given, import will expect an incoming tar pipe.\n\nThe size of the container you need to create to import a complete system\nmay be significantly larger than the size of the tar file/stream due to\noverheads of the container filesystem.\n\nSUPPORTED URIs:\n```docker:     Pull an image from the Docker repository```\nEXAMPLES:\n```Once you have created the base image template:\n\n$ singularity create /tmp/Debian.img\n\nYou can then import:\n\n$ gunzip -c debian.tar.gz | singularity import /tmp/Debian.img\n$ singularity import /tmp/Debian.img docker://ubuntu:latest```\nFor additional help, please visit our public documentation pages which are\nfound at:\n```http://singularity.lbl.gov/```\n```\n\nso, can you try:\n```cat caffe.tar| singularity import caffe.img\n```",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/797#issuecomment-313626007|#797: singularity import Error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499417550.084536",
        "date": 1499417550084
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#797  singularity import Error' https://github.com/singularityware/singularity/issues/797 by yangyang-zhang",
                "text": "*Version of Singularity:*\n\n2.3.1-dist\n\n*Expected behavior*\n\ncreate caffe.img can be used\n\n*Actual behavior*\n\ncaffe.tar is docker exported images,\nwhen running:\n singularity import caffe.img  caffe.tar\n\nNothing happend !",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "title": "#797  singularity import Error",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/797",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499416763.806554",
        "date": 1499416763806
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313569914|#777: SLES11 failure due to PID namespace support>",
                "text": "@AdamSimpson - is support for Titan planned?  I might know some users who would be interested in giving it a whirl...",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313569914|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499394223.332698",
        "date": 1499394223332
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313559400|#789: Infrastructure for Security (and other) Checks>",
                "text": "This looks fantastic! \n\nregarding your question, `SINGULARITY_MOUNTPOINT` is defined statically within `src/mount.c` as follows:\n```envar_set(\"SINGULARITY_MOUNTPOINT\", singularity_runtime_rootfs(NULL), 1);\n```\nCan we use another variable name like `SINGULARITY_ROOTFS`?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313559400|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499389426.453237",
        "date": 1499389426453
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/788|#788 Clearer error message when download shub image that isn't ready> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/788|#788 Clearer error message when download shub image that isn't ready> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499387402.056139",
        "date": 1499387402056
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/788#issuecomment-313555081|#788: Clearer error message when download shub image that isn't ready>",
                "text": "Indeed, and looks great. Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/788#issuecomment-313555081|#788: Clearer error message when download shub image that isn't ready>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499387399.055421",
        "date": 1499387399055
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313533327|#785: Fix --nv option>",
                "text": "@3XX0 Oh, that sounds perfect. Let us know when it is ready and released, and we will update this static structure to use the output of that command instead.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313533327|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499379065.919258",
        "date": 1499379065919
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313519253|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "@bbockelm Yes that is exactly what we discussed. We are going to remove the use of `fork()` and replace it with your `fork_ns()` implementation. Greg and I had a question about the current implementation of `singularity_fork()`: is `singularity_fork()` designed to exactly mimic the behavior of the `fork()` system call? Greg was under the impression that it was supposed to, but looking at the implementation it doesn't seem to be doing that as is. Moreover, what exactly is going on in the`do while` loop inside of `singularity_fork()`? It seems that it hangs in this section of code until the child thread exits, why is that? Sorry for all these questions, I'm trying to wrap my head entirely around what's going on there! Thanks!!",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313519253|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499375150.358373",
        "date": 1499375150358
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313518292|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "There seems to be a lot of copy/pasting in the `singularity_fork_run_ns` -- could that be refactored out (or is that what you meant by the last comment?)?\n\nOther than that, I think the approach looks correct.  Note that there's a relatively small stack size here (32KB).  That's mostly just appropriate for doing a quick `fork`/`exec`: should we bump it up?",
                "pretext": "[singularityware/singularity] New comment by bbockelm on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313518292|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499374908.244129",
        "date": 1499374908244
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#796 Docker/manifest message fix' https://github.com/singularityware/singularity/pull/796 by vsoch",
                "text": "*Description of the Pull Request (PR):*\n\nCurrently, when the user gives a weird and non existing image, the manifest returns with an error message, but until it is used, it is silent. As a result, when the user then tries to pull images (eg with error #794) the message indicates that the manifest is malformed. It is, but we shouldn't have gotten to this point in the first place. To address this, I've added a general function to check the return call of the docker api, and we will exit cleanly with an informative message before getting to the point of issue:\n\n```singularity pull docker://vanessa/aksfjsfjkjf\nERROR UNAUTHORIZED: authentication required\nERROR Check image existence, capitalization, and permissions.\n```\nWe might need to tweak some tests, we will see :)\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#796 Docker/manifest message fix",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/796",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499365802.682793",
        "date": 1499365802682
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313479662|#785: Fix --nv option>",
                "text": "Yes we have an utility called `nvidia-container-cli`, I can add an option `list` to output the list of components to be mounted. It will have to be installed separately (we are working on packaging right now) but eventually it will be shipped alongside the driver.",
                "pretext": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313479662|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499365553.544062",
        "date": 1499365553544
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ax3l on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313477506|#794: Bootstrap: Mistyped Image Error Message>",
                "text": "yes sounds great!",
                "pretext": "[singularityware/singularity] New comment by ax3l on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313477506|#794: Bootstrap: Mistyped Image Error Message>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499365083.289820",
        "date": 1499365083289
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313477063|#794: Bootstrap: Mistyped Image Error Message>",
                "text": "ok so it looks like the root of the error (when it first triggers) is obtaining the manifest: docker reports the non existing image as needing authentication:\n\n```DEBUG Headers found: Content-Type,Authorization,Accept\nDEBUG Http Error with code 401\nERROR UNAUTHORIZED: authentication required\n```\nWhat I can do is add a message to the user to check the name of the image, because it could also be confusing to just say it's unauthorized. Would that be reasonable?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313477063|#794: Bootstrap: Mistyped Image Error Message>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499364973.229754",
        "date": 1499364973229
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/788#issuecomment-313472444|#788: Clearer error message when download shub image that isn't ready>",
                "text": "@gmkurtzer this is a simple PR that should be ready for merge.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/788#issuecomment-313472444|#788: Clearer error message when download shub image that isn't ready>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499363906.636365",
        "date": 1499363906636
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313466695|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "Nice, thanks for merging!",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313466695|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499362646.935710",
        "date": 1499362646935
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#795 Missing symlink in container image created using `singularity pull`' https://github.com/singularityware/singularity/issues/795 by chrisfilo",
                "text": "Originally reported in <https://github.com/poldracklab/mriqc/issues/567> by @mgxd\n\n*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nAfter doing `singularity pull` or `singularity exec` on `docker://poldracklab/mriqc:0.9.6` the symlink \n\n`/usr/lib/x86_64-linux-gnu/mesa/libGL.so.1 -&gt; libGL.so.1.2.0`\n\nshould be present in the container image (as it is in the original Docker container image as well as Singularity container image created using docker2singularity)\n\n*Actual behavior*\n\nThe symlink is missing.\n\n*Steps to reproduce behavior*\n\n`singularity pull` or `singularity exec` on `docker://poldracklab/mriqc:0.9.6` (please not you might need to manually specify image size of &gt;14Gb when doing `singularity pull`).",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisfilo|chrisfilo>",
                "title": "#795 Missing symlink in container image created using `singularity pull`",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/795",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499361292.201079",
        "date": 1499361292201
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> The branch \"test\" was deleted by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> The branch \"test\" was deleted by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360931.010772",
        "date": 1499360931010
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> The branch \"fmount\" was deleted by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> The branch \"fmount\" was deleted by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360928.009234",
        "date": 1499360928009
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> The branch \"test1\" was deleted by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> The branch \"test1\" was deleted by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360925.007562",
        "date": 1499360925007
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/test1|test1>\" was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/test1|test1>\" was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360851.968536",
        "date": 1499360851968
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/fmount|fmount>\" was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/fmount|fmount>\" was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360850.968430",
        "date": 1499360850968
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/2.x|2.x>\" was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/2.x|2.x>\" was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360848.967345",
        "date": 1499360848967
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/test|test>\" was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/test|test>\" was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360846.966203",
        "date": 1499360846966
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313458348|#611: Nvidia GPU support with different driver versions?>",
                "text": "Nope, at the moment it is only in development branch. I can include it into master which will ensure it gets into the next release.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313458348|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360758.918367",
        "date": 1499360758918
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313455120|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "text": "Based on a conversation that @bauerm97 and I had yesterday, we are going to move things around a bit more, but will have the same (but cleaner) effect.\n\n@bbockelm I'm mentioning you here as I'd like to have your input on this as it develops.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/793#issuecomment-313455120|#793: Use clone as fallback when unshare fails with CLONE_NEWPID>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499360027.518619",
        "date": 1499360027518
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313454658|#777: SLES11 failure due to PID namespace support>",
                "text": "Excellent work everyone!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313454658|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499359924.461898",
        "date": 1499359924461
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/775|#775 Honor $TMPDIR instead of hardcoding /tmp> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/775|#775 Honor $TMPDIR instead of hardcoding /tmp> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499359862.428432",
        "date": 1499359862428
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313454367|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "This looks great to me, merging into development branch. Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313454367|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499359859.426859",
        "date": 1499359859426
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313454027|#794: Bootstrap: Mistyped Image Error Message>",
                "text": "oh haha, /bonk yes I understand :) I agree we should have a different error message if the image doesn't exist, versus an (actual) properly formatted manifest. I'll put in a fix to this later today!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313454027|#794: Bootstrap: Mistyped Image Error Message>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499359784.386297",
        "date": 1499359784386
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313453597|#785: Fix --nv option>",
                "text": "Aside from the minor change I mentioned, this looks great to me.\n\n@3XX0 I'd like to hear more about the libnvidia-container CLI option you are thinking of. Would it return a list of nvidia libraries that should be included in the container? If so, that would be a fantastic addition and we can easily check for libnvidia-container, and use it if it is installed.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313453597|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499359698.340672",
        "date": 1499359698340
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ax3l on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313448845|#794: Bootstrap: Mistyped Image Error Message>",
                "text": "@vsoch sorry, can't link an image since this issue is about the error message that singularity creates if _no image_ is found for an _existing_ dockerhub user :)\n\nif a user did a typo like this, singularity does not say \"image not found\" but the confusing message above :)\n\nJust type this into a bash:\n```bash\nsingularity create myImage.img\n\necho \"Bootstrap: docker\nFrom: ax3l/typoseverywhereaaahhhaaands\" &gt; Singularity\n\nsudo singularity bootstrap myImage.img Singularity \n```\n\n(`typoseverywhereaaahhhaaands` is the _non-existing_ docker image and `ax3l` is the _existing_ dockerhub user)",
                "pretext": "[singularityware/singularity] New comment by ax3l on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313448845|#794: Bootstrap: Mistyped Image Error Message>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499358633.768247",
        "date": 1499358633768
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-313432550|#693: Registry authentication with .docker/config>",
                "text": "Are you trying  to get images from a docker registry hosted via gitlab?  it looks like there is some extra headers and authentication potentially required: <http://docs.gitlab.com/ce/user/project/container_registry.html>  if you could give me more details, and possibly some and points with different levels of permission to test development, I can see if I can resolve the issue with our current infrastructure or add some  customization for Gitlab registries.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-313432550|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499355246.777872",
        "date": 1499355246777
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-313429045|#693: Registry authentication with .docker/config>",
                "text": "Hey,\n\nI am having quite same issues here and I do also advocate for a user environnement approach or a ```--token``` approach.\n\nOur use case is that: \n• we have a registry hosted with gitlab\n• we have a web app with a user profile and some programs configurations\n• we want to host some mechanists models for agronomy or neuroscience on the registry\n• trigger these models on an HPC system for simulation or quantitative analysis\n\nWith the current approach it will ask me to ask and send plain user and password which I don't really like and having a token in environment variable would be more reliable for me.\n\nWe don't need to have a .docker/config.json on the HPC since we tested it (docker) and do not want users inside the ```docker``` group for ```docker login``` for example because of security reasons or because ```docker```is too messy with our ```/tmp``` configuration.\n\nIf I can be of any help (dev. or test) please tell me, it would be a pleasure :)",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-313429045|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499354549.343514",
        "date": 1499354549343
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313404685|#794: Bootstrap: Mistyped Image Error Message>",
                "text": "could you show me a link to the image on docker hub?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/794#issuecomment-313404685|#794: Bootstrap: Mistyped Image Error Message>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499349652.347239",
        "date": 1499349652347
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313398590|#785: Fix --nv option>",
                "text": "Adding changes by @GodloveD. \n\"I've broken the nvidia libs out into a config file that can be changed by an admin. This way if there is something non-standard about the driver that is running on a particular system the admin can tailor the libs to their system.\"",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313398590|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499348330.602298",
        "date": 1499348330602
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/774|#774 Import Complete set of NVidia libraries with --nv> by <https://github.com/mrmhodak|mrmhodak>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/774|#774 Import Complete set of NVidia libraries with --nv> by <https://github.com/mrmhodak|mrmhodak>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499348051.454884",
        "date": 1499348051454
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#794 Bootstrap: Mistyped Image Error Message' https://github.com/singularityware/singularity/issues/794 by ax3l",
                "text": "Hi there,\n\nI just got stuck on an unclear error message while bootstrapping a singularity image from a dockerhub image.\n\n*Version of Singularity:*\n\n$ singularity --version\n2.3.1-dist\n\non Debian testing\n\n*Expected behavior*\n\nBootstrap from a non-existing docker image of an existing dockerhub account:\n```Bootstrap: docker\nFrom: ax3l/typoseverywhereaaahhhaaands\n```\n\nshould fail with a clear error message that the base docker image does not exist.\n\n*Actual behavior*\n\nWhen bootstraping a singularity image from docker(hub) and mistyping the image name, the error should be more precise then throwing\n\n```ERROR Improperly formed manifest, layers or fsLayers must be present\n```\n\n(<https://github.com/singularityware/singularity/blob/master/libexec/python/docker/api.py|origin source code>)\n\n*Steps to reproduce behavior*\n\n```bash\n$ singularity create myImage.img\n\n$ sudo singularity bootstrap myImage.img tmpSing \nSanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nDocker image path: index.docker.io/ax3l/typoseverywhereaaahhhaaands:latest\nERROR Improperly formed manifest, layers or fsLayers must be present\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ax3l|ax3l>",
                "title": "#794 Bootstrap: Mistyped Image Error Message",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/794",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499333125.261107",
        "date": 1499333125261
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313307930|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "I fixed the typos - sorry about that.",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-313307930|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499322550.944980",
        "date": 1499322550944
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313282322|#785: Fix --nv option>",
                "text": "Difficult to say, it's pretty random and things get revamped all the time. This is why we have the library, to abstract these things away. Also, there are not only libraries but also binaries, IPCs, ICD loaders etc.",
                "pretext": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313282322|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499310020.926392",
        "date": 1499310020926
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313269226|#785: Fix --nv option>",
                "text": "@flx42 @3XX0 can either of you tell me how much these libs have changed in different releases of the driver?  Do they tend to be pretty stable or are new libraries introduced from time to time?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313269226|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499304050.853329",
        "date": 1499304050853
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313267842|#785: Fix --nv option>",
                "text": "There are a lot of things that could wrong here. I suggest you leverage libnvidia-container for this. In fact, I will probably add an option to our CLI to do exactly that.",
                "pretext": "[singularityware/singularity] New comment by 3XX0 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313267842|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499303395.728716",
        "date": 1499303395728
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313265419|#785: Fix --nv option>",
                "text": "You might not need all these libraries, you should take a look at the README file shipped with our drivers, for instance at `/usr/share/doc/nvidia-375/README.txt.gz`, chapter 5 \"Listing of Installed Components\".",
                "pretext": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313265419|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499302287.513474",
        "date": 1499302287513
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313262681|#785: Fix --nv option>",
                "text": "I spoke with @gmkurtzer offline and I think that we are going to try to create a configuration file that contains all of the libs that should be bound by the `--nv` option.  That way we can update it easily when an new driver is released or an admin can customize it to suit their needs.  I just looked in a fairly recent driver .run file (375.66) and these are the libs that I believe need to be bound.  Can you verify (or not) with whatever driver version you are running @mrmhodak ?\n```libcuda.so\nlibEGL_installertest.so\nlibEGL_nvidia.so\nlibEGL.so\nlibGLdispatch.so\nlibGLESv1_CM_nvidia.so\nlibGLESv1_CM.so\nlibGLESv2_nvidia.so\nlibGLESv2.so\nlibGL.so\nlibGLX_installertest.so\nlibGLX_nvidia.so\nlibglx.so\nlibGLX.so\nlibnvcuvid.so\nlibnvidia-cfg.so\nlibnvidia-compiler.so\nlibnvidia-eglcore.so\nlibnvidia-egl-wayland.so\nlibnvidia-encode.so\nlibnvidia-fatbinaryloader.so\nlibnvidia-fbc.so\nlibnvidia-glcore.so\nlibnvidia-glsi.so\nlibnvidia-gtk2.so\nlibnvidia-gtk3.so\nlibnvidia-ifr.so\nlibnvidia-ml.so\nlibnvidia-opencl.so\nlibnvidia-ptxjitcompiler.so\nlibnvidia-tls.so\nlibnvidia-wfb.so\nlibOpenGL.so\n```",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-313262681|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499300983.258732",
        "date": 1499300983258
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313256897|#765: Legacy Testing for 2.2>",
                "text": "Exactly!  What I'm doing now is taking an image built using N and testing it in N-1.  Which is not right.  And if we just create some standard containers using legacy builders on the shub we can pull them and use them for testing.  It also means we can get rid of that ugly-ness in the .travis.yml where I install an older version of Singularity.  Win win!  I'll get working on it.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313256897|#765: Legacy Testing for 2.2>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499298500.719493",
        "date": 1499298500719
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313255093|#765: Legacy Testing for 2.2>",
                "text": "I think we want to assure users that if they create an image with version N, it works for new releases N+1, and I think that's backwards compatibility (new software is backwards compatible because it doesn't break old images). What we can't guarantee is that if we create some new feature for version 2.9, that feature will be available for an image created with 2.1. But installing 2.9 won't break being able to use 2.1.\n\nSo given this, I don't think we can have every version of singularity software tested against every version image (that wouldn't work and it would take a looong time once we have many versions.) I think what we *do* want is a simple folder that has an image representative (built by) each version. The tests would need to be run with updates / new versions against all those images. \n\nWe would expect there to be some cases when new features aren't supported for older images. We still want to test those cases because the software should fail gracefully (like \"255 this feature is not supported for this image.\"  A good example is with inspect - for some images they don't have the labels, so we just exit with a reasonable error.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313255093|#765: Legacy Testing for 2.2>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499297768.553877",
        "date": 1499297768553
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313247582|#765: Legacy Testing for 2.2>",
                "text": "@vsoch Actually I just went back and had another look at this and I'm confused.  It looks like I actually (mistakenly?) installed 2.2 and used that for legacy testing when I first wrote these tests?\n  I think I did this because at the time 2.2 was latest stable and we were working on development. \n Maybe I actually need to add 2.3 to the tests so that development branch is doing legacy testing. \n\nAlso, it looks like I'm doing all of this backward.  I'm testing images that were made in the latest Singularity running in older versions of Singularity.  That's not guaranteed to work right?  Shouldn't we be testing images created in older versions of Singularity against newer Singularity runtimes?  That's the direction that backward compatibility should be expected right?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-313247582|#765: Legacy Testing for 2.2>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499294827.810689",
        "date": 1499294827810
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#793 Use clone as fallback when unshare fails with CLONE_NEWPID' https://github.com/singularityware/singularity/pull/793 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\n\nOn some kernel versions, the CLONE_NEWPID flag is available only for `clone` rather than for both `clone` and `unshare`. On these systems, a call to `unshare(CLONE_NEWPID)` causes a runtime failure. This is especially problematic for systems that do not support `PR_SET_NO_NEW_PRIVS`, since those systems must run containers inside of a PID NS (security concerns), and will otherwise fail completely. This PR catches this failure at runtime and falls back to using the `clone` system call when necessary. \n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #777 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#793 Use clone as fallback when unshare fails with CLONE_NEWPID",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/793",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499292969.276474",
        "date": 1499292969276
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313215703|#777: SLES11 failure due to PID namespace support>",
                "text": "@bauerm97 It appears to work! When I enable debug I see the following is printed so I believe it's following the intended code path:\n\n```DEBUG   [U=5059,P=1]       singularity_registry_get()                Returning value from registry: 'PIDNS_ENABLED' = '1' ```",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313215703|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499286096.408799",
        "date": 1499286096408
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-313190583|#756: Fails to bind/mount a non existing dir in container>",
                "text": "I just ran into the same issue on a RHEL6.9-based cluster. overlayfs is actually supported in RHEL 7.1 as a <https://access.redhat.com/documentation/en-US/Red_Hat_Enterprise_Linux/7/html/7.1_Release_Notes/chap-Red_Hat_Enterprise_Linux-7.1_Release_Notes-File_Systems.html|tech preview> only, so while it could work on a RHEL/CentOS 7-based host, it won't with a standard CentOS/RHEL 6 kernel, doh. Is there another way to do custom bind if files don't exist in the container?",
                "pretext": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-313190583|#756: Fails to bind/mount a non existing dir in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499280068.447918",
        "date": 1499280068447
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313187807|#611: Nvidia GPU support with different driver versions?>",
                "text": "@gmkurtzer is this included in 2.3.1?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313187807|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499279448.128521",
        "date": 1499279448128
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313186813|#611: Nvidia GPU support with different driver versions?>",
                "text": "Could we get this last patch included in a stable 2.3.x version? thx!",
                "pretext": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-313186813|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499279226.010991",
        "date": 1499279226010
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313149025|#777: SLES11 failure due to PID namespace support>",
                "text": "@AdamSimpson OK I think I have something written that should solve your issue. It works fine on my computer when I manually force it to use the clone pathway instead of the unshare + fork pathway. Can you possibly test this for me?\n\n<https://github.com/bauerm97/singularity/tree/pidns_workaround>",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313149025|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499270740.511362",
        "date": 1499270740511
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313147622|#777: SLES11 failure due to PID namespace support>",
                "text": "@bauerm97 Awesome, I appreciate the work very much! We're looking at having SLESS11 around for several more years with minimal updates so this will really help out.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313147622|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499270427.327313",
        "date": 1499270427327
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313132803|#789: Infrastructure for Security (and other) Checks>",
                "text": "I think we would provide the core, but the reason to implement in this way is because we would want sites to also be able to easily add some check to the folder.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313132803|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499267494.561388",
        "date": 1499267494561
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313132797|#777: SLES11 failure due to PID namespace support>",
                "text": "@bbockelm Thanks, this looks perfect. @AdamSimpson I'll see what I can quickly throw together for testing for you.",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-313132797|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499267494.560966",
        "date": 1499267494560
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313132065|#789: Infrastructure for Security (and other) Checks>",
                "text": "Vanessa, I think this is a very interesting idea. I would like to clarify something: are these check scripts provided by people contributing to the upstream repository (i.e. submitting a pull request for the script and making it available to everyone) or would sites implement their own check scripts?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-313132065|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499267342.470876",
        "date": 1499267342470
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#792 Mounting an image is failed' https://github.com/singularityware/singularity/issues/792 by yangyang-zhang",
                "text": "*Version of Singularity:*\n\nThe version is 2.3.1\n\n*Expected behavior*\n\n$ singularity mount container.img /tmp/container/\ncontainer.img is mounted at: /tmp/container/\nSpawning a new shell in this namespace, to unmount, exit shell\nSingularity: \\w&gt; df\nFilesystem     1K-blocks      Used Available Use% Mounted on\n/dev/loop0       1531760      1172   1451948   1% /tmp/container\nSingularity: \\w&gt; cd /tmp/container\nSingularity: \\w&gt; ls -a\n.  ..  lost+found\n\n*Actual behavior*\n\n[root@slave2 ~]# singularity mount container.img /tmp/container/\nERROR  : Exec failed: /tmp/container/: Permission denied\nABORT  : Retval = 255\n\n*Steps to reproduce behavior*\n\n[root@slave2 ~]# singularity bootstrap container.img  singularity-2.3.1/examples/ubuntu/Singularity\n[root@slave2 ~]# chmod -R 777 /tmp",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yangyang-zhang|yangyang-zhang>",
                "title": "#792 Mounting an image is failed",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/792",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499160733.282767",
        "date": 1499160733282
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312693884|#777: SLES11 failure due to PID namespace support>",
                "text": "@bauerm97 - for prototyping, you might be interested in copying the `fork_ns` function here: <https://github.com/bbockelm/lcmaps-plugins-namespace/blob/master/src/lcmaps_namespace.c.in#L204>\n\nActs a lot like the POSIX `fork` (with a custom stack / no stack-guard) but can take additional flags like `CLONE_NEWPID`.",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312693884|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499101016.823272",
        "date": 1499101016823
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#791 Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file' https://github.com/singularityware/singularity/issues/791 by willfurnass",
                "text": "*Version of Singularity:*\n\n2.3.1\n\n*Desired behavior*\n\nI'd like if if \n```TMPDIR=/scratch singularity run docker://debian:latest```\nresults in the Docker image layers being written to `/scratch/.singularity-runtime.???/`\n\n*Actual behavior*\n\nDocker image layers written to `/tmp/.singularity-runtime.???/`\n\nOn our HPC cluster nodes `/scratch` is much larger than `/tmp` so we'd like to be able to customise where Singularity temporarily stores Docker images. ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/willfurnass|willfurnass>",
                "title": "#791 Ensure Singularity respects TMPDIR variable or allow Docker image cache to be specified in cfg file",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/791",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499098849.087412",
        "date": 1499098849087
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312646025|#790: Update installation procedure to use 2.3.1>",
                "text": "+1! And whatever we come up with here, I'll mirror on the site docs too :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312646025|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499088620.722113",
        "date": 1499088620722
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tristan0x on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312645495|#790: Update installation procedure to use 2.3.1>",
                "text": "Thank you @vsoch for this suggestion. I definitely agree that `git checkout tags/&lt;tag&gt; -b &lt;tag&gt;` is much better than `git checkout &lt;tag&gt;`.\n\nThe `git fetch...` hint is also very valuable, but I would put it in a dedicated section though: _To compile and install Singularity from an existing Git clone_\n\nWDYT?",
                "pretext": "[singularityware/singularity] New comment by tristan0x on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312645495|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499088489.665544",
        "date": 1499088489665
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312641937|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "ok, rebuilt and we are good :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312641937|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499087537.281417",
        "date": 1499087537281
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-312641326|#727: home mount erase /usr/ in container>",
                "text": "I would expect that with disabled overlay fs singularity do not mount the home directory instead of \"erase\" directories in the container. \n\nHowever, I can mount my home from host (/usr/users/mschnepf) in the container (/usr/users/mschnepf) with disabled overlay fs ( enable overlay = no ). With the command `singularity shell -B /usr/users/mschnepf:/usr/users/mschnepf  image.img` and the option `mount home = no` I have access to /usr/bin, /usr/lib, /usr/... and my home /usr/users/mschnepf inside the container. So I think, because this case works it should also work with the option `mount home = no`",
                "pretext": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-312641326|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499087376.217293",
        "date": 1499087376217
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312639937|#785: Fix --nv option>",
                "text": "@mrmhodak I will look at this and verify that all bound libs appear in the NVIDIA driver .run file as soon as I can.  Thanks!",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312639937|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499086983.060278",
        "date": 1499086983060
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312639506|#790: Update installation procedure to use 2.3.1>",
                "text": "I might add something about checking out a tag, because given the repo exists, it's not always clear how to do this. For example, I have this branch at remote called \"upstream\" so I needed to do:\n\n```git fetch --tags upstream\ngit checkout tags/2.3.1 -b 2.3.1\n```\nto get the 2.3.1 tag active in a new branch called 2.3.1",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/790#issuecomment-312639506|#790: Update installation procedure to use 2.3.1>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499086861.010720",
        "date": 1499086861010
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#790 Update installation procedure to use 2.3.1' https://github.com/singularityware/singularity/pull/790 by tristan0x",
                "text": "*Description of the Pull Request (PR):*\n\n• Update installation procedure from a released tarball to use the latest version released one week ago. Also factor shell commands to ease maintenance of this page.\n• Update installation procedures from a Git clone to use latest tag.\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [ ] I have tested this PR locally with a `make test`\n• [ ] This PR is NOT against the project's master branch\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [ ] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/tristan0x|tristan0x>",
                "title": "#790 Update installation procedure to use 2.3.1",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/790",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499084739.247384",
        "date": 1499084739247
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mbrt on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312613350|#784: A patch for slurm plugin build (master)>",
                "text": "@bauerm97 I did some basic testing, but it's far from complete (basic singularity functionality and some slurm). I tested the patch against the master branch, as this PR is doing, not against develop. So yes I didn't find major problems, but more testing is needed.",
                "pretext": "[singularityware/singularity] New comment by mbrt on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312613350|#784: A patch for slurm plugin build (master)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499078723.477401",
        "date": 1499078723477
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sbutcher on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-312581343|#757: Too many levels of symbolic links>",
                "text": "I experienced this on a Centos7.3 with 3.10.0-514.16.1.el7.x86_64. singularity is loaded as a module from /share/apps which is an autofs mount from a gpfs share.\nWhen this occurred, i had successfully run a few container jobs on a node, and then one failed. Upon seeing this symbolic links error, ssh'ing into the machine, i could no longer view /share/apps, (and modules could no longer be loaded), hence this would affect more than just the container, but anyone whose jobs attempted to run on this machine.\ndidn't previously see this with 2.2",
                "pretext": "[singularityware/singularity] New comment by sbutcher on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-312581343|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499070231.547305",
        "date": 1499070231547
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312580187|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "The CI failure seems to be caused by busybox.net not being reachable.",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312580187|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499069917.438743",
        "date": 1499069917438
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312577712|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "I’ve added the requested change of not using `-t`. Also, every `mktemp` is now checked for success in an `if`. Previously, this was not done everywhere.",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312577712|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499069201.201028",
        "date": 1499069201201
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-312547411|#789: Infrastructure for Security (and other) Checks>",
                "text": "Also @gmkurtzer see my note here <https://github.com/vsoch/singularity/blob/add/security/libexec/cli/check.exec#L91>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/789#issuecomment-312547411|#789: Infrastructure for Security (and other) Checks>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499056333.609382",
        "date": 1499056333609
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#789 Infrastructure for Security (and other) Checks' https://github.com/singularityware/singularity/pull/789 by vsoch",
                "text": "This is the start of thinking for a framework to support security checks. The general idea is that a \"check\" is a pre-approved (and root owned) function (an executable under `libexec/helpers/checks` that can be run over a mounted file system, to check for some condition, and report a status about the condition back to the user. I have provided complete details in the <https://github.com/vsoch/singularity/blob/add/security/libexec/helpers/README.md#checks|README here> and will explain my thinking here as well.\n\n*Definition: Checks*\n\nBroadly, a check is a script that is run over a mounted filesystem, primary with the purpose of checking for some security issue. This process is tighly controlled, meaning that the script names, located in a checks folder under `libexec/helpers` are hard coded into the calling script `check.sh` that is in the helpers folder. Every check script that is added has an assigned level (or severity) and optionally, one or more tags to give the user the option to filter. The flow of checks is the following:\n\n• the user calls `singularity check container.img` to invoke `check.exec`\n• specification of `--low` (3), `--med` (2), or `--high` (1) sets the level to perform. The level is a filter, meaning that a level of 3 will include 3,2,1, and a level of 1 (high) will only call checks of high priority.\n• specification of `--tag` will allow the user (or execution script) to specify a kind of check. \n\n*Why tags?*\n\nTags allows us to extend checks to be other types of things. Right now we are thinking about security, but a check could equally be some kind of find or query function, a counting of files, anything really. For example:\n• A user could contribute one check that has a unique tag of `findR` that aims only to find where the R executable is, and the user would just run `singularity check --tag findR container.img`. \n• Tags are also useful to reflect the degree of something desired. I could have three scripts (at different levels) that perform the same function, but each less conservative.\n• A tag can also help to be specific. For example, during bootstrap I might want to perform security checks specific to the bootstrap type. A script might have tag `security` but also tag `debootstrap` to specify it should only perform checks with one or both these tags. If the user wanted both, he would do `singularity check --tag \"security+debootstrap\" container.img` or for an OR,  `singularity check --tag \"security|debootstrap\" container.img`. I'm indifferent about the symbols we use, it could be an issue if people forget quotes and it turns into a pipe :)\n\n*Examples*\n\nIn addition to the examples below, I made a <https://asciinema.org/a/127429?speed=3|quick asciinema> to see (the current PR here) in action.\n\nIn the case of having these checks:\n\n```libexec/helpers/checks\n├── 1-hello-world.sh\n├── 2-hello-world.sh\n└── 3-hello-world.sh\n```\n\nassociated with these levels:\n\n```\n\n*[LEVEL] [SCRIPT]                                                            [TAGS]*\n\nexecute_check 1       \"$SINGULARITY_libexecdir/singularity/helpers/checks/1-hello-world.sh\" security\nexecute_check 2       \"$SINGULARITY_libexecdir/singularity/helpers/checks/2-hello-world.sh\" security\nexecute_check 3       \"$SINGULARITY_libexecdir/singularity/helpers/checks/3-hello-world.sh\" security\n```\n\nThis first example shows the default level is for tag security, and all levels (low, med, high)\n\n```\n\n*Perform all security checks, these are the same*\n\n$ singularity check ubuntu.img\n$ singularity check --tag security ubuntu.img\n```\nproduces equivalent output, (currently) just a message to indicate what gets run:\n\n```/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] indicated to run\n/usr/local/libexec/singularity/helpers/checks/2-hello-world.sh tags[security] level[MED] indicated to run\n/usr/local/libexec/singularity/helpers/checks/3-hello-world.sh tags[security] level[LOW] indicated to run\n```\n\nThis second example shows only performing the high (severe risk) level:\n\n```\n\n*Perform high level security checks*\n\n$ singularity check --high ubuntu.img\n/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] indicated to run\n```\n\nand medium:\n\n```singularity check --med ubuntu.img\n/usr/local/libexec/singularity/helpers/checks/1-hello-world.sh tags[security] level[HIGH] indicated to run\n/usr/local/libexec/singularity/helpers/checks/2-hello-world.sh tags[security] level[MED] indicated to run\n```\nand these are not yet implemented, but tags would look like this:\n\n```\n\n*All security checks for tag security AND debootstrap*\n\n$ singularity check --tag \"security+debootstrap\" ubuntu.img\n\n*All security checks for tag security OR debootstrap*\n\n$ singularity check --tag \"security|debootstrap\" ubuntu.img\n```\n\n*Adding a Check*\n\nA check should be a bash script that will perform some action. The following is required:\n\n• The script assumes a base of `SINGULARITY_ROOTFS`. This is defined when coming from bootstrap, and when called via `check.sh`, is set via `SINGULARITY_MOUNTPOINT`.\n• The script should indicate any warning/message to the user if the check is found to have failed. If pass (don't print anything? print pass?)\n• The script should return 0 when finished.\n• The script level, path, and tags should be added to &lt;check.sh|check.sh&gt; in the following format:\n\nThis is pretty rough, and I expect will change. The scripts are hard coded, with their levels and tags, in `check.sh`\n\n```\n##################################################################################\n\n*CHECK SCRIPTS*\n\n##################################################################################\n\n*[LEVEL] [SCRIPT]                                                            [TAGS]*\n\nexecute_check 1       \"$SINGULARITY_libexecdir/singularity/helpers/checks/1-hello-world.sh\" security\nexecute_check 2       \"$SINGULARITY_libexecdir/singularity/helpers/checks/2-hello-world.sh\" security\nexecute_check 3       \"$SINGULARITY_libexecdir/singularity/helpers/checks/3-hello-world.sh\" security\n```\n\nThe function `execute_check` will compare the level with the user specified (or default) `SINGULARITY_CHECKLEVEL` and execute the check only given it is under the specified threshold, and (not yet implemented) has the relevant tag. If no tag is specified, either security can be default, or performing all checks.\n\n*Important Notes:*\n\n• checks can/should be performed on demand (as in this implementation) but also with bootstrap. In the case of bootstrap, the user should be able to disable.\n• a check is NOT a fix. A check simply checks and alerts the user of some condition, and makes no changes to the image. \n• However, the original use case for wanting a check was with the `self` bootstrap, in which case we would want to enforce a core set of fixes, for the security of the host where the image is being generated. We can discuss the best way to perform actions based on check status as a supplement / next step for checks.\n\n*Not covered*\n\n*custom variables / filtering for within a function*\n\nIf  a user wanted to specify a whitelist / blacklist for looking over history, for example, how would that information get there? We could use environment variables, and they would be in the format `SINGULARITY_CHECK[SCRIPTNAME]_VARIABLE` or something like that. To have a complete record of these variables, my suggestion is that the requirement of each check should be that it has a help section written in the README.md.\n\n*Script names being important*\n\nThere is a lot of information that can be capturing in the naming of scripts, and I like the convention generally for finding things easily and organizing automatically based on file name. Right now, I just have a number that corresponds with the check level, and have made the suggestion of having fixes vs checks represented in this way. Thoughts?\n\n*Fixes*\n\nArguably, each check should (optionally) come with a fix. For example, if there is a history check …",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#789 Infrastructure for Security (and other) Checks",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/789",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499055707.525455",
        "date": 1499055707525
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312520863|#784: A patch for slurm plugin build (master)>",
                "text": "Hi @bauerm97 \nThank you. I have only submitted two PRs, because I saw it mentioned in the guidelines, so I'll make sure next time it only goes to dev.\n\nI hope to test it with Slurm tomorrow and will see how it goes. I am not actually sure it will work, because I have just noticed number of symbols that will be likely unresolved due to the changes in 2.3 release (no more singularity_sessiondir_init, rootfs related calls, etc.), but I will submit it as a separate issue.",
                "pretext": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312520863|#784: A patch for slurm plugin build (master)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499034505.202552",
        "date": 1499034505202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312512776|#785: Fix --nv option>",
                "text": "Here are the libraries that are no longer included after this commit (for Cuda 8.0) along with the rpm package they are from:\nLIBRARY                                RPM PACKAGE \nlibcudart.so                           cuda-cudart\nlibcudart.so.8.0                     cuda-cudart\nlibnvrtc-builtins.so                cuda-nvrtc\nlibnvrtc-builtins.so.8.0          cuda-nvrtc\nlibnvrtc.so                             cuda-nvrtc\nlibnvrtc.so.8.0                       cuda-nvrtc\nlibnvToolsExt.so                    cuda-cudart\nlibnvToolsExt.so.1                 cuda-cudart \nlibOpenCL.so                        cuda-cudart-dev\nlibOpenCL.so.1                     cuda-cudart-dev\n\nAs I mentioned previously, the last two (libOpenCL) are somewhat tricky as two packages install these in two different locations: There is both /usr/lib64/nvidia/libOpenCL.so and /usr/local/cuda-8.0/targets/x86_64-linux/lib/libOpenCL.so. The former is from the kernel driver (xorg-x11-drv-nvidia-devel) and the latter from cuda ( cuda-cudart-dev). The cuda one has a higher priority in ldconfig, so there is no need to \"import\" from the host inside the container. ",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312512776|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499024654.529712",
        "date": 1499024654529
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#788 Clearer error message when download shub image that isn't ready' https://github.com/singularityware/singularity/pull/788 by vsoch",
                "text": "Right now, when a user attempts to download a singularity hub image for which the file doesn't exist, the manifest returns None, and the download fails and asks the user if he/she has permission to write to the directory.\n\n```ERROR Error downloading None. Do you have permission to write to [current folder]\n```\n\nThis is not ideal, as it indicates the wrong error. Instead, we do a check first to ensure that the url exists, and if it doesn't (meaning the image isn't built) we tell this to the user off the bat and exit with error:\n\n```singularity pull shub://1633\nERROR YeoLab-cellranger-master.img.gz is not ready for download\nERROR please try when build is complete, or specify tag.\n```\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#788 Clearer error message when download shub image that isn't ready",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/788",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499022469.370439",
        "date": 1499022469370
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#787 CI not properly testing SLURM plugin' https://github.com/singularityware/singularity/issues/787 by bauerm97",
                "text": "*Version of Singularity:*\n\nPotentially all versions of Singularity?\n\n*Expected behavior*\n\nBuild fails if SLURM plugin isn't building\n\n*Actual behavior*\n\nBuild doesn't fail if SLURM plugin isn't building. See #701, #783. This should have been caught before the update to 2.3 if our CI was catching this errors.\n\nTo fix, we could add a SLURM test into /tests/ directory.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/bauerm97|bauerm97>",
                "title": "#787 CI not properly testing SLURM plugin",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/787",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499011221.526448",
        "date": 1499011221526
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312499650|#784: A patch for slurm plugin build (master)>",
                "text": "Hi @votavap thank you very much for submitting a patch for this. I have gone ahead and checked the box off saying that you've tested the branch locally, as @mbrt has tested this for you (per #701). @mbrt, could you confirm whether or not the SLURM functionality is working as intended? The changes look minimal so I would be shocked if it's not working (looks to only be changing the SLURM section to reference the proper new headers and libraries).\n\nAlso, a new policy that we have is to only merge new changes into the development branch. Would you be able to rebase this patch on top of development instead and then change the PR to be into development? Other than that, it looks good to me and once it's based on the proper branch we should be good to merge. Thanks again for your contribution!\n\nMoving forward, it looks like our CI is not actually making sure that Singularity is able to be compiled for SLURM use... We need to update our tests to catch this moving forward. I will submit a separate issue for this though.",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/784#issuecomment-312499650|#784: A patch for slurm plugin build (master)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499010581.477038",
        "date": 1499010581477
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312498903|#777: SLES11 failure due to PID namespace support>",
                "text": "@gmkurtzer Would you like me to prototype a workaround in the meantime while you guys investigate the upstream support of the `CLONE_NEWPID` flag for the `unshare()` call?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312498903|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499009768.417221",
        "date": 1499009768417
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312492720|#777: SLES11 failure due to PID namespace support>",
                "text": "@gmkurtzer, Our kernel is  listed as `3.0.101-0.46.1_1.0502.8871-cray_gem_s`",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312492720|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1499002977.949619",
        "date": 1499002977949
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#786 Adding `-V` option to export all env var to the container' https://github.com/singularityware/singularity/issues/786 by remyd1",
                "text": "Hi\n\nThis is not a bug but a feature request.\n\nIt would be great to add a way to export all environment variables from the local session on host to the running container like the `-V` option in SGE/qsub.\nIt is already possible to export an env var with `SINGULARITYENV_[...] singularity ...`\nWith a simple for loop, it is possible to parse all env vars and then concatenate all these vars before launching singularity but is is a bit complicated for a basic user.\n\nBest regards\nRémy",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/remyd1|remyd1>",
                "title": "#786 Adding `-V` option to export all env var to the container",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/786",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498987804.121992",
        "date": 1498987804121
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by remyd1 on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-312479433|#779: Import command order>",
                "text": "Well, even if a lots of tools use this format (`cp`, `mv`, `scp`, `rsync`...), there are some counter examples (not totally src-dst form), eg:\n\n`tar -cvf file.tar dir/...` or `ln -s dest symlink`\n\nSo it could stay like that, but what is really annoying is that there is no error message / warning.\n\nSo it would be useful if there is a string analysis or if it fails it returns the command usage.\n\nOtherwise, maybe you can include this change in singularity 3.0 ?",
                "pretext": "[singularityware/singularity] New comment by remyd1 on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-312479433|#779: Import command order>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498986255.045296",
        "date": 1498986255045
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312464617|#781: Fix spelling of existent.>",
                "text": "no, it's pretty darn weird :P",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312464617|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498958002.747662",
        "date": 1498958002747
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312464159|#781: Fix spelling of existent.>",
                "text": "Is it weird that I find that almost impossible to read? ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312464159|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498957096.698839",
        "date": 1498957096698
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/783|#783 Patch to fix slurm plugin build (development)> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/783|#783 Patch to fix slurm plugin build (development)> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498956955.691531",
        "date": 1498956955691
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312464102|#783: Patch to fix slurm plugin build (development)>",
                "text": "I would prefer to have PRs resolve to a working implementation (or at least as far as we know) generally speaking, but considering the SLURM module doesn't even build at present, I concur that this is a step in the right direction.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312464102|#783: Patch to fix slurm plugin build (development)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498956949.691248",
        "date": 1498956949691
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312463957|#777: SLES11 failure due to PID namespace support>",
                "text": "I don't know if this is correct, but based on <https://www.novell.com/support/kb/doc.php?id=3594951> it looks like the latest kernel for SLES11.3 is `3.0.101-0.47.90`. But, I don't have the ability to determine if that kernel (or a later version) properly supports the PID namespace.\n\n@craiggardner, can you confirm what version (if any) SLES11 is supposed to support the PID namespace? Thank you!\n\n@AdamSimpson, can you confirm that this is the latest version of the kernel you have access to?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312463957|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498956709.679525",
        "date": 1498956709679
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312463023|#777: SLES11 failure due to PID namespace support>",
                "text": "Hi Michael, the implementation details of this are out of my wheelhouse but I can say it would be very very welcome if a workaround could be made available.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312463023|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498955004.594796",
        "date": 1498955004594
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312462360|#777: SLES11 failure due to PID namespace support>",
                "text": "Adam, we could potentially add some support for older systems by enabling the use of `clone()` instead of `unshare()` if the flag is only supported by `clone()`. Do you guys think this would be an acceptable workaround for the time being?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312462360|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498953955.538174",
        "date": 1498953955538
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312462041|#777: SLES11 failure due to PID namespace support>",
                "text": "Hi Greg, \n\nIt's certainly old although due to Cray's glacial update schedule it's what we're stuck with for the foreseeable future I believe:\n```$ uname -a\nLinux titan-login1 3.0.101-0.46.1_1.0502.8871-cray_gem_s #1 SMP Sat Oct 22 15:27:07 UTC 2016 x86_64 x86_64 x86_64 GNU/Linux\n```\n\nWhen i test for CLONE_NEWPID with the following:\n```\n#define _GNU_SOURCE\n#include &lt;sched.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;string.h&gt;\n#include &lt;stdio.h&gt;\n\nint main(int argc, char **argv) {\n  int err = unshare(CLONE_NEWPID);\n  if(err != 0)\n    printf(\"error: %s\\n\", strerror(errno));  \n\n  return 0;\n}\n```It compiles fine, as CLONE_NEWPID is defined and available for use in `clone()` for example, but fails at runtime:\n```error: Invalid argument\n```\n\nIf there is any other information I can provide pelase let me know, Thanks!",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312462041|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498953487.511815",
        "date": 1498953487511
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312456338|#785: Fix --nv option>",
                "text": "@GodloveD and @flx42: Any comments?\n\nI believe I got this one right after feedback I got from you for PR #774 ",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/785#issuecomment-312456338|#785: Fix --nv option>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498944199.999270",
        "date": 1498944199999
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#785 Fix --nv option' https://github.com/singularityware/singularity/pull/785 by mrmhodak",
                "text": "--nv option needs to be adjusted because it \"imports\" several CUDA libraries, which should be provided by the container.\n\nThis commit does two things:\n1. Remove two unnecessary entries from the \"grep\" pattern:\n     a) \"libnvcu\", because \"libnv\" already catches that\n     b} \"libOpenCL\". Strangely, both kernel driver and cuda  provide libOpenCL.so (installed in two different locations), which differ according to diff. However, the cuda one has a higher priority according to ldconfig, and so OpenCL already in the container should be used. Because of this the grep pattern should not include libOpenCL.\n2. Because grep catches several cuda-related libraries, specifically libcudart.so*, libnvrtc.so, and libnvToolsExt.so* I am adding grep -v statement after the pipe to avoid this.\n\nOne way this issue manifested itself, was that libraries in /.singularity.d/libs were replicated with libraries inside the container. With this fix, it does not happen anymore.\n\nFinally, this is related to Pull Request #774 which I am going to delete.\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/mrmhodak|mrmhodak>",
                "title": "#785 Fix --nv option",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/785",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498943785.973128",
        "date": 1498943785973
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312452779|#783: Patch to fix slurm plugin build (development)>",
                "text": "Hi @gmkurtzer \n\nI have tested the build process, so it may be ready in that regard. I suspect that the next step will be to reconcile some of the the new API, because I think there will be few symbols that may not resolve at runtime. I may be able to test it with Slurm on Monday, and will see how it goes, but if there are problems, maybe it would be good to have the build patch in the development branch and deal with the actual plugin logic as a separate issue. What do you think?",
                "pretext": "[singularityware/singularity] New comment by votavap on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312452779|#783: Patch to fix slurm plugin build (development)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498939273.672029",
        "date": 1498939273672
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312449792|#781: Fix spelling of existent.>",
                "text": "Spelling is ok (I was pretty good when I was in school) but what doesn't map so cleanly is the connection from brain --&gt; fingers, especially when one is typing quickly, and <https://www.mrc-cbu.cam.ac.uk/people/matt.davis/cmabridge/|this>.\n\nSlnielpg is ok (I was pttery good wehn I was in soohcl) but waht dnseot map so cnaely is the ctnicoenon form biarn --&gt; fegrnis, eilclaepsy wehn one is tnipyg qlkciuy.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312449792|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498935604.400068",
        "date": 1498935604400
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312449507|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "@gmkurtzer and @bauerm97 start/stop and general status maps really nicely to webby service things - please ping me when you need testing / feedback, etc.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312449507|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498935274.376780",
        "date": 1498935274376
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312448852|#777: SLES11 failure due to PID namespace support>",
                "text": "@AdamSimpson Are you running an older, unpatched kernel on your SLES11 system? I thought CLONE_NEWPID was supported on it, and the user space suggests so.\n\nMaybe a SuSE person can help. @craiggardner, do you have any insights by chance?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-312448852|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498934485.317921",
        "date": 1498934485317
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312448569|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "Hi all,\n\nI would prefer we don't use the `-t` flag to `mktemp` but instead specify the `$TMPDIR` variable by hand within that path including a default. So change `mktemp -t .singularity.....` to `mktemp ${TMPDIR:-/tmp}/.singularity....` which would achieve the same outcome.\n\nAs far as `status.exec`, while it does make more sense to put it in `/var/run/`, users don't and should not have permission to write to that part of the file system. Moving forward with the start/stop/status work that @bauerm97 is working on, we will be putting those in the `~/.singularity/` directories within each user's home.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-312448569|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498934145.292804",
        "date": 1498934145292
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/776#issuecomment-312448348|#776: Add --bindlibs option>",
                "text": "Nope, I never got a definitive word back from a kernel developer on this, but the PR_SET_NO_NEW_PRIVS was always our fallback on this (and one of the reasons why user bind mounts are prohibited if that option is not available).\n\nWe could however handle this in the same way as we are doing the nvidia libraries, but I am concerned about the portability implications of binding libraries that are built for a specific distribution into a container.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/776#issuecomment-312448348|#776: Add --bindlibs option>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498933873.271816",
        "date": 1498933873271
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-312448050|#779: Import command order>",
                "text": "While this makes a lot of sense... there is some legacy-ness at play here and typically, the image always follows the \"verb\", not sure if it makes sense to break that standard but again, I do follow your logic.\n\nAlso, if we make a change at this point, we risk breaking people that have written script wrappers and additional tools.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-312448050|#779: Import command order>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498933499.242242",
        "date": 1498933499242
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/781|#781 Fix spelling of existent.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/781|#781 Fix spelling of existent.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498933163.216198",
        "date": 1498933163216
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312447773|#781: Fix spelling of existent.>",
                "text": "Oooops, spelling is hard. lol... Thanks everyone!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312447773|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498933158.215845",
        "date": 1498933158215
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312447316|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Let me take a stab at this, I will have something ready to go soon. I just need to figure out what is going on with libOpenCL",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312447316|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498932650.174992",
        "date": 1498932650174
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312444047|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "As @flx42 mentions:\n&gt; Also, libcuda.so is part of the driver, but libcudart.so is part of the CUDA toolkit.\nYes, we need to be more careful about which libraries we are importing into the container at runtime as our current pattern match will pull both of these, as was mentioned above.\n\nIf someone wants to take a stab at this go for it, otherwise I'll add it to my TODO list.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312444047|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498929163.885941",
        "date": 1498929163885
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312443759|#783: Patch to fix slurm plugin build (development)>",
                "text": "Heya @votavap,\n\nIs this PR ready to be tested/merged?\n\nnote: I thought there would be quite a bit more that needs to be changed/fixed, but I'll take a look at it once you give me the thumbs up.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/783#issuecomment-312443759|#783: Patch to fix slurm plugin build (development)>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498928818.857015",
        "date": 1498928818857
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312410148|#701: Slurm plugin missing header>",
                "text": "@mbrt Thank you for testing this!",
                "pretext": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312410148|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498884070.049245",
        "date": 1498884070049
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312365698|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "@GodloveD and @flx42: Thanks for your input. \n\nI will create a more narrow commit to fix the doubly included libraries.  ",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312365698|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498854508.471954",
        "date": 1498854508471
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#784 A patch for slurm plugin build (master)' https://github.com/singularityware/singularity/pull/784 by votavap",
                "text": "*Description of the Pull Request (PR):*\n\nFixes the build of the Slurm plugin in Singularity 2.3.1\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #701 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [ ] I have tested this PR locally with a `make test`\n• [ ] This PR is NOT against the project's master branch\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [ ] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/votavap|votavap>",
                "title": "#784 A patch for slurm plugin build (master)",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/784",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498844546.399730",
        "date": 1498844546399
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#783 Patch to fix slurm plugin build (development)' https://github.com/singularityware/singularity/pull/783 by votavap",
                "text": "*Description of the Pull Request (PR):*\n\nThis patch fixes the issues with building the Slurm plugin for Singularity 2.3.1\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #701  \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [ ] I have tested this PR locally with a `make test`\n• [x ] This PR is NOT against the project's master branch\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [ ] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/votavap|votavap>",
                "title": "#783 Patch to fix slurm plugin build (development)",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/783",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498844401.352093",
        "date": 1498844401352
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312248738|#701: Slurm plugin missing header>",
                "text": "@votavap the build worked fine for RHEL 7 and the basic singularity functionality is there. I'll now test the slurm functionality. I think the patch is good",
                "pretext": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312248738|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498823858.500144",
        "date": 1498823858500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312200467|#782: Feature: Packaging of Node>",
                "text": "or ping @gmk for the warewulf vnfs tidbits used on the warewulf framework ;P",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312200467|#782: Feature: Packaging of Node>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498809041.323289",
        "date": 1498809041323
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312194206|#782: Feature: Packaging of Node>",
                "text": "maybe <http://libguestfs.org/virt-sysprep.1.html#operations> would be a better start",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312194206|#782: Feature: Packaging of Node>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498807034.940958",
        "date": 1498807034940
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312191645|#782: Feature: Packaging of Node>",
                "text": "• history cleanup (no trace of credentials like \"echo changemenow| sudo passwd --stdin root\")\n• user controlled whitelist/blacklist of what should be kept\n• remove any file specific to the machine and not required on the container (same files as for cloning instances) e.g /etc/ssh/_host_,  cleanup /etc/hosts, /etc/sysconfig/network-scripts/ifcfg-*, but not ifcfg-lo, /etc/udev/rules.d/_persistent_ ) /var/log/{secure_,messages_,...}\n• yum clean all and the apt-get equivalent\n• SElinux or ACLs transfer? tar --selinux --xattrs\n• sparse file handling\n• remove any non required users via userdel?\n\nmaybe reuse|have a peak at cloud-init ?",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/782#issuecomment-312191645|#782: Feature: Packaging of Node>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498806117.781008",
        "date": 1498806117781
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#782 Feature: Packaging of Node' https://github.com/singularityware/singularity/issues/782 by vsoch",
                "text": "This is a summary of a feature that (is going to be awesome) and have many use cases for 2.4. It's the idea that someone can package the node that they are working on, and doesn't have to know a thing about containers to make them.\n\nI think this could be integrated into Singularity as a bootstrap module, but for now I've implemented something to test <https://github.com/vsoch/singularity-python/tree/development/examples/create/package_node|here>. Specifically, it looks something like this:\n\n*On Node*\n\n```\nfrom singularity.package import package_node\npackage = package_node()\n\npackage\n'/tmp/tmp06ww_8_n/vanessa-testing-self-cloning.tgz'\n```\n\noptionally, the user can select a different root (default is `/`) or name for the image (the default name is the name of the machine)\n\n*On Packaging Node*\n\n```from singularity.package import unpack_node\nimage = unpack_node(image_path=package,size=9000)\n```\n\nThe current issues with the above have to do with the metadata folder (eg, there is no action for the container, or anything else for that matter) but if we integrate this into bootstrap, that goes away.\n\n*Workflow*\n\nThis supports  a slightly different framework than is supported on most clusters - one that is more akin to requesting instances on demand on Google Cloud (and likely some larger resources do have with something like OpenStack). Under this design, a user is given a node on demand, disconnected from the cluster, and allowed to do whatever they please!\n\n• history is saved as a quasi \"deffile\" %post section, to record exactly what they did\n     • full permission is given to install, clone, etc.\n\nWhen the user has finished, a trigger is run to package the image, and sent somewhere (a different machine with enough space) to package it into an image proper (the unpack_image function above, which would be supported through singularity hopefully to create a completely working image).\n\n*Features*\n\nFor an actual imlpementation, we would want to have the following:\n• security checks for the image before it's done\n• testing in the same way\n• capturing metadata, akin to what singularity hub does (which is pretty crappy, we can do a lot better)!\n\n*TLDR*\n\n1. user logs into node\n2. user does work, perhaps it's recorded in history (to save and mimic as some kind of deffile)\n3. when user is finished, some kind of trigger is done (or running a command for an admin to do so) to package the node\n4. the node is packaged, moved somewhere where it can be tested, measured, and turned into an image.\n5. the image is made available for the user.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#782 Feature: Packaging of Node",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/782",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498774533.659262",
        "date": 1498774533659
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312108415|#701: Slurm plugin missing header>",
                "text": "@mbrt That would be great!!\n<https://github.com/votavap/singularity/>\nIt's a fork from the main repo and there is a slurm-plugin-patch-devel branch from the development branch and (if needed) slurm-plugin-patch branch from the master. I managed to build both on CentOS7.3 using gcc 4.8.5. ",
                "pretext": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312108415|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498770325.539780",
        "date": 1498770325539
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312093567|#701: Slurm plugin missing header>",
                "text": "I'd be happy to test your patch, if this can help to speedup the process\n\nIl 29 giu 2017 20:07, \"votavap\" <mailto:notifications@github.com|notifications@github.com> ha scritto:\n\n&gt; I have a patch for the build, but wanted to test the plugin before I\n&gt; submit a pull request. I will see if I can get to it later today or\n&gt; tomorrow unless this is urgent and somebody wants to give it a try.\n&gt; \n&gt; —\n&gt; You are receiving this because you commented.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/701#issuecomment-312049175>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AAYxrmJNWOLIRaGS3jydK2ErPiXHJfyIks5sI-ffgaJpZM4Ns-Hc>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312093567|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498767874.708621",
        "date": 1498767874708
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312062755|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Indeed.  Thanks very much for chiming in on this @flx42.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312062755|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498761792.604202",
        "date": 1498761792604
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312061917|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Yes, this file is not part of the driver so it should not be mounted. But the `-nv` was done by @gmkurtzer, not us :)",
                "pretext": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312061917|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498761698.570030",
        "date": 1498761698570
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312060594|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Hiya @flx42!  What about @mrmhodak's last point?  I think they may be onto something there.  Should we ensure that those libs are _not_ bind mounted into the container?  Sounds like `libcudart.so` at the least is being erroneously scooped up.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312060594|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498761542.512367",
        "date": 1498761542512
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312058944|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "I took a quick look at this issue and @GodloveD is correct. You might be interested to read the explanations on our <https://github.com/NVIDIA/nvidia-docker/wiki/NVIDIA-driver|nvidia-docker wiki>.\n\nAlso, `libcuda.so` is part of the driver, but `libcudart.so` is part of the CUDA toolkit.",
                "pretext": "[singularityware/singularity] New comment by flx42 on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-312058944|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498761383.453926",
        "date": 1498761383453
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312049175|#701: Slurm plugin missing header>",
                "text": "I have a patch for the build, but wanted to test the plugin before I submit a pull request. I will see if I can get to it later today or tomorrow unless this is urgent and somebody wants to give it a try.",
                "pretext": "[singularityware/singularity] New comment by votavap on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-312049175|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498759645.794949",
        "date": 1498759645794
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312033821|#781: Fix spelling of existent.>",
                "text": "@gmkurtzer this is a tiny PR to fix some spelling errors, should be easy to review and merge.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312033821|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498756723.691706",
        "date": 1498756723691
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312033726|#781: Fix spelling of existent.>",
                "text": "definitely approved by me! ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/781#issuecomment-312033726|#781: Fix spelling of existent.>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498756704.684697",
        "date": 1498756704684
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#781 Fix spelling of existent.' https://github.com/singularityware/singularity/pull/781 by markeganfuller",
                "text": "*Description of the Pull Request (PR):*\n\nFix spelling of existent:\nexistant -&gt; existent\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/markeganfuller|markeganfuller>",
                "title": "#781 Fix spelling of existent.",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/781",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498742773.051053",
        "date": 1498742773051
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-311964157|#779: Import command order>",
                "text": "This makes a lot of sense, given the cp command as you mentioned, and it having better readability to say \"import this docker image to this singularity image.\" I think the current approach is probably taken because it assumes \"the stuff following the image is what I want to import.\" @gmkurtzer what are your thoughts? If we remove old functionality, that would of course potentially break pre-existing tools/pipelines. We could extend functionality to allow for the above, but that might be hairy for you to implement (or not given the uri).",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/779#issuecomment-311964157|#779: Import command order>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498742466.944123",
        "date": 1498742466944
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/776#issuecomment-311963128|#776: Add --bindlibs option>",
                "text": "Hi! I really like this idea, however I'm not sure the best way that we can make it work. Unfortunately, we can't allow users to bind arbitrary single files (as opposed to arbitrary directories) into the container, as it appears that the kernel doesn't respect the MS_NOSUID mount flag when bind mounting a single file. @gmkurtzer was there ever any resolution to why that was happening? ",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/776#issuecomment-311963128|#776: Add --bindlibs option>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498742225.862798",
        "date": 1498742225862
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311957160|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "Woot! Alright closing issue - here is the link to the page with the form if you need it <https://containers-ftw.github.io/competitions/2017/pearc.html>. Can't wait to play around with it!\n\nAnd with regard for the README - we can link to it from shub via the Github repo, but it's not as clear or direct as having it right there! If you can imagine some \"containers-ftw\" site (that would eventually exist) that can let you select (and display the README and details for a repo) automatically, that's the kind of thing I'd like to make :) But likely after singularity-hub and the registry are mostly done. Closing issue!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311957160|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498740807.408355",
        "date": 1498740807408
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/778|#778 Singularity-Hub container cannot be pulled. Naming issue?> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/778|#778 Singularity-Hub container cannot be pulled. Naming issue?> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498740807.408306",
        "date": 1498740807408
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by c1t4r on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311955640|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "Hi vanessa, \n\n I see no troubles any longer. Maybe just close the issue.\nAnd BTW: the container had some bugs now it should work according to the README.md\nYou will need a multi host system with keyless SSH on two nodes that have singularity installed.",
                "pretext": "[singularityware/singularity] New comment by c1t4r on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311955640|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498740412.294778",
        "date": 1498740412294
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311954663|#777: SLES11 failure due to PID namespace support>",
                "text": "&gt; Singularity/2.2 worked however because there was no #ifdef SINGULARITY_NO_NEW_PRIVS in pid.c and so PID namespacing was just disabled, running with debug and verbose under singularity/2.2 looked like this:\nThis is by design, so I don't know if there's a way around this at this moment in time. It is necessary for security reasons to run in a PID namespace if PR_SET_NO_NEW_PRIVS is not available on the host machine. @gmkurtzer do you have any suggestions for a workaround? The only thing that I can think about would be to attempt to use `clone` as a last resort if and only if every else has already failed.",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311954663|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498740145.221174",
        "date": 1498740145221
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311945668|#777: SLES11 failure due to PID namespace support>",
                "text": "SLES11, at least the release we have on Titan, has a kernel older than 3.8 and so CLONE_NEWPID is not supported by `unshare()`. CLONE_NEWPID has been supported by other functions such as `clone()` since kernel 2.6 and so the singularity configure test compiles fine but fails at runtime.\n\nSingularity/2.2 worked however because there was no `#ifdef SINGULARITY_NO_NEW_PRIVS` in pid.c and so PID namespacing was just disabled, running with debug and verbose under singularity/2.2 looked like this:\n\n```DEBUG   [U=5059,P=20949]   config_parser.c:104:singularity_config_get_bool(): Called singularity_config_get_bool(allow pid ns, 1)\nDEBUG   [U=5059,P=20949]   config_parser.c:80:singularity_config_get_value(): Called singularity_config_get_value(allow pid ns)\nVERBOSE [U=5059,P=20949]   config_parser.c:88:singularity_config_get_value(): Got config key allow pid ns (= 'yes')\nDEBUG   [U=5059,P=20949]   config_parser.c:110:singularity_config_get_bool(): Return singularity_config_get_bool(allow pid ns, 1) = 1\nDEBUG   [U=5059,P=20949]   util/util.c:92:envar_defined()             : Checking if environment variable is defined: SINGULARITY_UNSHARE_PID\nVERBOSE [U=5059,P=20949]   util/util.c:94:envar_defined()             : Environment variable is undefined: SINGULARITY_UNSHARE_PID\nVERBOSE [U=5059,P=20949]   pid.c:59:singularity_ns_pid_unshare()      : Not virtualizing PID namespace on user request\n```",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311945668|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498737591.591287",
        "date": 1498737591591
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311914123|#777: SLES11 failure due to PID namespace support>",
                "text": "&gt; Although CLONE_NEWPID is detected as available under SLES11, as it is defined and the configure test compile works, it is not supported in unshare() so it fails at runtime. Since NO_NEW_PRIVS is unsupported there is no way, that I can see, to short circuit the code in pid.c using singularity.conf\nThe fact that you can't \"short circuit\" the code in pid.c is by design. A system which does not support PR_SET_NO_NEW_PRIVS must not be allowed to run unless it can run inside a PID namespace.\n\nThe question now is why `unshare` is telling you that this is an invalid argument. According to <http://man7.org/linux/man-pages/man2/unshare.2.html> , CLONE_NEWPID is supported by `unshare()`. I wonder if for some reason your machine has a modified unshare.c source file which still defines the CLONE_NEWPID flag but is manually modified to throw EINVAL and not actually create the PID NS. Is there any chance this could be going on?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/777#issuecomment-311914123|#777: SLES11 failure due to PID namespace support>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498728741.678385",
        "date": 1498728741678
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-311898313|#768: Development - arm/ARCH support in debootstrap>",
                "text": "Related issue #780 ",
                "pretext": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/768#issuecomment-311898313|#768: Development - arm/ARCH support in debootstrap>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498724853.707630",
        "date": 1498724853707
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#780 Adding arch support' https://github.com/singularityware/singularity/issues/780 by remyd1",
                "text": "*Version of Singularity:*\n\nAny\n\n*Expected behavior*\n\nTo be able to `debootstrap` any _arm_ image with the singularity bootstrap script.\n\n*Actual behavior*\n\nIt fails, by searching an arch which does not exist (eg: armv7).\n\n*Steps to reproduce behavior*\n\nTry to Bootstrap a raspian image on a raspberry PI.\nThis <https://github.com/singularityware/singularity/pull/768|PR> fixes this issue.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/remyd1|remyd1>",
                "title": "#780 Adding arch support",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/780",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498724757.684313",
        "date": 1498724757684
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311897393|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "To clarify, I commented on the pid file location only because I saw that while searching for `/tmp`. I’m not suggesting it should be part of this PR.",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311897393|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498724609.647884",
        "date": 1498724609647
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#779 Import command order' https://github.com/singularityware/singularity/issues/779 by remyd1",
                "text": "*Version of Singularity:*\n\nAny\n\n*Expected behavior*\n\nIMHO, it should be:\n\n```singularity import docker://ubuntu test.img```\nInstead of the opposite:\n```singularity import test.img docker://ubuntu```\n\nBecause, the logic should be in that order:\n```singularity import source destination```\n\nLike `cp` and many other programs...\n\nMoreover an error message should inform that is not the right order.\n\n*Actual behavior*\n\nIf you enter previous command (that is to say the one which is not currently working), it will fail silently.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/remyd1|remyd1>",
                "title": "#779 Import command order",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/779",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498724483.617777",
        "date": 1498724483617
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311884003|#749: Support singularity pull from quay.io>",
                "text": "right :P,  but if your host on alpine linux, /bin/sh is just busybox!",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311884003|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498720883.840073",
        "date": 1498720883840
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by katakombi on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311863266|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "Hi vanessa,\n\nThe container maintains its own MPI is meant to be used on a multi node system operating via keyless SSH login. For that a SSH wrapper script is included to invoke the neighbour node MPI threads. Actually I plan to submit this for your contest ;)\n\nThere's a description of the container and how to use it:\n<https://github.com/katakombi/multinode_sshwrapper>\nIt would be nice if singularity hub could transparently pull the README.md or point to it as container description :)\n\nOk, lets test tomorrow again...",
                "pretext": "[singularityware/singularity] New comment by katakombi on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311863266|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498712647.725945",
        "date": 1498712647725
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311859370|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "for sanity check, how about we try again tomorrow? And what does the container do /how do I use it? Now that it's on my desktop, I think I'd like to play with it :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311859370|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498710468.491885",
        "date": 1498710468491
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by katakombi on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311856738|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "Hi Vanessa,\n\n this is weird! Now the issue seems to have gone...\nI guess it was a temporary issue, or a black out of mine.\nHowever, I tried the pull from two different hosts independently and received the same error.\n\nPS: nothing evil should happen, the default run just executes an mpi-threaded single node run of gromacs inside your containers /tmp dir :)\n\nWell... since it is gone, and I have no clue how to reproduce the error, I assume you can close the issue...",
                "pretext": "[singularityware/singularity] New comment by katakombi on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311856738|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498708993.340712",
        "date": 1498708993340
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mkandes on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-311841787|#674: (How to) Access local file during bootstrap?>",
                "text": "I was just trying the %files option assuming that it occurred prior to %post (in v2.2). I'm glad I found this thread. ",
                "pretext": "[singularityware/singularity] New comment by mkandes on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-311841787|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498701937.554383",
        "date": 1498701937554
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311816517|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "text": "hey @katakombi ! I just tried this out, and I can't reproduce the error:\n\n```\nsingularity pull shub://katakombi/multinode_sshwrapper\nProgress |===================================| 100.0% \nDone. Container is at: ./katakombi-multinode_sshwrapper-master.img\nvanessa@vanessa-ThinkPad-T460s:~/Desktop$ ./katakombi-multinode_sshwrapper-master.img \n\n*Setting up shell environment ...*\n\n```\n(and yes, I made the mistake of running it and out spat some MPI stuffs, I panicked and control-C'd, haha). Could you please add the entire `--debug` output for your command so I can take a look?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/778#issuecomment-311816517|#778: Singularity-Hub container cannot be pulled. Naming issue?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498691192.031983",
        "date": 1498691192031
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#778 Singularity-Hub container cannot be pulled. Naming issue?' https://github.com/singularityware/singularity/issues/778 by katakombi",
                "text": "*Version of Singularity:*\n\n2.3.1\n\n*Expected behavior*\n\nRun \nsingularity pull shub://katakombi/multinode_sshwrapper\n\nDL container\n\n*Actual behavior*\n\nsingularity -v pull shub://katakombi/multinode_sshwrapper\nIncreasing verbosity level (2)\nSingularity version: 2.3.1-dist\nExec'ing: /usr/lib/x86_64-linux-gnu/singularity/cli/pull.exec\nERROR Error downloading None. Do you have permission to write to /home/stefan?\n\n*Steps to reproduce behavior*\n\nSee above.\nContainer seems fine, you can get it via\nsingularity pull shub://1508",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/katakombi|katakombi>",
                "title": "#778 Singularity-Hub container cannot be pulled. Naming issue?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/778",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498685731.825149",
        "date": 1498685731825
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/761|#761 SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/761|#761 SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498674484.924028",
        "date": 1498674484924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-311746731|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "Two at once!! Great to hear again, and closing this one too.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-311746731|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498674484.923922",
        "date": 1498674484923
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/760|#760 Lack of username causes singularity to abort> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/760|#760 Lack of username causes singularity to abort> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498674441.907523",
        "date": 1498674441907
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-311746508|#760: Lack of username causes singularity to abort>",
                "text": "Great! Closing issue.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-311746508|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498674441.907519",
        "date": 1498674441907
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311743096|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "ok, good to know",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311743096|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498673657.610290",
        "date": 1498673657610
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-311740185|#760: Lack of username causes singularity to abort>",
                "text": "Thanks, this appears to be working now.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-311740185|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498672995.360180",
        "date": 1498672995360
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-311739147|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "Thanks, `SINGULARITY_CACHEDIR` looks to be honored with 2.3.1 release.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-311739147|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498672777.270543",
        "date": 1498672777270
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311739036|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "image_url": "https://cdn.sstatic.net/Sites/stackoverflow/img/apple-touch-icon@2.png?v=73d79a89bded",
                "image_width": 316,
                "image_height": 316,
                "image_bytes": 6562,
                "text": "I'm not sure about the pid (although I think you are right that <https://stackoverflow.com/questions/5173636/must-my-pidfile-be-located-in-var-run|var/run is best practice>, I think tmp would be ok, but we can check with @gmkurtzer if somewhere in var/run is more appropriate. Perhaps it has something to do with where the file is needed in relation to the host and container? For the test stuffs we can be a little more lenient, only because we know the exact environment / file structure where it is to be run on Travis.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311739036|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498672753.260567",
        "date": 1498672753260
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311734939|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "You’re right. The `-t` option is deprecated according to `mktemp --help`, but of course it’s better to use a deprecated option than to fail on some systems. I’ve changed that and also changed two occurrences in the bootstrap scripts. There’s one more hard-coded `/tmp/` in `tests/functions`, but I guess that doesn’t matter. Then there is also this in `libexec/cli/status.exec`:\n```SESSION_GLOB=\"/tmp/.singularity-session-${USERID}.*/daemon.pid\"\n```\nAs far as I understand, this is an unfinished subcommand, so I did not change it, but I believe best practice would be to put pid files into `/var/run/` anyway, not in `/tmp`.",
                "pretext": "[singularityware/singularity] New comment by marcelm on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311734939|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498671830.905080",
        "date": 1498671830905
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#777 SLES11 failure due to PID namespace support' https://github.com/singularityware/singularity/issues/777 by AdamSimpson",
                "text": "*Version of Singularity:*\n\n2.3.1\n\n*Expected behavior*\n\nSingularity works on Cray's stuck with SLES11\n\n*Actual behavior*\n\nSingularity fails under SLES11 due to the following combination of support and features:\n\nchecking for namespace: CLONE_NEWPID... yes\nchecking for namespace: CLONE_PID... no\nchecking for namespace: CLONE_FS... yes\nchecking for namespace: CLONE_NEWNS... yes\nchecking for namespace: CLONE_NEWUSER... yes\nchecking for namespace: CLONE_NEWIPC... yes\nchecking for feature: NO_NEW_PRIVS... no\n\nAlthough CLONE_NEWPID is detected as available under SLES11 it is not supported in unshare() which singularity requires. Since NO_NEW_PRIVS is unsupported there is no way, that I can see, to short circuit the code in pid.c using singularity.conf.\n\n*Steps to reproduce behavior*\n\nInstall on SLESS11 and run:\n\n$ singularity -vvv --debug exec UbuntuTitan.img ls \nIncreasing verbosity level (4)\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3.1-dist\nExec'ing: /usr/lib64/singularity/cli/exec.exec\nEvaluating args: 'UbuntuTitan.img ls'\nVERBOSE [U=0,P=29379]      message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Initialize configuration file: /etc/singularity/singularity.conf\nDEBUG   [U=0,P=29379]      singularity_config_parse()                Starting parse of configuration file /etc/singularity/singularity.conf\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key allow pid ns = 'no'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key allow user image = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key protected image mode = 'none'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key enable overlay = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key config passwd = 'no'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount home = 'no'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/opt/cray'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/var/spool/alps'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/var/opt/cray'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/lustre/atlas'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/lustre/atlas1'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key bind path = '/lustre/atlas2'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key container dir = '/var/lib/singularity/mnt'\nVERBOSE [U=0,P=29379]      singularity_config_parse()                Got config key singularity user = 'singularity'\nDEBUG   [U=0,P=29379]      singularity_config_parse()                Finished parsing configuration file '/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=29379]      singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/usr/lib64'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(libexecdir, /usr/lib64) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'COMMAND' = 'exec'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(COMMAND, exec) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'MESSAGELEVEL' = '5'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(MESSAGELEVEL, 5) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'VERSION' = '2.3.1-dist'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(version, 2.3.1-dist) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'LOCALSTATEDIR' = '/var'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(localstatedir, /var) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'SYSCONFDIR' = '/etc'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(sysconfdir, /etc) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'BINDIR' = '/usr/bin'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(bindir, /usr/bin) = 0\nVERBOSE [U=0,P=29379]      singularity_registry_set()                Adding value to registry: 'IMAGE' = 'UbuntuTitan.img'\nDEBUG   [U=0,P=29379]      singularity_registry_set()                Returning singularity_registry_set(IMAGE, UbuntuTitan.img) = 0\nDEBUG   [U=0,P=29379]      singularity_registry_get()                Returning NULL on 'HOME'\nDEBUG   [U=0,P=29379]      singularity_registry_get()                Returning NULL on 'TARGET_UID'\nDEBUG   [U=0,P=29379]      singularity_registry_get()                Returning NULL on 'TARGET_GID'\nDEBUG   [U=0,P=29379]      singularity_priv_init()                   Initializing user info\nDEBUG   [U=0,P=29379]      singularity_priv_init()                   Set the calling user's username to: atj\nDEBUG   [U=0,P=29379]      singularity_priv_init()                   Marking uinfo structure as ready\nDEBUG   [U=0,P=29379]      singularity_priv_init()                   Obtaining home directory\nVERBOSE [U=0,P=29379]      singularity_priv_init()                   Set home (via getpwuid()) to: /ccs/home/atj\nVERBOSE [U=0,P=29379]      singularity_suid_init()                   Running SUID program workflow\nVERBOSE [U=0,P=29379]      singularity_suid_init()                   Checking program has appropriate permissions\nVERBOSE [U=0,P=29379]      singularity_suid_init()                   Checking configuration file is properly owned by root\nVERBOSE [U=0,P=29379]      singularity_suid_init()                   Checking if singularity.conf allows us to run as suid\nDEBUG   [U=0,P=29379]      singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow setuid, yes)\nDEBUG   [U=0,P=29379]      singularity_config_get_value_impl()       Returning configuration value allow setuid='yes'\nDEBUG   [U=0,P=29379]      singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow setuid, yes) = 1\nDEBUG   [U=0,P=2…",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/AdamSimpson|AdamSimpson>",
                "title": "#777 SLES11 failure due to PID namespace support",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/777",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498665170.346051",
        "date": 1498665170346
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#776 Add --bindlibs option' https://github.com/singularityware/singularity/issues/776 by ch741",
                "text": "It would be nice to have an option similar to --nv where the user can specify a library and singularity finds that library and binds it internally. Example:\n\nsingularity shell --bindlibs libcudnn.so:libmlx5-rdmav2.so cuda.img\n\nThis is more for convenience but it can simplify things a lot, especially on a cluster where libraries could be installed in various different places.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ch741|ch741>",
                "title": "#776 Add --bindlibs option",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/776",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498662016.983208",
        "date": 1498662016983
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311686846|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "Also note if this is changed, tmp is also used in some of the bootstrap scripts.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311686846|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498662001.974753",
        "date": 1498662001974
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311685559|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "text": "It's definitely a good idea to not hard code things. Is `--tmpdir` supported across all the systems / versions that Singularity needs to run on? For example --&gt; <https://code.kodo.org.uk/dom/buildroot/commit/53223cbb4e775ce88c036ddbfcca260e23c5739e>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/775#issuecomment-311685559|#775: Honor $TMPDIR instead of hardcoding /tmp>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498661795.882052",
        "date": 1498661795882
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#775 Honor $TMPDIR instead of hardcoding /tmp' https://github.com/singularityware/singularity/pull/775 by marcelm",
                "text": "This allows a user to choose where (some) temporary directories such as\n`.singularity-layers.XXXXXXXX` are placed by setting the `$TMPDIR` environment\nvariable. This may allow them, for example, to avoid running into limitations imposed on\n`/tmp` that are not in place for `$TMPDIR`.\n\nNotes:\n• Possibly `mktemp --tmpdir template.XXX` is not portable enough. Then `mktemp ${TMPDIR:-/tmp}/template.XXX` could be used instead.\n• It would be nice to set `$TMPDIR` once at the beginning if it is unset and then use only `$TMPDIR` subsequently instead of repeating `${TMPDIR:-/tmp}`. Autoconf uses `: ${TMPDIR=/tmp}` to achieve this.\n\n*Checkoff for all PRs:*\n\n• [X] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [X] I have tested this PR locally with a `make test`\n• [X] This PR is NOT against the project's master branch\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [X] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/marcelm|marcelm>",
                "title": "#775 Honor $TMPDIR instead of hardcoding /tmp",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/775",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498660387.277128",
        "date": 1498660387277
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-311671803|#701: Slurm plugin missing header>",
                "text": "This issue prevents us from upgrading to 2.3.1, because we need the `--with-slurm` and definitely the security fix. Are there any workarounds?",
                "pretext": "[singularityware/singularity] New comment by mbrt on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-311671803|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498659095.735740",
        "date": 1498659095735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311553309|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Very enlightening, thanks!\n\nHowever, there still appears to be an issue with automatically imported libraries. Using docker bootstrap (nvidia/cuda:8.0-cudnn5-devel-centos7 - I assume that this is what you meant as a container with CUDA, cuDNN but without driver), the following libraries are both inside the container and also auto-imported: \nlibcudart.so\nlibnvrtc-builtins.so\nlibnvrtc.so\nlibnvToolsExt.so\nlibOpenCL.so\n\nWith the exception of the last one, this may be the case of grep in argparser catching more than intended. Nevertheless, this should be fixed as it can cause problems when mixing different versions of kernel drivers and CUDA libraries",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311553309|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498624062.218987",
        "date": 1498624062218
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311509381|#749: Support singularity pull from quay.io>",
                "text": "@truatpasteurdotfr the cp --remove-destination happens on the host I believe.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311509381|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498604315.655577",
        "date": 1498604315655
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311505222|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "This is confusing.  And NVIDIA does little to unmuddy the waters.  :stuck_out_tongue_winking_eye: \n\nSo CUDA and the NVIDIA driver are 2 different things.  To understand what we are trying to map into the container at runtime, try this.  First download an NVIDIA driver .run file, extract it's contents and inspect them.  These are all of the things that are specific to a particular driver version and that we are trying to map into the container.  \n\nYou will see `libcuda.so` even though this is the _driver_ and not _CUDA_:\n```\n$ mkdir nvidia-stuffs &amp;&amp; cd nvidia-stuffs\n\n$ wget <http://us.download.nvidia.com/XFree86/Linux-x86_64/375.66/NVIDIA-Linux-x86_64-375.66.run>\n\n$ sh NVIDIA-Linux-x86_64-375.66.run --extract-only\n\n$ ls -l NVIDIA-Linux-x86_64-375.66/_cuda_\n-rwxr-xr-x 1 ubuntu ubuntu 8240968 May  1 21:40 NVIDIA-Linux-x86_64-375.66/libcuda.so.375.66\n-rwxr-xr-x 1 ubuntu ubuntu   60568 May  1 21:42 NVIDIA-Linux-x86_64-375.66/nvidia-cuda-mps-control\n-rw-r--r-- 1 ubuntu ubuntu    2044 May  1 21:42 NVIDIA-Linux-x86_64-375.66/nvidia-cuda-mps-control.1.gz\n-rwxr-xr-x 1 ubuntu ubuntu   46344 May  1 21:42 NVIDIA-Linux-x86_64-375.66/nvidia-cuda-mps-server\n```Now download CUDA and extract it's contents.  \n```\n$ wget <https://developer.nvidia.com/compute/cuda/8.0/Prod2/local_installers/cuda_8.0.61_375.26_linux-run>\n\n$ sh cuda_8.0.61_375.26_linux-run --extract=~/nvidia-stuffs/\n\n$ ls -l\n-rw-rw-r-- 1 ubuntu 1.4G Feb  2 00:17 cuda_8.0.61_375.26_linux-run\n-rwxrwxr-x 1 ubuntu 1.3G Jun 27 22:00 cuda-linux64-rel-8.0.61-21551265.run\n-rwxrwxr-x 1 ubuntu  97M Jun 27 22:00 cuda-samples-linux-8.0.61-21551265.run\n-rwxrwxr-x 1 ubuntu  73M Jun 27 22:00 NVIDIA-Linux-x86_64-375.26.run\ndrwxrwxr-x 7 ubuntu 4.0K Jun 27 21:48 NVIDIA-Linux-x86_64-375.66\n-rw-rw-r-- 1 ubuntu  72M May  2 16:17 NVIDIA-Linux-x86_64-375.66.run\n```\nYou'll notice that this actually only extracted 3 compressed archives (which will need to be extracted again in turn to be viewed).  One of the compressed archives is another NVIDIA driver installer!  That's NVIDIA's way of trying to confuse you.  You actually only need to run `cuda_8.0.61_375.26_linux-run` to install CUDA.  You can keep whatever driver you already have on the system.  So the contents of that file are things we _don't_ want to bind mount into the container, but we do want to install into the container along with our app.  As I mentioned above, starting with an NVIDIA container from Docker Hub is an easy way to do this.  It contains CUDA and optionally cuDNN, without the driver.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311505222|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498602847.365918",
        "date": 1498602847365
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311500492|#749: Support singularity pull from quay.io>",
                "text": "@vsoch busybox cp does not have the --remove-destination flag! but remove the destination before copying...\n```\nalpine:~$ cp --help\nBusyBox v1.26.2 (2017-06-11 06:38:32 GMT) multi-call binary.\n\nUsage: cp [OPTIONS] SOURCE... DEST\n\nCopy SOURCE(s) to DEST\n```-a  Same as -dpR\n-R,-r   Recurse\n-d,-P   Preserve symlinks (default if -R)\n-L  Follow all symlinks\n-H  Follow symlinks on command line\n-p  Preserve file attributes if possible\n-f  Overwrite\n-i  Prompt before overwrite\n-l,-s   Create (sym)links\n-u  Copy only newer files```\nalpine:~/cp.d$ echo a &gt; a\nalpine:~/cp.d$ echo b &gt; b\nalpine:~/cp.d$ ln -s b c\nalpine:~/cp.d$ ls -l\ntotal 8\n-rw-r--r--    1 tru      wheel            2 Jun 27 22:05 a\n-rw-r--r--    1 tru      wheel            2 Jun 27 22:05 b\nlrwxrwxrwx    1 tru      wheel            1 Jun 27 22:05 c -&gt; b\nalpine:~/cp.d$ head ?\n==&gt; a &lt;==\na\n\n==&gt; b &lt;==\nb\n\n==&gt; c &lt;==\nb\nalpine:~/cp.d$ type cp\ncp is hashed (/bin/cp)\nalpine:~/cp.d$ cp a c\nalpine:~/cp.d$ ls -l\ntotal 12\n-rw-r--r--    1 tru      wheel            2 Jun 27 22:05 a\n-rw-r--r--    1 tru      wheel            2 Jun 27 22:05 b\n-rw-r--r--    1 tru      wheel            2 Jun 27 22:06 c\nalpine:~/cp.d$ head ?\n==&gt; a &lt;==\na\n\n==&gt; b &lt;==\nb\n\n==&gt; c &lt;==\na\n```portable solution?\n```\n/bin/rm target &amp;&amp; /bin/cp -a source target\n```",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311500492|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498601365.038090",
        "date": 1498601365038
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311495325|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "OK, so now I am confused. \"--nv\" already imports libcuda*, isn't that part of CUDA itself?\n\nThe other issue is that there is no documentation on what the option is supposed to do.  From examining source, I assumed to was to automatically include CUDA libraries alongside kernel driver stuff. ",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311495325|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498599908.659507",
        "date": 1498599908659
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311491016|#749: Support singularity pull from quay.io>",
                "text": "oh my gosh this makes perfect sense! I was assessing a bunch of operating systems, busy box being one of them, and I did a simple algorithm that compared each OS against a version of itself, at each timepoint with one file removed, and I sorted by file date (meaning I removed newer ones first, so the base operating systems would be last). For most images I saw a nice downward trend, with a small constant line in the case of finding a symbolic link (because \"removing\" a symbolic link doesn't actually remove the file.) But for busybox I saw that (for it's tiny set of 441 file / folder things) *most* of them are symbolic links. I'm completely not surprised about the `resolv.conf` being one of them.\n\n• pre-bootstrap: we primarily load functions, make sure the root we are working at is defined, and we create the various metadata folders. We then dump environment starter templates into the base, and pass on to the bootstrap specific script, which in our case is docker...\n• docker api: the first relevant step in the docker driver is getting the list of .tar.gz layers, one of them being for the metadata folder. This is where the layers explode, and this is also where we would have the busybox `resolv.conf` dumped into the working container.\n• bootstrap-sections: we next generate a bunch of base folders that we expect to mount, and notably, there is this line:\n\n```test -d \"$SINGULARITY_ROOTFS/tmp\" || install -d -m 755 \"$SINGULARITY_ROOTFS/tmp\"\n```\n\nwhich shouldn't erase tmp still, because it is basically saying \"if I don't find tmp, create it with this permission\" You can try it like:\n\n```test -d \"/tmp\" || echo \"HELLO\"           # no output, /tmp exists\ntest -d \"/tmpmeatball\" || echo \"HELLO\"   # does not exist\nHELLO\n```\nBut then we do this:\n\n```mount --no-mtab --rbind \"/tmp\" \"$SINGULARITY_ROOTFS/tmp\"\n```\n\nso perhaps by this step, we have a link that is linked to a file that just got mounted over by the host's '/tmp'? Arguably that wouldn't matter if `/tmp` weren't to be bound again. Then what we do is copy our `/etc/resolv.conf` to the container:\n\n```cp /etc/resolv.conf     \"$SINGULARITY_ROOTFS/etc/resolv.conf\"\n```\nand to answer your question:\n\n&gt; &gt;  Is there a reason why Singularity will overwrite /etc/resolv.conf when it's a regular file, but not when it's a symlink?\nThe problem I think is summarized <https://stackoverflow.com/questions/9371222/cp-command-to-overwrite-the-destination-file-which-is-a-symbolic-link|here> - this copy command may have the content updated for the linked file (eg, copying to the symlink would mean that the `/tmp` file might have the correct content) but what appears to happen (according to the post) is that the file you (thought) you copied is still the link. The problem, then, is that when we try to do the bind, we skip it, because it's not a file:\n\n```DEBUG   [U=1000,P=22524]   container_file_bind()                     Called file_bind(/etc/resolv.conf, /etc/resolv.conf()\nVERBOSE [U=1000,P=22524]   container_file_bind()                     Skipping bind file, destination does not exist in container: /etc/resolv.conf\n```\n\nand then you see as you would expect, shelling into the container shows the resolv.conf is still linked to the one in `/tmp`, which actually now might be completely empty/weird because we did mounting of `tmp` during the bootstrap (I'm not sure). \n\n*TLDR*: Singularity will have the same behavior to try and mount the hosts resolv.conf regardless, unless there is an issue that it cannot. My best guesses for why Docker doesn't have a trouble with a symlink are 1) possibly because it is an isolated environment, and not trying to bind to the hosts, or 2) it doesn't do any kind of mounting of '/tmp', for work (at least I don't think).\n\nSo I think the extent to what Singularity could do is to add a `--remove-destination` to the copy of the file. This would make it an actual file, and it would bind to the user's,  and possibly work. I think generally it was a good move to remove essential files from `/tmp` - nothing that is needed to persist should be kept there, and perhaps in some older working strategy they would carry that file around in `/tmp` if another wasn't available?  ¯ `_`(ツ)_/¯ This is another strong point of evidence for having some sanity check / best practices for containers!\n\n@gmkurtzer what are your thoughts? Would the tweak of the `cp` possibly address this?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311491016|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498598844.355173",
        "date": 1498598844355
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311484340|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Sorry, let me try to give a concrete example.  Let's say I have a k80 with the latest greatest driver.  But my admin is lazy so we have CUDA 7.5.  I want to run the latest greatest TensorFlow, so I need CUDA 8.  I can install it in my container along with CUDA 8, but I need to either also install the driver (which means my container only works on machines with the exact same driver) or use `--nv`.  Right now, using `--nv` works.  But with your proposed change the CUDA in my container gets overwritten by 7.5 and my TensorFlow no longer works.  So now I'm out of options and I have to install both CUDA and the driver in my container and forget about the `--nv` option.  \n\nAs a note, the driver in the kernel doesn't have to match CUDA.  In fact, there is no such thing.  It just has be be sufficiently up to date to run whatever version of CUDA you are trying to use.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311484340|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498597308.877070",
        "date": 1498597308877
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311481775|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "Are you arguing for elimination of the \"--nv\" option?\n\nThe problem is that CUDA in the container cannot be truly portable, because it depends on the matching driver in kernel. There is no perfect solution here, you can either (i) create a container with CUDA matching the kernel driver, or (ii) use both libraries and kernel driver from the machine. \n\nMy commit is trying to improve (ii) to work seamlessly. A user may want to just use whatever is on the machine, this actually makes the container more portable rather than thinking about whether CUDA in the container matches kernel driver.  As long as we have \"--nv\" it may as well work correctly. ",
                "pretext": "[singularityware/singularity] New comment by mrmhodak on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311481775|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498596713.668053",
        "date": 1498596713668
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311477345|#749: Support singularity pull from quay.io>",
                "text": "This is more complicated than I originally thought... The <https://dx.doi.org/10.1093/bioinformatics/btx192#82803147|BioContainers paper> describes its method for auto-generating container images from <http://bioconda.github.io/|BioConda> packages---without Dockerfiles--- using a tool called <https://github.com/involucro/involucro|involucro>, and automatically pushing the resulting images to quay.io.\n\nIt appears that regular (non-Bio) conda packages are manually sprinkled into the mix, including m4, from a repository of \"mulled\" applications: <https://github.com/BioContainers/mulled/blob/master/packages.tsv>\nSo the recipe for m4 is in the conda repository: <https://github.com/conda/conda-recipes/blob/master/m4/meta.yaml>\n(The BioConda containers are \"auto-mulled\": <https://github.com/BioContainers/auto-mulled>)\n\nHowever, I think the issue is that one of the image layers (~/.singularity/docker/sha256:77c6c00e8b61bb628567c060b85690b0b0561bb37d8ad3f3792877bddcfe2500.tar.gz) appears to be an (old) busybox image:\n\n```\n$ singularity shell m4.img\nWARNING: Bind file destination does not exist in container: /var/lib/singularity/mnt/overlay/final/etc/resolv.conf\nSingularity: Invoking an interactive shell within container...\n\nSingularity&gt; busybox | head -n 1\nBusyBox v1.22.1 (2014-05-23 01:24:27 UTC) multi-call binary.\n```\n\nChecking BusyBox @ Docker Hub (<https://hub.docker.com/r/library/busybox/tags/>) for an image of similar vintage, I found:\n\n```\n$ singularity pull --size 64 docker://busybox:buildroot-2014.02\n...\n$ singularity shell busybox-buildroot-2014.02.img\nWARNING: Bind file destination does not exist in container: /var/lib/singularity/mnt/overlay/final/etc/resolv.conf\nSingularity: Invoking an interactive shell within container...\n\nSingularity&gt; busybox | head -n 1\nBusyBox v1.22.1 (2014-05-22 23:22:11 UTC) multi-call binary.\nSingularity&gt; ls -l /etc/resolv.conf\nlrwxrwxrwx    1 root     root            18 Feb 27  2014 /etc/resolv.conf -&gt; ../tmp/resolv.conf\n```\n\n...which sure enough, has /etc/resolv.conf symlinked to ../tmp/resolv.conf.\n\nI'm not sure if the BioContainers project could be easily persuaded to update all its container images to use a newer BusyBox image that doesn't have this symlink (and it looks like the ones subsequent to buildroot-2014.02 don't)... However, Docker does not have a problem with /etc/resolv.conf being a symlink. Is there a reason why Singularity will overwrite /etc/resolv.conf when it's a regular file, but not when it's a symlink?",
                "pretext": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311477345|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498595720.321982",
        "date": 1498595720321
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311476541|#774: Import Complete set of NVidia libraries with --nv>",
                "text": "I'm don't think this is something you actually want to do.  You _want_ to install CUDA into your container because there are many different versions of CUDA and you need the version that will work with your application.  \n\nThe way we are doing this now, you actually don't need to have CUDA installed on your host system.  That's desirable.  You also don't need to run the same version of CUDA in your container as that running on the host system.  In other words, the way we are currently doing it is portable.  This would make it less so.  \n\nIf installing CUDA is a hassle, try starting your build from one of <https://hub.docker.com/r/nvidia/cuda/|NVIDIA's Docker Hub CUDA containers>.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on pull request <https://github.com/singularityware/singularity/pull/774#issuecomment-311476541|#774: Import Complete set of NVidia libraries with --nv>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498595539.258389",
        "date": 1498595539258
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#774 Import Complete set of NVidia libraries with --nv' https://github.com/singularityware/singularity/pull/774 by mrmhodak",
                "text": "Currently, several NVidia CUDA libraries are omitted with --nv flag. This imports all libraries from cuda-8.0 and, among other things, allows running tensorflow_gpu without the need for installing cuda inside the container. Also removing redundant entry \"libnvcu\" , already caught by \"libnv\".\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/mrmhodak|mrmhodak>",
                "title": "#774 Import Complete set of NVidia libraries with --nv",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/774",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498595053.081694",
        "date": 1498595053081
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by flogo on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-311411590|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "text": "Issue #138 also seems closely related to this.",
                "pretext": "[singularityware/singularity] New comment by flogo on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-311411590|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498580802.787976",
        "date": 1498580802787
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by flogo on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-311402957|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "text": "This feature would be just what I was looking for. In my use-case, person A creates a bootstrap script (starting from a docker image and containing some `apt-get install` calls, so its hard to predict the size). Afterwards person B creates and bootstraps the container. So far, A has to tell B what size to use for the container or B has to try with different sizes. With the suggested `%size` field, this information could be part of the bootstrap script.\n\nAt this point it would also be nice to have `singularity pull BOOTSTRAP_SCRIPT NAME` as an alias for `singularity create --size [%size from BOOTSTRAP_SCRIPT] NAME &amp;&amp; singularity bootstrap NAME BOOTSTRAP_SCRIPT`, which is probably what you had in mind with the link to #531.",
                "pretext": "[singularityware/singularity] New comment by flogo on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-311402957|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498578979.059929",
        "date": 1498578979059
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-311369672|#735: Definition of Services - Feature for 2.4>",
                "text": "@bauerm97 so glad to hear about this effort! Keep me in the loop?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-311369672|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498572532.300304",
        "date": 1498572532300
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-311345345|#735: Definition of Services - Feature for 2.4>",
                "text": "@ArangoGutierrez Hi, do you have any more information regarding what you're trying to do with integrating Singularity into Kubernetes? We've been investigating this internally for several weeks and are looking for people that know what they're doing to help us out. We should sync up and communicate what the goal is on both ends of the pipeline. Please reach out to me by email at michael.bauer@rstor.io so we can collaborate on the development!!\n\n@gmkurtzer ",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-311345345|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498567112.428062",
        "date": 1498567112428
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/758|#758 Docker cleanup error on mounted files> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/758|#758 Docker cleanup error on mounted files> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498505250.916840",
        "date": 1498505250916
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-311157740|#758: Docker cleanup error on mounted files>",
                "text": "Excellent! Honestly, I don't know exactly what fixed it, but I'm just happy that the latest master is working as expected! Whew!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-311157740|#758: Docker cleanup error on mounted files>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498505249.916766",
        "date": 1498505249916
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-311156976|#727: home mount erase /usr/ in container>",
                "text": "Yep, this is expected behavior. ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-311156976|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498505053.851490",
        "date": 1498505053851
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311155451|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "Apologies, I am on email overload right now and missed this one.\n\nI did however just add it to master, so it will be in either 2.3.2, or 2.4, whichever gets released first.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311155451|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498504659.722979",
        "date": 1498504659722
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311154382|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "too late",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-311154382|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498504387.633662",
        "date": 1498504387633
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-311146640|#765: Legacy Testing for 2.2>",
                "text": "How far do we want to go back on this?  When I first wrote it, I envisioned only testing the last release.  Do we want to keep testing all the way back to 2.1 or just dump it in favor of 2.2?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/765#issuecomment-311146640|#765: Legacy Testing for 2.2>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498502567.989527",
        "date": 1498502567989
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New tag <https://github.com/singularityware/singularity/compare/2.3.1|2.3.1> was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New tag <https://github.com/singularityware/singularity/compare/2.3.1|2.3.1> was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498501153.472912",
        "date": 1498501153472
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/773#issuecomment-311135484|#773: added inspect command to help doc>",
                "text": "looks good to me!",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/773#issuecomment-311135484|#773: added inspect command to help doc>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498500093.095078",
        "date": 1498500093095
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#773 added inspect command to help doc' https://github.com/singularityware/singularity/pull/773 by GodloveD",
                "text": "*Description of the Pull Request (PR):*\n\nJust added a line to make the awesome `inspect` command more discoverable.  \n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/GodloveD|GodloveD>",
                "title": "#773 added inspect command to help doc",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/773",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498498982.681931",
        "date": 1498498982681
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311123024|#749: Support singularity pull from quay.io>",
                "image_url": "https://quay.io/static/img/quay_preview.png",
                "image_width": 427,
                "image_height": 211,
                "image_bytes": 13271,
                "text": "hey @nathanweeks do you know where the recipe for this container lives? I looked in the following places but couldn't find anything:\n\n• <https://bioconda.github.io/recipes/m4/README.html>\n• <https://quay.io/repository/biocontainers/m4>\n\nIs quay/biocontainers serving containers without sharing the metadata and recipes? It would be helpful to try and see what's going on. If it isn't available, can you find a container with this issue that does have a recipe available?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311123024|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498497213.057673",
        "date": 1498497213057
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311101264|#749: Support singularity pull from quay.io>",
                "text": "Hi @vsoch ,\n\nRegarding 1: that's good to know. All of the .gz files in my ~/.singularity/docker directory are valid compressed files, so that doesn't appear to have affected me thus far.\n\nRegarding 2: I see that in the singularity m4.img, the initial /etc/resolv.conf is a symbolic link:\n```Singularity&gt; ls -l /etc/resolv.conf\nlrwxrwxrwx    1 root     root            18 Feb 27  2014 /etc/resolv.conf -&gt; ../tmp/resolv.conf\n```\nI verified that by following the directions you provided to remove this /etc/resolv.conf symbolic link and replace it with an empty file, the next time I invoke ```singularity shell``` it is replaced by a working /etc/resolv.conf (looks like the one from the host OS).\n\nHowever, if I use docker to pull the image from quay.io, the resulting container has the same valid /etc/resolv.conf from the host OS without having to go through any workarounds (note that /etc/localtime doesn't exist, but I don't think that's as important):\n```\nubuntu@ubuntu-xenial:~$ docker pull quay.io/biocontainers/m4\n...\nubuntu@ubuntu-xenial:~$ docker image ls\nREPOSITORY                    TAG                 IMAGE ID            CREATED             SIZE\nquay.io/biocontainers/m4      latest              4941f1b3d523        17 months ago       5.74 MB\nubuntu@ubuntu-xenial:~$ docker run -it --entrypoint /bin/sh 4941f1b3d523\n/ # ls -l /etc/localtime\nls: /etc/localtime: No such file or directory\n/ # ls -l /etc/resolv.conf\n-rw-r--r--    1 root     root           195 Jun 26 14:47 /etc/resolv.conf\n/ # cat /etc/resolv.conf\n\n*Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)*\n\n*DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN*\n\nnameserver 10.0.2.3\nsearch my.domain.com\n/ # wget <http://www.google.com>\nConnecting to www.google.com (172.217.11.228:80)\nindex.html           100% |************************************************************************************************| 10354   0:00:00 ETA\n```",
                "pretext": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-311101264|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498492403.296968",
        "date": 1498492403296
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498423954.299460",
        "date": 1498423954299
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310927492|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "Awesome! Seg fault gone.",
                "pretext": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310927492|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498423954.299455",
        "date": 1498423954299
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310786173|#757: Too many levels of symbolic links>",
                "text": "FWIW, I have this issue with kernel 4.4.\n\nLe 23 juin 2017 6:02 PM, \"DrDaveD\" <mailto:notifications@github.com|notifications@github.com> a écrit :\n\n&gt; I have seen this also on Redhat EL6, attempting to automount a cvmfs\n&gt; filesystem. It seems to be a fundamental limitation of the 2.6 series\n&gt; kernel. It does not happen on Redhat EL7. It fails the same way for me on\n&gt; all versions of singularity.\n&gt; \n&gt; —\n&gt; You are receiving this because you authored the thread.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/757#issuecomment-310782727>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/ABDUFJvxz74dg8-5pvP_G1_i4G9SAIv4ks5sHDXhgaJpZM4N7g2G>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310786173|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498256699.862729",
        "date": 1498256699862
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/772#issuecomment-310785221|#772: add interpreter check on runscript during bootstrap>",
                "text": "and I'll add this note here too - if it's the case that it has to be /bin/sh, the workaround would be having the shell execute the script (with the correct interpreter)\n\n```\n%post\n...\nmkdir /code\n\n%runscript\nexec /opt/anaconda3/python /code/run.py\n\n%files\nrun.py /code/run.py\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/772#issuecomment-310785221|#772: add interpreter check on runscript during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498256298.786663",
        "date": 1498256298786
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#772 add interpreter check on runscript during bootstrap' https://github.com/singularityware/singularity/issues/772 by vsoch",
                "text": "If the user has provided a runscript with an interpreter specified, we shouldn't have !#/bin/sh also at the top. For example this:\n\n```\nBootstrap: docker\nFrom: centos:7\n\n%runscript\n#!/usr/bin/env python\nprint('hello')\n```\n\nshould not return this:\n\n```singularity inspect -r centos.img \n#!/bin/sh \n#!/usr/bin/env python\nprint('hello')\n```\n\nbut instead this:\n\n```singularity inspect -r centos.img \n#!/usr/bin/env python\nprint('hello')\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#772 add interpreter check on runscript during bootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/772",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498255990.726676",
        "date": 1498255990726
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-310783745|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "Can this get into singularity-2.3.1?  I don't see it in the master branch that I just built.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-310783745|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498255730.674235",
        "date": 1498255730674
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310782727|#757: Too many levels of symbolic links>",
                "text": "I have seen this also on Redhat EL6, attempting to automount a cvmfs filesystem.  It seems to be a fundamental limitation of the 2.6 series kernel.  It does not happen on Redhat EL7.  It fails the same way for me on all versions of singularity.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310782727|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498255328.588629",
        "date": 1498255328588
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310730822|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "Great catch! Just updated master with a fix, will you test please?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310730822|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498240186.860568",
        "date": 1498240186860
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310675786|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "A seg fault also occurs when no bind path is specified. Currently BIND_PATH_DEFAULT from src/util/config_defaults.h is set to an empty value but if it's set to a directory the seg fault disappears.",
                "pretext": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-310675786|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498227071.841370",
        "date": 1498227071841
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "text": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "id": 1,
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498227071.841369",
        "date": 1498227071841
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#771 Add MS_NODEV for overlayfs' https://github.com/singularityware/singularity/pull/771 by cclerget",
                "text": "All is in the title\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/cclerget|cclerget>",
                "title": "#771 Add MS_NODEV for overlayfs",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/771",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498226427.592003",
        "date": 1498226427592
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hsteininger on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-310662203|#701: Slurm plugin missing header>",
                "text": "Hi, are there any news about a patch to fix missing header for Slurm Intregation PlugIn.\n\nThanks.",
                "pretext": "[singularityware/singularity] New comment by hsteininger on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-310662203|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498223686.628320",
        "date": 1498223686628
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/770#issuecomment-310527154|#770: Mount check root owner for all cases.>",
                "text": "Looks great, thank you @cclerget!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/770#issuecomment-310527154|#770: Mount check root owner for all cases.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498173092.560582",
        "date": 1498173092560
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/770|#770 Mount check root owner for all cases.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/770|#770 Mount check root owner for all cases.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498173083.559073",
        "date": 1498173083559
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#770 Mount check root owner for all cases.' https://github.com/singularityware/singularity/pull/770 by cclerget",
                "text": "*Description of the Pull Request (PR):*\n\nAs discussed + fix type in src/export.c to pass export tests.\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/cclerget|cclerget>",
                "title": "#770 Mount check root owner for all cases.",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/770",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498161724.548458",
        "date": 1498161724548
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310164980|#769: When does %files run in bootstrap?>",
                "text": ":smile: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310164980|#769: When does %files run in bootstrap?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498069585.377317",
        "date": 1498069585377
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/769|#769 When does %files run in bootstrap?> by <https://github.com/lyon-fnal|lyon-fnal>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/769|#769 When does %files run in bootstrap?> by <https://github.com/lyon-fnal|lyon-fnal>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498069142.208702",
        "date": 1498069142208
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by lyon-fnal on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310163167|#769: When does %files run in bootstrap?>",
                "text": "Awesome! Thanks for the super-quick response and for updating the documentation (looks great). Sorry I didn't see #674 . That issue is the right place to continue. Thanks again! -- Adam",
                "pretext": "[singularityware/singularity] New comment by lyon-fnal on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310163167|#769: When does %files run in bootstrap?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498069142.208678",
        "date": 1498069142208
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310150097|#769: When does %files run in bootstrap?>",
                "text": "okey doke, I fixed it in three places (the page you referenced, content, and quickstart). Let me know if it looks good! <http://singularity.lbl.gov/bootstrap-image#files>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310150097|#769: When does %files run in bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498066258.122457",
        "date": 1498066258122
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310148095|#769: When does %files run in bootstrap?>",
                "text": "oh, and sure thing I can update the docs :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310148095|#769: When does %files run in bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498065827.959095",
        "date": 1498065827959
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310147913|#769: When does %files run in bootstrap?>",
                "text": "hey @lyon-fnal ! The files actually get copied after, and we are totally on the same page that this needs fixing, I think this is an easy milestone for 2.4. See the <https://github.com/singularityware/singularity/issues/674|issue here> for our previous discussion. As a workaround, you can create a `%setup` section and in it copy files from your host to `$SINGULARITY_ROOTFS`. Give that a go for now, and we will keep this open and add to 2.4 milestone!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/769#issuecomment-310147913|#769: When does %files run in bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498065787.943672",
        "date": 1498065787943
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#769 When does %files run in bootstrap?' https://github.com/singularityware/singularity/issues/769 by lyon-fnal",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nFiles in the `%files` section get copied before `%post` runs.\n\n*Actual behavior*\n\nFiles in `%files` are not copied in time for `%post`. Commands in `%post` that are expecting those files fail with file not found. \n\n*Comments*\n\nThe documentation (<http://singularity.lbl.gov/bootstrap-image>) doesn't say when files in `%files` get copied. I was assuming it was early in the bootstrap process (e.g. after `%setup` but before `%post`). It looks like it's after `%post`. Can the documentation be updated to make this clear -- or better, can the behavior change to run as suggested here? That way I won't need to do these copies within `%setup`. Thanks!",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/lyon-fnal|lyon-fnal>",
                "title": "#769 When does %files run in bootstrap?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/769",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498065519.844294",
        "date": 1498065519844
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#768 Development - arm/ARCH support in debootstrap' https://github.com/singularityware/singularity/pull/768 by remyd1",
                "text": "*Description of the Pull Request (PR):*\n\nI tested/built successfully singularity on my rapsberry PI 2, using this <http://singularity.lbl.gov/install-linux|tutorial> (BTW, I think it would be helpful to specify needed packages (_libtool, autotool, m4, autoconf, make, automake..._).\nFirst of all, I tested it with docker arm images, and as expected, it works.\n\nThen, I tried to use debootstrap (as I am using a raspbian image), but I faced some `arch` issues:\nIndeed, `uname -m` returned `armv7l` although I needed `armhf`.\n\nThis PR fixed this bug and allow us to specify an `arch` variable in the bootstrap section when using debootstrap.\nFor instance, you can change this:\n```BootStrap: debootstrap\nOSVersion: stable\nMirrorURL: http://ftp.acc.umu.se/mirror/raspbian/raspbian/\n```\n\nTo:\n```BootStrap: debootstrap\nOSVersion: stable\nMirrorURL: http://ftp.acc.umu.se/mirror/raspbian/raspbian/\nARCH: armhf\n```\n\nIf this variable is not defined it go back to the previous behaviour (but anyway, it works for ARM, because I check if I get `armv6l` (raspberry PI 1) or `armv7l` (PI 2 and maybe PI 3)).\nI think added others variables like `keyring` might also be useful.\n\n*This fixes or addresses the following GitHub issues:*\n\nI did not created any specific issue for this.\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n\nYes. I did not write any test for travis, because I tested it locally and I think the tests for bootstrap <https://github.com/singularityware/singularity/blob/master/tests/20-bootstrap.sh|are already written>\n\n• [ ] I have tested this PR locally with a `make test`\n     Yes. But I get an error at the end:\n\n```\n• singularity                                                                                   (retval=1) ERROR\n     Error loading functions: /usr/local/libexec/singularity/functions\n     Full output in: /tmp/stest.3musuT\n     ERROR: Failed running test: 10-help.sh\n     Makefile:828 : la recette pour la cible « test » a échouée\n     make: *** [test] Erreur 1\n     ```\n\nWhat is weird here, is that I did not change anything about it. I think it is due to another previous commit (not mine)... ?? Otherwise, can you help me to solve this ?\n\nOtherwise, `make` and `make install` work, as well as bootstraping containers and using singularity normally (after the install)...\n\n• [x] This PR is NOT against the project's master branch\n     PR using development branch.\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n     Yes, just done.\n• [x] This PR is ready for review and/or merge\n     Yes, it seems to be ready, according to github.\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/remyd1|remyd1>",
                "title": "#768 Development - arm/ARCH support in debootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/768",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498057862.807759",
        "date": 1498057862807
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310093261|#757: Too many levels of symbolic links>",
                "text": "A bit more on this.\n\nThe issue seems to be caused by autofs + kernel namespace <https://www.spinics.net/lists/autofs/msg01158.htm|1>. Disabling the autofs `umount` using `--timeout=0` works as a workaround.",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-310093261|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498054759.456898",
        "date": 1498054759456
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-310093094|#721: Could not mount Singularity overlay: No such device>",
                "text": "@gmkurtzer : my sys admin has changed the config file so that it runs for me on my machine.  She also told me that other machines with newer kernels worked fine.",
                "pretext": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-310093094|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498054722.441354",
        "date": 1498054722441
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/767#issuecomment-309951179|#767: singularityhub organization should provide registry images template to start with>",
                "text": "TOO MANY SINGULARITY TABS.... arrrrg",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/767#issuecomment-309951179|#767: singularityhub organization should provide registry images template to start with>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498014923.075513",
        "date": 1498014923075
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/767|#767 singularityhub organization should provide registry images template to start with> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/767|#767 singularityhub organization should provide registry images template to start with> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498014910.073772",
        "date": 1498014910073
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/767#issuecomment-309951155|#767: singularityhub organization should provide registry images template to start with>",
                "text": "oops wrong repo, lol.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/767#issuecomment-309951155|#767: singularityhub organization should provide registry images template to start with>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498014910.073764",
        "date": 1498014910073
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#767 singularityhub organization should provide registry images template to start with' https://github.com/singularityware/singularity/issues/767 by vsoch",
                "text": "ideally, the simple folder structure with build files could dynamically render into a simple (static) API that is built on pushes (jekyll maybe?) I need to think more about this.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#767 singularityhub organization should provide registry images template to start with",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/767",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498014897.072207",
        "date": 1498014897072
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309934407|#749: Support singularity pull from quay.io>",
                "text": "hey @nathanweeks ! A few things we learned:\n\n*1. Quay tar.gz download url refresh*\n\nWe sometimes for a layer would actually get an html page:\n```$ less /home/gmk/.singularity/docker/sha256:77c6c00e8b61bb628567c060b85690b0b0561bb37d8ad3f3792877bddcfe2500.tar.gz\n&lt;html&gt;\n  &lt;head&gt;\n    &lt;title&gt;Quay Loading&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/font-awesome/4.0.3/css/font-awesome.css\"&gt;\n    &lt;link rel=\"stylesheet\" href=\"//netdna.bootstrapcdn.com/bootstrap/3.0.0/css/bootstrap.no-icons.min.css\"&gt;\n    &lt;link href='//fonts.googleapis.com/css?family=Droid+Sans:400,700' rel='stylesheet' type='text/css'&gt;\n    &lt;style type=\"text/css\"&gt;\n      .information {\n         padding: 30px;\n         text-align: center;\n      }\n      .information h3 {\n         margin-bottom: 20px;\n      }\n    &lt;/style&gt;\n  &lt;/head&gt;\n  &lt;body&gt;\n    &lt;div class=\"information\"&gt;\n      &lt;img src=\"/static/img/Quay_horizontal_color.svg\" style=\"max-height: 50px;\"&gt;\n      &lt;h3&gt;Quay is currently loading&lt;/h3&gt;\n      &lt;h4&gt;\n        &lt;p&gt;Please wait and refresh the page shortly to try again.&lt;/p&gt;\n      &lt;/h4&gt;\n    &lt;/div&gt;\n  &lt;/body&gt;\n&lt;/html&gt;\n```\n\nNotice the message that Quay is loading \"please try again\" - this will trigger an ERROR when the layer is untarred, but what it means is that Quay is returning status code 200 when it shouldn't be, maybe something to ask them about.\n\nThe root of your issue is the file that is distributed with the image is weird, and @gmkurtzer was able to fix by just removing it and creating an empty one. Here is the quick fix:\n\n```\nsingularity pull -s 1024 docker://quay.io/biocontainers/m4\nsudo singularity exec -w m4.img rm -f /etc/resolv.conf\nsudo singularity exec -w m4.img touch /etc/resolv.conf\nsudo singularity exec -w m4.img touch /etc/localtime\nsingularity shell m4.img \nSingularity: Invoking an interactive shell within container...\nSingularity&gt; \n``\nand then wget works\n\n```Singularity&gt; wget http://www.google.com\nConnecting to www.google.com (216.58.219.36:80)\nindex.html           100% |*******************************| 11251   0:00:00 ETA\nSingularity&gt; \n```\n\nSo I think perhaps looks into the container generation, that might give hint to why the file is weird. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309934407|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498007572.193263",
        "date": 1498007572193
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309925570|#749: Support singularity pull from quay.io>",
                "text": "hey we've reproduced the error - looking into it now!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309925570|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498003575.651938",
        "date": 1498003575651
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309916894|#749: Support singularity pull from quay.io>",
                "text": "could you give me exact steps to reproduce?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309916894|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1498000101.091570",
        "date": 1498000101091
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309914624|#749: Support singularity pull from quay.io>",
                "text": "@vsoch: I don't have administrative access to that CentOS 6.7 cluster, but I just used Vagrant to spin up a fresh ubuntu/xenial64, and get a similar warning regarding the lack of resolve.conf (with a different pathname), though the warning regarding /etc/localtime is absent: \n\n```\nubuntu@ubuntu-xenial:~$ singularity pull --size 1024 docker://quay.io/biocontainers/m4\nDone. Container is at: m4.img\nubuntu@ubuntu-xenial:~$ singularity shell m4.img\nWARNING: Bind file destination does not exist in container: /var/lib/singularity/mnt/overlay/final/etc/resolv.conf\nSingularity: Invoking an interactive shell within container...\n\nSingularity&gt; ls /var/lib/singularity\nls: /var/lib/singularity: No such file or directory\nSingularity&gt; wget <http://www.google.com/>\nwget: bad address 'www.google.com'\n``` ",
                "pretext": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309914624|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497999300.941281",
        "date": 1497999300941
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309859581|#749: Support singularity pull from quay.io>",
                "text": "you are right @GodloveD ! Apologies for my misremember! I am thinking about this issue <https://github.com/singularityware/singularity/issues/682> with @pescobar and @gmkurtzer and @moskalenko. It seems like there are two issues, possibly related but I'm not sure. The first is missing the timezone, and the second is with regard to the session directory. The bind mount warnings are ok, but those particular locations are unexpected. Just for a sanity check - @nathanweeks did you completely remove the old singularity (as in,all the old libraries) and install afresh?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309859581|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497986096.052481",
        "date": 1497986096052
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/446|#446 Roadmap to unprivileged Docker Hub image import> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/446|#446 Roadmap to unprivileged Docker Hub image import> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497983707.174565",
        "date": 1497983707174
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309841949|#749: Support singularity pull from quay.io>",
                "text": "Hi @vsoch.  I'm sorry but I can't remember what this is in reference to.  Could you job my memory?  Did I file an issue?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309841949|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497982239.623758",
        "date": 1497982239623
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309837196|#749: Support singularity pull from quay.io>",
                "text": "I think we've seen some issues with time - @GodloveD could this be related?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309837196|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497981199.221209",
        "date": 1497981199221
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309835336|#721: Could not mount Singularity overlay: No such device>",
                "text": "sorry @sje30 -- I was too late to the game, glad to see the issue is mitigated ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309835336|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497980797.067736",
        "date": 1497980797067
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309826106|#721: Could not mount Singularity overlay: No such device>",
                "text": "Yep, thanks @sje30! I'm just surprised that overlay is not supported on that distribution.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309826106|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497978763.320278",
        "date": 1497978763320
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309825711|#721: Could not mount Singularity overlay: No such device>",
                "text": "thanks @gmkurtzer - see below.  does that tell you all you need?\n```\n\n*$ cat /etc/motd*\n\n Ubuntu 14.04.5 LTS (trusty) in DAMTP\n Host: mea, Group: CBI, Kernel: Linux 3.13.0-117-generic\n Avail Memory: 24105M, Swap: 7628M, Disk: 5888G\n Arch: x86_64, Intel(R) Xeon(R) CPU E5645 @ 2.40GHz [24 CPUs] @2395MHz\n\n* Maker: Dell, Model: Precision WorkStation T5500 Tower*\n\n$ uname -a\nLinux mea 3.13.0-117-generic #164-Ubuntu SMP Fri Apr 7 11:05:26 UTC 2017 x86_64 x86_64 x86_64 GNU/Linux\n```",
                "pretext": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309825711|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497978670.286805",
        "date": 1497978670286
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309822932|#721: Could not mount Singularity overlay: No such device>",
                "text": "Hi @sje30,\n\nWhat OS/kernel are you running?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309822932|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497978067.068426",
        "date": 1497978067068
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309822407|#721: Could not mount Singularity overlay: No such device>",
                "text": "Yes, that's how I fixed it in my case\n\nOn Jun 20, 2017 12:50, \"Stephen Eglen\" <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; Hi @yarikoptic <https://github.com/yarikoptic>\n&gt; I'm new to singularity, and just asked our sys admins to install it on our\n&gt; deptl unix machines.\n&gt; (Ubuntu 14.04.5 LTS (trusty)).\n&gt; \n&gt; Running the first example i get:\n&gt; \n&gt; $ singularity run shub://vsoch/singularity-images\n&gt; Progress |===================================| 100.0%\n&gt; ERROR  : Could not mount Singularity overlay: No such device\n&gt; ABORT  : Retval = 255\n&gt; \n&gt; Is the fix to edit /etc/singularity/singularity.conf to disable overlay?\n&gt; \n&gt; _ENABLE OVERLAY: [BOOL]_\n&gt; \n&gt; _DEFAULT: yes_\n&gt; \n&gt; _Enabling this option will make it possible to specify bind paths to locations_\n&gt; \n&gt; _that do not currently exist within the container._\n&gt; \n&gt; enable overlay = yes\n&gt; \n&gt; Thanks, stephen\n&gt; \n&gt; —\n&gt; You are receiving this because you commented.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/721#issuecomment-309819937>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AF3ZmgNguTizOj0fBkSQJYtP8rnJzIjdks5sF_hBgaJpZM4NvgOx>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309822407|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497977955.024660",
        "date": 1497977955024
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309819937|#721: Could not mount Singularity overlay: No such device>",
                "text": "Hi @yarikoptic \nI'm new to singularity, and just asked our sys admins to install it on our deptl unix machines.  \n(Ubuntu 14.04.5 LTS (trusty)).\n\nRunning the first example i get:\n```$ singularity run shub://vsoch/singularity-images\nProgress |===================================| 100.0% \nERROR  : Could not mount Singularity overlay: No such device\nABORT  : Retval = 255\n```\n\nIs the fix to edit  /etc/singularity/singularity.conf to disable overlay?\n\n```\n\n*ENABLE OVERLAY: [BOOL]*\n\n*DEFAULT: yes*\n\n*Enabling this option will make it possible to specify bind paths to locations*\n\n*that do not currently exist within the container.*\n\nenable overlay = yes\n```\n\nThanks, stephen",
                "pretext": "[singularityware/singularity] New comment by sje30 on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-309819937|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497977407.820225",
        "date": 1497977407820
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309815159|#749: Support singularity pull from quay.io>",
                "text": "Hi @vsoch,\n\nThanks for checking. I have no problems with specifying a tag, and I guess I'll have to wait for Quay.io to update to schema 2 to avoid having to overprovision the image size with the --size option. However, while specifying a tag and --size seems to cause the canu Singularity image to be successfully created:\n```$ singularity -vvvv pull --size 9182  docker://quay.io/biocontainers/canu:1.5--pl5.22.0_0\n...\nDone. Container is at: canu-1.5--pl5.22.0_0.img\n```\nI get warnings when I shell into it:\n```$ singularity shell canu-1.5--pl5.22.0_0.img\nWARNING: Non existant bind point (file) in container: '/etc/localtime'\nWARNING: Bind file destination does not exist in container: /var/singularity/mnt/container/etc/resolv.conf\nSingularity: Invoking an interactive shell within container...\n```\nIt looks like /var/singularity doesn't exist, the lack of resolv.conf affects DNS resolution, and \"df\" emits many errors about /var/singularity/mnt/session not existing:\n```Singularity canu-1.5--pl5.22.0_0.img:~&gt; ls /var/   \ncache   lib     lock    log     pcmcia  run     spool   tmp     www   \nSingularity canu-1.5--pl5.22.0_0.img:~&gt; wget http://www.google.com/\nwget: bad address 'www.google.com'\nSingularity canu-1.5--pl5.22.0_0.img:~&gt; df\ndf: /var/singularity/mnt/session: No such file or directory\ndf: /var/singularity/mnt/session: No such file or directory\ndf: /var/singularity/mnt/session: No such file or directory\n...\n```\n\nThis also happens when I use @dctrud 's ```singularity -vvvv pull --size 4096 docker://quay.io/biocontainers/m4``` example.\n\nI haven't seen this issue occur for Singularity images created from Docker Hub, just Quay.io.",
                "pretext": "[singularityware/singularity] New comment by nathanweeks on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309815159|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497976367.440843",
        "date": 1497976367440
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309783076|#749: Support singularity pull from quay.io>",
                "text": "Hey @dctrud ! We do support both manifest versions, and what we are able to do with the images (eg estimate size) has a dependency on that. It looks like the camu image has the following tags:\n\n```In [15]: image.get_tags()\nVERBOSE Obtaining tags: https://quay.io/v2/biocontainers/canu/tags/list\nDEBUG GET https://quay.io/v2/biocontainers/canu/tags/list\nOut[15]: \n[u'1.3--0',\n u'1.4--1',\n u'1.4--pl5.22.0_2',\n u'1.5--pl5.22.0_0',\n u'1.5--pl5.22.0_1']\n```\n\nso given that you want a tag, and you don't know latest, you should specify it, here is internally what happens when you ask for latest (that doesn't exist):\n\n```image.get_manifest()\nVERBOSE Obtaining manifest: https://quay.io/v2/biocontainers/canu/manifests/latest\nDEBUG GET https://quay.io/v2/biocontainers/canu/manifests/latest\nDEBUG Http Error with code 404\nOut[17]: \n{u'errors': [{u'code': u'MANIFEST_UNKNOWN',\n   u'detail': {},\n   u'message': u'manifest unknown'}]}\n```\n\nbut if I specify the tag:\n\n```\nIn [19]: image=DockerApiConnection(image='quay.io/biocontainers/canu:1.4--1')\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: quay.io\nVERBOSE Namespace: biocontainers\nVERBOSE Repo Name: canu\nVERBOSE Repo Tag: 1.4--1\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://quay.io/v2/biocontainers/canu/tags/list>\nDEBUG GET <https://quay.io/v2/biocontainers/canu/tags/list>\nVERBOSE3 Response on obtaining token is None.\n\nIn [20]: m=image.get_manifest()\nVERBOSE Obtaining manifest: <https://quay.io/v2/biocontainers/canu/manifests/1.4--1>\nDEBUG GET <https://quay.io/v2/biocontainers/canu/manifests/1.4--1>\n```\n\nI get the manifest:\n\n```m[\"schemaVersion\"]\n1\n```\n\nand the images too:\n\n```image.get_images()\nVERBOSE Obtaining manifest: https://quay.io/v2/biocontainers/canu/manifests/1.4--1\nDEBUG GET https://quay.io/v2/biocontainers/canu/manifests/1.4--1\nDEBUG Image manifest version 2.1 found.\nDEBUG Adding digest sha256:a20d56eb049ee07edb390a4d4be1c50e555ea77ebc02c02d45cf219c21b22354\nDEBUG Adding digest sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\nDEBUG Adding digest sha256:10c3bb32200bdb5006b484c59b5f0c71b4dbab611d33fca816cd44f9f5ce9e3c\nDEBUG Adding digest sha256:dfda3e01f2b637b7b89adb401f2f763d592fcedd2937240e2eb3286fabce55f0\nDEBUG Adding digest sha256:d2ba336f2e4458a9223203bf17cc88d77e3006d9cbf4f0b24a1618d0a5b82053\nDEBUG Adding digest sha256:7ff999a2256f84141f17d07d26539acea8a4d9c149fefbbcc9a8b4d15ea32de7\nDEBUG Adding digest sha256:00cf8b9f3d2a08745635830064530c931d16f549d031013a9b7c6535e7107b88\nDEBUG Adding digest sha256:3aaade50789a6510c60e536f5e75fe8b8fc84801620e575cb0435e2654ffd7f6\nDEBUG Adding digest sha256:77c6c00e8b61bb628567c060b85690b0b0561bb37d8ad3f3792877bddcfe2500\nOut[23]: \n[u'sha256:a20d56eb049ee07edb390a4d4be1c50e555ea77ebc02c02d45cf219c21b22354',\n u'sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4',\n u'sha256:10c3bb32200bdb5006b484c59b5f0c71b4dbab611d33fca816cd44f9f5ce9e3c',\n u'sha256:dfda3e01f2b637b7b89adb401f2f763d592fcedd2937240e2eb3286fabce55f0',\n u'sha256:d2ba336f2e4458a9223203bf17cc88d77e3006d9cbf4f0b24a1618d0a5b82053',\n u'sha256:7ff999a2256f84141f17d07d26539acea8a4d9c149fefbbcc9a8b4d15ea32de7',\n u'sha256:00cf8b9f3d2a08745635830064530c931d16f549d031013a9b7c6535e7107b88',\n u'sha256:3aaade50789a6510c60e536f5e75fe8b8fc84801620e575cb0435e2654ffd7f6',\n u'sha256:77c6c00e8b61bb628567c060b85690b0b0561bb37d8ad3f3792877bddcfe2500']\n```\n\nThe reason we default to latest and then fail is because the user should be specific about the tag. There is no good programmatic way to determine which tag is \"best.\"  On command line you would need to do:\n\n```singularity pull --size 4096 docker://quay.io/biocontainers/canu:1.4--1\nInitializing Singularity image subsystem\nOpening image file: canu-1.4--1.img\nCreating 4096MiB image\nBinding image to loop\nCreating file system within image\nImage is done: canu-1.4--1.img\nDocker image path: quay.io/biocontainers/canu:1.4--1\nCache folder set to /home/vanessa/.singularity/docker\n[1/8] ||----------------------------------|   0.0% \n```\n\nFor the error with --size, there is just no (currently) good way to get it from a version 1 manifest, so our options are to estimate (and then most likely fail) or have the user specify. I think it's less frustrating to fail immediately and then specify then to start download and extraction, and then fail after already having waited a bit for that.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309783076|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497970385.936144",
        "date": 1497970385936
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-309741413|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Hey @gmkurtzer \n\nI have this output for these files:\n```drwx------ 3 my_user mics 4096 Jun 20 14:31 .singularity-runtime.jmhW3y8Z\n-rw-r--r-- 1 my_user mics 1572864 Jun  5 05:09 .singularity-runtime.jmhW3y8Z/centos/var/lib/rpm/Providename\ndrwxr-xr-x 2 my_user mics 4096 Jun 20 14:32 .singularity-runtime.jmhW3y8Z/centos/var/lib/rpm\n```\n\nI also noticed a strange behavior when I launch several times the same \"singularity exec\" like:\n```bash\n#PBS -S /bin/bash\n#PBS -j oe\n#PBS -o logs/\n#PBS -l walltime=12:00:00\n#PBS -l select=1:ncpus=4:mem=20gb\n#PBS -q haswellq\n\ncd $PBS_O_WORKDIR\n\nmkdir $PBS_JOBID\n\ncp p.txt $PBS_JOBID/\n\npushd $PBS_JOBID\n\nexport SINGULARITY_LOCALCACHEDIR=`pwd`\n\n#Nothing here\nls -al .*\n\n#First try\ntime singularity --debug exec docker://centos cat /etc/redhat-release\nls -al .\nls -l .singularity-runtime._/centos/var/lib/rpm/Providename\nls -ld .singularity-runtime._/centos/var/lib/rpm\n\n#Second try\ntime singularity --debug exec docker://centos cat /etc/redhat-release\nls -al .\nls -l .singularity-runtime._/centos/var/lib/rpm/Providename\nls -ld .singularity-runtime._/centos/var/lib/rpm\n\n#Third try\ntime singularity --debug exec docker://centos cat /etc/redhat-release\nls -al .\nls -l .singularity-runtime._/centos/var/lib/rpm/Providename\nls -ld .singularity-runtime._/centos/var/lib/rpm\n\nls -al .*\n\ncp y.txt ..\n\npopd\n\n#rm -rf $PBS_JOBID\n```\nIt will create several singularity-runtime folder but they will be deleted at a moment when they do a new singularity exec hence the last one is not deleted.\n\nMaybe there is a threaded process that is not able to finish before the end of the qsub ? (but I tried a sleep at the end and it did not change anything)\n\nI put the output file of the previous pbs script in attachment.\n<https://github.com/singularityware/singularity/files/1088145/299625.fusion.OU.txt|299625.fusion.OU.txt>",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-309741413|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497962664.989924",
        "date": 1497962664989
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#766 Binding a directory during bootstrap' https://github.com/singularityware/singularity/issues/766 by DeepHorizons",
                "text": "Is there a way to bind directories during the bootstrap process (Or allow the --nv option)? I'm trying to build some packages that need to link against some drivers and it would be nice to not bake in drivers.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DeepHorizons|DeepHorizons>",
                "title": "#766 Binding a directory during bootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/766",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497961696.725249",
        "date": 1497961696725
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309734046|#727: home mount erase /usr/ in container>",
                "text": "Hi gmkurtzer,\nwith enabled overlayFS (`enable overlay = yes`) the mount works fine. With disabled `enable overlay = no` overlay `/usr/` is empty. Here is the log for disabled overlayFS:\n\n`singularity --debug shell /local/scratch/ssd/mschnepf/slc6-pilot.img\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-dist\nExec'ing: /usr/local/libexec/singularity/cli/shell.exec\nEvaluating args: '/local/scratch/ssd/mschnepf/slc6-pilot.img'\nVERBOSE [U=0,P=114254]     message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Initialize configuration file: /usr/local/etc/singularity/singularity.conf\nDEBUG   [U=0,P=114254]     singularity_config_parse()                Starting parse of configuration file /usr/local/etc/singularity/singularity.conf\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key max loop devices = '256'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key allow pid ns = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key config passwd = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount home = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key bind path = '/etc/localtime'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key enable overlay = 'no'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=114254]     singularity_config_parse()                Got config key sessiondir max size = '16'\nDEBUG   [U=0,P=114254]     singularity_config_parse()                Finished parsing configuration file '/usr/local/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=114254]     singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/usr/local/libexec'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(libexecdir, /usr/local/libexec) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'COMMAND' = 'shell'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(COMMAND, shell) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'MESSAGELEVEL' = '5'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(MESSAGELEVEL, 5) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'VERSION' = '2.3-dist'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(version, 2.3-dist) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'LOCALSTATEDIR' = '/usr/local/var'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(localstatedir, /usr/local/var) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'SYSCONFDIR' = '/usr/local/etc'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(sysconfdir, /usr/local/etc) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'BINDIR' = '/usr/local/bin'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(bindir, /usr/local/bin) = 0\nVERBOSE [U=0,P=114254]     singularity_registry_set()                Adding value to registry: 'IMAGE' = '/local/scratch/ssd/mschnepf/slc6-pilot.img'\nDEBUG   [U=0,P=114254]     singularity_registry_set()                Returning singularity_registry_set(IMAGE, /local/scratch/ssd/mschnepf/slc6-pilot.img) = 0\nDEBUG   [U=0,P=114254]     singularity_registry_get()                Returning NULL on 'HOME'\nDEBUG   [U=0,P=114254]     singularity_registry_get()                Returning NULL on 'TARGET_UID'\nDEBUG   [U=0,P=114254]     singularity_registry_get()                Returning NULL on 'TARGET_GID'\nDEBUG   [U=0,P=114254]     singularity_priv_init()                   Initializing user info\nDEBUG   [U=0,P=114254]     singularity_priv_init()                   Set the calling user's username to: mschnepf\nDEBUG   [U=0,P=114254]     singularity_priv_init()                   Marking uinfo structure as ready\nDEBUG   [U=0,P=114254]     singularity_priv_init()                   Obtaining home directory\nVERBOSE [U=0,P=114254]     singularity_priv_init()                   Set home (via getpwuid()) to: /usr/users/mschnepf\nVERBOSE [U=0,P=114254]     singularity_suid_init()                   Running SUID program workflow\nVERBOSE [U=0,P=114254]     singularity_suid_init()                   Checking program has appropriate permissions\nVERBOSE [U=0,P=114254]     singularity_suid_init()                   Checking configuration file is properly owned by root\nVERBOSE [U=0,P=114254]     singularity_suid_init()                   Checking if singularity.conf allows us to run as suid\nDEBUG   [U=0,P=114254]     singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow setuid, yes)\nDEBUG   [U=0,P=114254]     singularity_config_get_value_impl()       Returning configuration value allow setuid='yes'\nDEBUG   [U=0,P=114254]     singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow setuid, yes) = 1\nDEBUG   [U=0,P=114254]     singularity_registry_get()                Returning NULL on 'NOSUID'\nVERBOSE [U=0,P=114254]     singularity_priv_userns()                 Invoking the user namespace\nDEBUG   [U=0,P=114254]     singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow user ns, yes)\nDEBUG   [U=0,P=114254]     singularity_config_get_value_impl()       No configuration entry found for 'allow user ns'; returning default value 'yes'\nDEBUG   [U=0,P=114254]     singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow user ns, yes) = 1\nVERBOSE [U=0,P=114254]     singularity_priv_userns()                 Not virtualizing USER namespace: running as SUID\nDEBUG   [U=0,P=114254]     singularity_priv_userns()                 Returning singularity_priv_init(void)\nDEBUG   [U=0,P=114254]     singularity_priv_drop()                   Dropping privileges to UID=12089, GID=1200 (4 supplementary GIDs)\nDEBUG   [U=0,P=114254]     singularity_priv_drop()                   Restoring supplementary groups\nDEBUG   [U=12089,P=114254] singularity_priv_drop()                   Confirming we have correct UID/GID\nDEBUG   [U=12089,P=114254] singularity_runtime_ns()                  Calling: _singularity_runtime_ns_pid()\nDEBUG…",
                "pretext": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309734046|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497960725.483954",
        "date": 1497960725483
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309666828|#760: Lack of username causes singularity to abort>",
                "text": "That's right, we disabled a few of the settings to get it working. I'm at ISC this week but will test it as soon as I can. Thanks for the quick fix!",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309666828|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497943192.380403",
        "date": 1497943192380
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309613803|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "Hi @hra0031,\n\nI think I follow your point, and it is a good question with an unfortunate lack of a good answer. In short, running containers directly via a Docker URI is not the preferred workflow and as a result, the internal code is not optimized for that runtime condition. With that said, this is not a good excuse, so this will be considered a code fix for the next major version. Unfortunately, I can't slip it in as a point release because it will require a significant amount of code changes.\n\nTo summarize: Creation of bind points should not be blindly skipped if overlay is not supported or enabled. It is quite possible for these bind points to be created if the file system is a non-persistent user owned directory (e.g. as is when invoking an action against a Docker URI).\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309613803|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497920227.596617",
        "date": 1497920227596
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#765 Legacy Testing for 2.2' https://github.com/singularityware/singularity/issues/765 by vsoch",
                "text": "If you look in the `.travis.yml` we have legacy testing for 2.1:\n\n<https://github.com/singularityware/singularity/blob/master/.travis.yml>\n\nWe need to add this for 2.2 as well.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#765 Legacy Testing for 2.2",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/765",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497919942.561331",
        "date": 1497919942561
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309610482|#727: home mount erase /usr/ in container>",
                "text": "Hi @mschnepf,\n\nIn the debug output, it seems like Singularity is doing the right thing so perhaps I misunderstood. With overlay enabled, Singularity is not masking the `/usr` directory and everything is working properly?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309610482|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497918759.400904",
        "date": 1497918759400
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309557001|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "text": "NB - current hacky workaround is to add...\n\n```os.environ['http_proxy'] = \"http://host:port\"\nos.environ['https_proxy'] = \"http://host:port\"\n```\n... into `libexec/python/base.py` before the urllib import lines.",
                "pretext": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309557001|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497902491.682601",
        "date": 1497902491682
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309539084|#749: Support singularity pull from quay.io>",
                "text": "Here's an example manifest returned from quay.io for the m4 biocontainer (chosen since it does have a latest tag)\n\n<https://quay.io/v2/biocontainers/m4/manifests/latest>\n<https://gist.github.com/dctrud/24c57e176374ffbf508b9399f32f7349>\n\nLooks like quay.io is using manifest-v2-1 (which has fsLayers with no size), where singularity is expecting manifest-v2-2 (layers with size).\n\n<https://docs.docker.com/registry/spec/manifest-v2-1/>\n<https://docs.docker.com/registry/spec/manifest-v2-2/>",
                "pretext": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-309539084|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497899709.773027",
        "date": 1497899709773
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309488153|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "text": "We could try passing the proxy through to the python... maybe as an environment variable? @gmkurter is this safe to try?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309488153|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497888550.806302",
        "date": 1497888550806
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309481693|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "text": "I guess a fix would be similar to #761 assuming it's considered safe to pass through the http_proxy and https_proxy envs?",
                "pretext": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309481693|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497887293.309989",
        "date": 1497887293309
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309480774|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "text": "NB - I can workaround by doing an unpriveleged `singularity pull` (which uses proxy OK) and then scripting changes to the resulting container - but to be able to do a one step bootstrap would be nice.",
                "pretext": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/764#issuecomment-309480774|#764: Cannot bootstrap from docker behind proxy - required envs are being sanitized.>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497887118.240337",
        "date": 1497887118240
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#764 Cannot bootstrap from docker behind proxy - required envs are being sanitized.' https://github.com/singularityware/singularity/issues/764 by dctrud",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nWhen an http/https proxy must be used, singularity should be able to bootstrap a definition that is importing from docker hub / other registry.\n\n*Actual behavior*\n\nProxy environment variables do not reach the python urllib(2) code that is used to connect to the docker registry, so the connection fails and it is not possible to bootstrap from docker behind a proxy.\n\nDef file..\n```BootStrap: docker\nFrom: biocontainers/abyss\nIncludeCmd: yes\n```\n\nCommand..\n```sudo http_proxy=http://proxy.swmed.edu:3128 /cm/shared/apps/singularity/2.3/bin/singularity bootstrap tmp/ Singularity\n```\n\nProcesses spawned..\n```root     12413  1.7  0.0 178008  2712 pts/5    S+   10:34   0:00 sudo HTTPS_PROXY=http://proxy.swmed.edu:3128 /cm/shared/apps/singularity/2.3/bin/singularity bootstrap tmp/ Singularity\nroot     12424  3.2  0.0  11332  1300 pts/5    S+   10:34   0:00 /bin/bash /cm/shared/apps/singularity/2.3/libexec/singularity/bootstrap-scripts/main-deffile.sh\nroot     12464  0.6  0.0  11332  1300 pts/5    S+   10:34   0:00 /bin/bash /cm/shared/apps/singularity/2.3/libexec/singularity/bootstrap-scripts/deffile-driver-docker.sh\nroot     12472 18.6  0.0 107020  9508 pts/5    S+   10:34   0:00 python /cm/shared/apps/singularity/2.3/libexec/singularity/python/import.py\n```\n\nChecking environments for the deeper processes, we see the proxy environment var is not available:\n\n```dtrudgian@Nucleus006:/proc/11829\n10:34 AM $ sudo grep proxy /proc/12424/environ\ndtrudgian@Nucleus006:/proc/11829\n10:34 AM $ sudo grep proxy /proc/12464/environ\ndtrudgian@Nucleus006:/proc/11829\n10:34 AM $ sudo grep proxy /proc/12472/environ\n```\n\nTherefore, proxy is not used and the import fails:\n\n```Sanitizing environment\nBuilding from bootstrap definition recipe\nAdding base Singularity environment to container\nTraceback (most recent call last):\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/import.py\", line 107, in &lt;module&gt;\n    main()\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/import.py\", line 83, in main\n    layerfile=LAYERFILE)\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/docker/main.py\", line 82, in IMPORT\n    client = DockerApiConnection(image=image,auth=auth)\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/docker/api.py\", line 83, in __init__\n    self.load_image(kwargs['image'])\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/docker/api.py\", line 120, in load_image\n    self.update_token()\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/docker/api.py\", line 131, in update_token\n    response = self.get_tags(return_response=True)\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/docker/api.py\", line 217, in get_tags\n    return_response=return_response)\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/base.py\", line 247, in get\n    return_response=return_response)\n  File \"/cm/shared/apps/singularity/2.3/libexec/singularity/python/base.py\", line 264, in submit_request\n    response = urlopen(request)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 126, in urlopen\n    return _opener.open(url, data, timeout)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 391, in open\n    response = self._open(req, data)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 409, in _open\n    '_open', req)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 369, in _call_chain\n    result = func(*args)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 1198, in https_open\n    return self.do_open(httplib.HTTPSConnection, req)\n  File \"/usr/lib64/python2.6/urllib2.py\", line 1165, in do_open\n    raise URLError(err)\nurllib2.URLError: &lt;urlopen error [Errno 110] Connection timed out&gt;\n```\n\nCan http_proxy, https_proxy be passed through during the environment sanitization?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/dctrud|dctrud>",
                "title": "#764 Cannot bootstrap from docker behind proxy - required envs are being sanitized.",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/764",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497886853.134659",
        "date": 1497886853134
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309468018|#727: home mount erase /usr/ in container>",
                "text": "Hi,\n\nhere the debug output with 'enable overlay = yes' where the mount work fine:\n\n`singularity --debug shell /local/scratch/ssd/mschnepf/slc6-pilot.img\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-dist\nExec'ing: /usr/local/libexec/singularity/cli/shell.exec\nEvaluating args: '/local/scratch/ssd/mschnepf/slc6-pilot.img'\nVERBOSE [U=0,P=114529]     message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Initialize configuration file: /usr/local/etc/singularity/singularity.conf\nDEBUG   [U=0,P=114529]     singularity_config_parse()                Starting parse of configuration file /usr/local/etc/singularity/singularity.conf\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key max loop devices = '256'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key allow pid ns = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key config passwd = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount home = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key bind path = '/etc/localtime'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key enable overlay = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=114529]     singularity_config_parse()                Got config key sessiondir max size = '16'\nDEBUG   [U=0,P=114529]     singularity_config_parse()                Finished parsing configuration file '/usr/local/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=114529]     singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/usr/local/libexec'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(libexecdir, /usr/local/libexec) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'COMMAND' = 'shell'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(COMMAND, shell) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'MESSAGELEVEL' = '5'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(MESSAGELEVEL, 5) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'VERSION' = '2.3-dist'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(version, 2.3-dist) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'LOCALSTATEDIR' = '/usr/local/var'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(localstatedir, /usr/local/var) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'SYSCONFDIR' = '/usr/local/etc'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(sysconfdir, /usr/local/etc) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'BINDIR' = '/usr/local/bin'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(bindir, /usr/local/bin) = 0\nVERBOSE [U=0,P=114529]     singularity_registry_set()                Adding value to registry: 'IMAGE' = '/local/scratch/ssd/mschnepf/slc6-pilot.img'\nDEBUG   [U=0,P=114529]     singularity_registry_set()                Returning singularity_registry_set(IMAGE, /local/scratch/ssd/mschnepf/slc6-pilot.img) = 0\nDEBUG   [U=0,P=114529]     singularity_registry_get()                Returning NULL on 'HOME'\nDEBUG   [U=0,P=114529]     singularity_registry_get()                Returning NULL on 'TARGET_UID'\nDEBUG   [U=0,P=114529]     singularity_registry_get()                Returning NULL on 'TARGET_GID'\nDEBUG   [U=0,P=114529]     singularity_priv_init()                   Initializing user info\nDEBUG   [U=0,P=114529]     singularity_priv_init()                   Set the calling user's username to: mschnepf\nDEBUG   [U=0,P=114529]     singularity_priv_init()                   Marking uinfo structure as ready\nDEBUG   [U=0,P=114529]     singularity_priv_init()                   Obtaining home directory\nVERBOSE [U=0,P=114529]     singularity_priv_init()                   Set home (via getpwuid()) to: /usr/users/mschnepf\nVERBOSE [U=0,P=114529]     singularity_suid_init()                   Running SUID program workflow\nVERBOSE [U=0,P=114529]     singularity_suid_init()                   Checking program has appropriate permissions\nVERBOSE [U=0,P=114529]     singularity_suid_init()                   Checking configuration file is properly owned by root\nVERBOSE [U=0,P=114529]     singularity_suid_init()                   Checking if singularity.conf allows us to run as suid\nDEBUG   [U=0,P=114529]     singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow setuid, yes)\nDEBUG   [U=0,P=114529]     singularity_config_get_value_impl()       Returning configuration value allow setuid='yes'\nDEBUG   [U=0,P=114529]     singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow setuid, yes) = 1\nDEBUG   [U=0,P=114529]     singularity_registry_get()                Returning NULL on 'NOSUID'\nVERBOSE [U=0,P=114529]     singularity_priv_userns()                 Invoking the user namespace\nDEBUG   [U=0,P=114529]     singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow user ns, yes)\nDEBUG   [U=0,P=114529]     singularity_config_get_value_impl()       No configuration entry found for 'allow user ns'; returning default value 'yes'\nDEBUG   [U=0,P=114529]     singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow user ns, yes) = 1\nVERBOSE [U=0,P=114529]     singularity_priv_userns()                 Not virtualizing USER namespace: running as SUID\nDEBUG   [U=0,P=114529]     singularity_priv_userns()                 Returning singularity_priv_init(void)\nDEBUG   [U=0,P=114529]     singularity_priv_drop()                   Dropping privileges to UID=12089, GID=1200 (4 supplementary GIDs)\nDEBUG   [U=0,P=114529]     singularity_priv_drop()                   Restoring supplementary groups\nDEBUG   [U=12089,P=114529] singularity_priv_drop()                   Confirming we have correct UID/GID\nDEBUG   [U=12089,P=114529] singularity_runtime_ns()                  Calling: _singularity_runtime_ns_pid()\nDEBUG   [U=12089,P=114529] singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allo…",
                "pretext": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309468018|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497884622.230751",
        "date": 1497884622230
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/752#issuecomment-309454125|#752: if extraction of pulled image fails -- leaves it compressed>",
                "text": "here is a snippet to make a drive as small as you like and to demonstrate original issue so you could try replicating on your box... I am trying to stay away from deploying outside of the packaged version since forgotten local install already caused us some pains in the past ;)\n\n```shell\nhopa:/tmp\n$&gt; d=/tmp/tmpdrive; im=shub://vsoch/singularity-hello-world; mkdir -p $d; sudo mount -t tmpfs -o size=70024k tmpfs $d; df -h $d; cd $d; singularity pull $im; sudo mount -o remount,size=1024m $d; singularity pull $im; ./singularity-hello-world-master.img; ls -l; builtin cd /tmp/; sudo umount $d         \nFilesystem      Size  Used Avail Use% Mounted on\ntmpfs            69M     0   69M   0% /tmp/tmpdrive\nProgress |===================================| 100.0% \n\ngzip: ./vsoch-singularity-hello-world-master.img: No space left on device\nERROR: pulling container failed!\nDone. Container is at: ./vsoch-singularity-hello-world-master.img.gz\nzsh: no such file or directory: ./singularity-hello-world-master.img\ntotal 50392\n-rwx------ 1 yoh yoh 51599774 Jun 19 10:17 vsoch-singularity-hello-world-master.img.gz*\n\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/752#issuecomment-309454125|#752: if extraction of pulled image fails -- leaves it compressed>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497881981.145269",
        "date": 1497881981145
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/754|#754 SINGULARITYENV_PATH is hardcoded in 2.3> by <https://github.com/moskalenko|moskalenko>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/754|#754 SINGULARITYENV_PATH is hardcoded in 2.3> by <https://github.com/moskalenko|moskalenko>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497880958.747838",
        "date": 1497880958747
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/754#issuecomment-309449033|#754: SINGULARITYENV_PATH is hardcoded in 2.3>",
                "text": "Sure, thanks for merging my PR.",
                "pretext": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/754#issuecomment-309449033|#754: SINGULARITYENV_PATH is hardcoded in 2.3>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497880958.747789",
        "date": 1497880958747
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/748|#748 Singularity Ignores Umask when Creating Images> by <https://github.com/Saford91|Saford91>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/748|#748 Singularity Ignores Umask when Creating Images> by <https://github.com/Saford91|Saford91>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497877281.480091",
        "date": 1497877281480
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Saford91 on issue <https://github.com/singularityware/singularity/issues/748#issuecomment-309432454|#748: Singularity Ignores Umask when Creating Images>",
                "text": "The latest build works as expected.\n\n```$ umask 0077\n$ singularity create container.img\n...\n$ ls -l container.img\n-rwx------. 1 steve steve 805306400 Jun 19 08:59 container.img\n```\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by Saford91 on issue <https://github.com/singularityware/singularity/issues/748#issuecomment-309432454|#748: Singularity Ignores Umask when Creating Images>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497877281.480078",
        "date": 1497877281480
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309363677|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "No, the question is different. Singularity check OverlayFS at compile time and in our scenario is this functionality disabled. So any try to bind folder, that not exist inside the container is forbidden. But when I bypass the check I can use this bind inside Docker and Singularity image. Singularity creates this folder inside the image and then mount them. (if the image is writable) So why is this bind option disabled completely when I don't need OverlayFS for this?",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309363677|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497858279.188400",
        "date": 1497858279188
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-309360776|#758: Docker cleanup error on mounted files>",
                "text": "I just tried it and it's working. Where was the problem? With the location of the lock file? Now it's working on all our OS. Thank you for great work!",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-309360776|#758: Docker cleanup error on mounted files>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497857421.017336",
        "date": 1497857421017
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309302873|#763: Building of debian package fails>",
                "text": "Ahh, nice catch! Fixed and thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309302873|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497819873.753768",
        "date": 1497819873753
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309300643|#763: Building of debian package fails>",
                "text": "ok, just checked on this! We are ok because I do <https://github.com/singularityware/singularity/blob/cc8bfb2dc0024c9ca1d3f47d54e56cbe504774dd/libexec/python/sutils.py#L266|create the folders> (if not existing) in the function to get the cache. I thought there was a specific reason I created it on init, and I suppose we will figure that out if a bug is triggered later, heh. I think it might just be good :)\n\n@gmkurtzer one thing I noticed, when I was compiling the version above, I saw this warning several times:\n\n```util/util.c: In function ‘envclean’:\nutil/util.c:342:9: warning: ‘tok’ may be used uninitialized in this function [-Wmaybe-uninitialized]\n         unsetenv(key);\n         ^\n```\n\nI don't remember it being there before - thanks to the logger it now prints in purple for me :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309300643|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497817447.625720",
        "date": 1497817447625
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309298718|#763: Building of debian package fails>",
                "text": "so... how is the cache created now?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309298718|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497815338.512484",
        "date": 1497815338512
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309295696|#763: Building of debian package fails>",
                "text": "Oh, it isn't worth even submitting a PR. I removed those lines, and ran through the tests. It seems the necessary cache directories are indeed being created on demand (including the parents) so I'll go ahead and commit that unless you see something that I missed.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309295696|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497811991.332770",
        "date": 1497811991332
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288589|#763: Building of debian package fails>",
                "text": "if you tell me where to PR I can do this quickly!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288589|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497804112.908313",
        "date": 1497804112908
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288507|#763: Building of debian package fails>",
                "text": "The reason it happens is this import:\n\n```from sutils import (\n    get_fullpath,\n    read_file,\n    write_file\n)\n```\nso we could just have those functions defined, simply, within the same file to not need to do that.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288507|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497804020.903648",
        "date": 1497804020903
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288418|#763: Building of debian package fails>",
                "text": "the environment variables are loaded (triggering the creation) when you import the defaults file. An easier workaround would be to use simple functions that don't rely on importing that, so the installation scripts are kept isolated from the runtime. Does that make sense?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309288418|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497803920.898316",
        "date": 1497803920898
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309287991|#763: Building of debian package fails>",
                "text": "Can't we just not create the ~/.singularity at that step? Just remove those 2 lines. When we need to write/cache a file, we can check and create the directories then. ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309287991|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497803460.873335",
        "date": 1497803460873
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309287510|#763: Building of debian package fails>",
                "text": "I agree, but how would the trigger work to create / not create? If the user disables cache, then we still need to have files put somewhere. We could have a more global `SINGULARITY_INSTALL` environment variable that would just skip the defaults entirely.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309287510|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497802956.846422",
        "date": 1497802956846
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309286736|#763: Building of debian package fails>",
                "text": "Yes, I agree that we can work around it, but I don't think we should create the cache parent directory just because we resolved where the cache would be _iff_ we were to use it. I think it makes more sense to create the directories only when they are necessary.\n\nThoughts?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309286736|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497802138.804171",
        "date": 1497802138804
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309284381|#763: Building of debian package fails>",
                "text": "huh, have we seen this error before? It's a one time thing, so it would be easiest to disable the cache by exporting that environment variable (goes to tmp) unless there is some other way to detect this step?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309284381|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497799767.677973",
        "date": 1497799767677
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309282054|#763: Building of debian package fails>",
                "text": "@niktur, thanks for letting us know!\n\n@vsoch, do we need to do the `os.mkdir(SINGULARITY_CACHE)` at <https://github.com/singularityware/singularity/blob/master/libexec/python/defaults.py#L110?> We shouldn't create the cache directory until we need to (this is getting called indirectly from `etc/configure_transform.py`.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/763#issuecomment-309282054|#763: Building of debian package fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497797351.547233",
        "date": 1497797351547
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#763 Building of debian package fails' https://github.com/singularityware/singularity/issues/763 by niktur",
                "text": "*Version of Singularity:*\n\n2.3 latest master.\n\n*Expected behavior*\n\nBuild debian package according to the instalation instruction on singularity home page:\nfakeroot dpkg-buildpackage -b -us -uc\n\n*Actual behavior.*\n\nFailed during building\n\n*Steps to reproduce behavior*\n\nfakeroot dpkg-buildpackage -b -us -uc\n...\n   dh_auto_build\n        make -j1\nmake[1]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity'\nMaking all in bin\nmake[2]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/bin'\nmake[2]: Nothing to be done for 'all'.\nmake[2]: Leaving directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/bin'\nMaking all in etc\nmake[2]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc'\n./configure_transform.py --defaults ../src/util/config_defaults.h --infile singularity.conf.in --outfile singularity.conf\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /root/.singularity\nTraceback (most recent call last):\n  File \"./configure_transform.py\", line 30, in &lt;module&gt;\n    from sutils import (\n  File \"../libexec/python/sutils.py\", line 25, in &lt;module&gt;\n    from defaults import (\n  File \"../libexec/python/defaults.py\", line 110, in &lt;module&gt;\n    os.mkdir(SINGULARITY_CACHE)\nOSError: [Errno 13] Permission denied: '/root/.singularity'\nMakefile:538: recipe for target 'singularity.conf' failed\nmake[2]: *** [singularity.conf] Error 1\nmake[2]: Leaving directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc'\nMakefile:401: recipe for target 'all-recursive' failed\nmake[1]: *** [all-recursive] Error 1\nmake[1]: Leaving directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity'\ndh_auto_build: make -j1 returned exit code 2\ndebian/rules:7: recipe for target 'build' failed\nmake: *** [build] Error 2\ndpkg-buildpackage: error: debian/rules build gave error exit status 2\n\nBuilding as\n    dpkg-buildpackage -rfakeroot -b -us -uc\nor even\n    dpkg-buildpackage -b -us -uc\nbecause dpkg-buildpackage invoke fakeroot by default if the  command is present (see man for dpkg-buildpackage) works fine:\n...\n   dh_auto_build\n        make -j1\nmake[1]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity'\nMaking all in bin\nmake[2]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/bin'\nmake[2]: Nothing to be done for 'all'.\nmake[2]: Leaving directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/bin'\nMaking all in etc\nmake[2]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc'\n./configure_transform.py --defaults ../src/util/config_defaults.h --infile singularity.conf.in --outfile singularity.conf\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/niktur/.singularity\nVERBOSE2 SINGULARITY_ENVIRONMENT found as None/.singularity.d/environment\nVERBOSE2 SINGULARITY_RUNSCRIPT found as None/singularity\nVERBOSE2 SINGULARITY_TESTFILE found as None/.singularity.d/test\nVERBOSE2 SINGULARITY_DEFFILE found as None/.singularity.d/Singularity\nVERBOSE2 SINGULARITY_ENVBASE found as None/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as None/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as None/.singularity.d/.layers\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\n\n*** STARTING PYTHON CONFIGURATION HELPER ****\nVERBOSE3 Reading file /home/niktur/SINGULARITY/source/git/18.06.2017/singularity/src/util/config_defaults.h with mode r.\nVERBOSE3 Reading file /home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc/singularity.conf.in with mode r.\nVERBOSE2 Writing file singularity.conf.tmp with mode w.\n*** FINISHED PYTHON CONFIGURATION HELPER ****\nmake[2]: Leaving directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/etc'\nMaking all in libexec\nmake[2]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/libexec'\nMaking all in bootstrap-scripts\nmake[3]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/libexec/bootstrap-scripts'\nMaking all in environment\nmake[4]: Entering directory '/home/niktur/SINGULARITY/source/git/18.06.2017/singularity/libexec/bootstrap-scripts/environment'\ninstall -d -m 0755 newroot/.singularity.d\ninstall -d -m 0755 newroot/.singularity.d/env\ninstall -d -m 0755 newroot/.singularity.d/actions\ninstall -d -m 0755 newroot/.singularity.d/libs\ninstall -d -m 0755 newroot/dev\ninstall -d -m 0755 newroot/etc\ninstall -d -m 0755 newroot/home\ninstall -d -m 0755 newroot/proc\ninstall -d -m 0755 newroot/root\ninstall -d -m 0755 newroot/sys\ninstall -d -m 0755 newroot/tmp\ninstall -d -m 0755 newroot/var\ninstall -d -m 0755 newroot/var/tmp\ninstall -m 0755 /dev/null newroot/etc/hosts\ninstall -m 0755 /dev/null newroot/etc/resolv.conf\ninstall -m 0755 runscript newroot/.singularity.d/\ninstall -m 0755 exec newroot/.singularity.d/actions/\ninstall -m 0755 run newroot/.singularity.d/actions/\ninstall -m 0755 shell newroot/.singularity.d/actions/\ninstall -m 0755 test newroot/.singularity.d/actions/\ninstall -m 0755 01-base.sh newroot/.singularity.d/env/\ninstall -m 0755 90-environment.sh newroot/.singularity.d/env/\ninstall -m 0755 99-base.sh newroot/.singularity.d/env/\nln -sf env/90-environment.sh newroot/.singularity.d/environment\nln -sf .singularity.d/runscript newroot/singularity\nln -sf .singularity.d/actions/exec newroot/.exec\nln -sf .singularity.d/actions/run newroot/.run\nln -sf .singularity.d/actions/shell newroot/.shell\nln -sf .singularity.d/actions/test newroot/.shell\ncd newroot; tar czf ../environment.tar . --owner=0 --group=0\nrm -rf newroot\n...",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/niktur|niktur>",
                "title": "#763 Building of debian package fails",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/763",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497791623.266140",
        "date": 1497791623266
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/762|#762 Mounting of top level directories (/) that do not exist is not possible> by <https://github.com/bgruening|bgruening>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/762|#762 Mounting of top level directories (/) that do not exist is not possible> by <https://github.com/bgruening|bgruening>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497773100.525664",
        "date": 1497773100525
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/762#issuecomment-309263161|#762: Mounting of top level directories (/) that do not exist is not possible>",
                "text": "@gmkurtzer this was not about warning or error messages - that was an other issue. But I think my problem was solved in latest master dev versioni :)\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/762#issuecomment-309263161|#762: Mounting of top level directories (/) that do not exist is not possible>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497773100.525661",
        "date": 1497773100525
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309251136|#706: problems with multiple Includes in bootstrap definition>",
                "text": "Here is what it is doing now:\n\n```$ sudo singularity bootstrap /tmp/1.img  /tmp/docker.def \nSanitizing environment\nBuilding from bootstrap definition recipe\nERROR  : Duplicate bootstrap entry found: 'From'\nABORT  : Retval = 255\n```\n\nIf that looks good, let's close this issue.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309251136|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497750252.745416",
        "date": 1497750252745
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309251070|#706: problems with multiple Includes in bootstrap definition>",
                "text": "+1. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309251070|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497750127.740892",
        "date": 1497750127740
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250796|#706: problems with multiple Includes in bootstrap definition>",
                "text": "Bombing out with an error is a reasonable suggestion and very easy to implement. I second it. :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250796|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497749593.721542",
        "date": 1497749593721
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250693|#706: problems with multiple Includes in bootstrap definition>",
                "text": "I'd suggest a fourth option:\n\n1. Fail with an error if you see a duplicate entry of any type.\n\nAllowing duplicates, in my opinion, just makes things more complicated for future people who are trying to understand how a bootstrap file works.  If multiple `Includes` lines are allowed, I imagine that very few bootstrap files would ever use them, making them that much more confusing for others.",
                "pretext": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250693|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497749392.713934",
        "date": 1497749392713
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-309250409|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "text": "Good thinking to document the issues with installation over NFS and/or network file systems. I'll take a stab at it (in my free time, which maybe a bit) but if someone has an opportunity before I get to it, it would be greatly appreciated.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-309250409|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497748879.695113",
        "date": 1497748879695
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309250239|#727: home mount erase /usr/ in container>",
                "text": "Hi @mschnepf,\n\nIn looking through the source code of version 2.3, it appears that if overlayFS is indeed enabled, there is no staging of the home directory which would account for the apparent loss of the `/usr` directory.  Can you send me the debug output of a normal run with OverlayFS enabled and no `-H` option?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-309250239|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497748571.683565",
        "date": 1497748571683
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250134|#706: problems with multiple Includes in bootstrap definition>",
                "text": "I dug into this a bit, and it is failing because in a case of duplicates, the last line wins.\n\nThere are several options for how this issue can/should be handled and I'm open to opinions:\n\n1. Last entry takes precedence (like declaring multiple variables in shell, the last one is the one that persists.\n2. The first entry persists and subsequent duplicate entries fail. \n3. The entires are somehow concatenated (perhaps comma delim, but this behavior will have unpredictable results (e.g. the `From:` Vs. `Includes:`).\n\nI am inclined to leave the behavior as it stands now, but perhaps throw a warning (or error) if it encounters a duplicate key.\n\nThoughts?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-309250134|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497748372.675718",
        "date": 1497748372675
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/748#issuecomment-309249724|#748: Singularity Ignores Umask when Creating Images>",
                "text": "Will you retest with [master a1c228e]?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/748#issuecomment-309249724|#748: Singularity Ignores Umask when Creating Images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497747595.642518",
        "date": 1497747595642
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/762#issuecomment-309249409|#762: Mounting of top level directories (/) that do not exist is not possible>",
                "text": "I don't think this error should be silent because you are requesting an option that is failing. What I would recommend instead is to create some logic to automatically do this for people and include it in Singularity proper.\n\nPlease take a look at the file `$sysconfdir/singularity/init`. In there you can create some logic that can look for particular directories and conditionally enable certain features. For example if you add a shell snippet into that file like:\n\n```if test -d /foo; then\n    SINGULARITY_BINDPATH=\"/foo\"\n    export SINGULARITY_BINDPATH\nfi\n```\n\nHope that helps!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/762#issuecomment-309249409|#762: Mounting of top level directories (/) that do not exist is not possible>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497747007.619330",
        "date": 1497747007619
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/744|#744 --quite is not working> by <https://github.com/bgruening|bgruening>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/744|#744 --quite is not working> by <https://github.com/bgruening|bgruening>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497737218.200212",
        "date": 1497737218200
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309243100|#744: --quite is not working>",
                "text": "Great, thanks a lot!",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309243100|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497737211.199893",
        "date": 1497737211199
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/753|#753 Fixing shub pull 404 message, cleanup on fail> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/753|#753 Fixing shub pull 404 message, cleanup on fail> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497736795.179019",
        "date": 1497736795179
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309242809|#753: Fixing shub pull 404 message, cleanup on fail>",
                "text": "OK, awesome. Merging! Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309242809|#753: Fixing shub pull 404 message, cleanup on fail>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497736792.178854",
        "date": 1497736792178
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309242778|#744: --quite is not working>",
                "text": "Ok, I just updated master with some relevant changes including the `--silent` option.\n\nBTW, I really should have reminded myself about the message levels... WARNINGs are -2, so --silent has to set messagelevel to -3. Anyway, fixed now, sorry for the misinformation.\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309242778|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497736744.176676",
        "date": 1497736744176
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#762 Mounting of top level directories (/) that do not exist is not possible' https://github.com/singularityware/singularity/issues/762 by bgruening",
                "text": "*Version of Singularity:*\n\n```singularity --version\n2.3-master.g044a991b\n```\n\n*Expected behavior*\n\nMounting and writing to top level dir as well.\n\n*Actual behavior*\n\n```\n% singularity exec -B /foo:/foo:rw singularity_import/samtools:1.4.1--0 touch /foo/file.txt \n\nERROR  : There was an error binding the path /foo: No such file or directory\nABORT  : Retval = 255\n```\n\nWe would like to create container that are reusable by many different people and different deployments. Many users mount in data in top level directories, aka `-B /import/:/import`, but this is currently only possible if I create the folder `import` in advance in the container. I can not predict which folder a user needs so it would be great to support this feature to make containers really exchangeable.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/bgruening|bgruening>",
                "title": "#762 Mounting of top level directories (/) that do not exist is not possible",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/762",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497735918.137586",
        "date": 1497735918137
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309241780|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309241780|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497735489.117863",
        "date": 1497735489117
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309241739|#744: --quite is not working>",
                "text": "Ah nice! But this means that the above warning is getting a message level of `-1` because it is printed even if `--quite` is specified. I guess in my use case it is ok to see `errors`, but not vital warnings I would like to omit. \n\nYour proposed `--silent` seems good, but I guess we need to revise the attached message levels as well, correct?",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309241739|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497735449.116030",
        "date": 1497735449116
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-309241151|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "I wonder why it is failing changing permissions on those files. Can you show me an `ls -l` on some of those files, and their parent directories?\n\n```ls -l /workdir/my_user/Code/singularity/216989.my_cluster/.singularity-runtime.K0bc9ODB/centos/var/lib/rpm/Providename\nls -ld /workdir/my_user/Code/singularity/216989.my_cluster/.singularity-runtime.K0bc9ODB/centos/var/lib/rpm\n```\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-309241151|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734724.082564",
        "date": 1497734724082
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309241090|#753: Fixing shub pull 404 message, cleanup on fail>",
                "text": "I don't see why not.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309241090|#753: Fixing shub pull 404 message, cleanup on fail>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734659.079612",
        "date": 1497734659079
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/743|#743 child rw mounts gets overwritten by parent ro mounts> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/743|#743 child rw mounts gets overwritten by parent ro mounts> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734548.074661",
        "date": 1497734548074
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309240982|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "I am closing the issue. Let me know if it needs to be reopened. Thanks! :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309240982|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734548.074658",
        "date": 1497734548074
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309240954|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "Yep, it will be in the next point release (2.3.1) which is coming soon!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-309240954|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734522.073442",
        "date": 1497734522073
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309240905|#744: --quite is not working>",
                "text": "Heya @bgruening,\n\nAhhh, I follow what you are doing with Conda now, excellent idea!\n\nI would suggest that we move some of these issues into milestones for the 2.4 release such that Singularity can be relocated easier.\n\nNow to your point, Singularity utilizes a numeric message level scheme where each message specifies a numeric level. What gets printed depends on if a message's level is less then the requested level with warnings and errors being negative numbers, and increases in verbosity/debugging is positive numbers. By default, the messagelevel is 1. `--quiet` sets the message level to 0. We can have `--silent` which sets it to -1.\n\nDoes that make sense?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-309240905|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497734454.070407",
        "date": 1497734454070
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/746|#746 autogen.sh missing, referenced in INSTALL.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/746|#746 autogen.sh missing, referenced in INSTALL.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733876.042617",
        "date": 1497733876042
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-309240418|#746: autogen.sh missing, referenced in INSTALL.md>",
                "text": "This is fixed and merged at this point, so I'm gonna close this issue. Thanks everyone!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-309240418|#746: autogen.sh missing, referenced in INSTALL.md>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733876.042612",
        "date": 1497733876042
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-309240364|#745: Singularity static binary>",
                "text": "Hi @bgruening,\n\nIt is going to be a long time coming before Singularity can effectively run without root permissions. That may nullify the necessity for users to be installing it, at least for the near-mid future.\n\nRegarding the localstatedir, this is statically compiled in for security, and can be changed with the configure option `--localstatedir=...`. There is no way for this to be runtime configured in the current version, but I suppose it would/could be possible to make this option exist in the configuration file instead. But again, functionality would be pretty limited depending on the host operating system's capability.\n\nHope that helps!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-309240364|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733822.039924",
        "date": 1497733822039
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/750|#750 mush mode_t> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/750|#750 mush mode_t> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733359.017110",
        "date": 1497733359017
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/750#issuecomment-309239987|#750: mush mode_t>",
                "text": "Looks good, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/750#issuecomment-309239987|#750: mush mode_t>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733355.016859",
        "date": 1497733355016
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/754#issuecomment-309239761|#754: SINGULARITYENV_PATH is hardcoded in 2.3>",
                "text": "Heya @moskalenko! Thanks for the PR. Can we close this now?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/754#issuecomment-309239761|#754: SINGULARITYENV_PATH is hardcoded in 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497733047.000738",
        "date": 1497733047000
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309239722|#753: Fixing shub pull 404 message, cleanup on fail>",
                "text": "Heya @vsoch, is this PR ready?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-309239722|#753: Fixing shub pull 404 message, cleanup on fail>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497732994.998206",
        "date": 1497732994998
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/759|#759 Memory error with 9 or more bind paths in singularity.conf> by <https://github.com/ch741|ch741>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497690806.823461",
        "date": 1497690806823
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309203698|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "Works now, thanks!",
                "pretext": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309203698|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497690805.823457",
        "date": 1497690805823
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309178991|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "lol, hopefully it fixes it! &lt;crosses fingers&gt;",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309178991|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497660655.515254",
        "date": 1497660655515
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309168643|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "That C, always picking on the python modules! Thanks for the fix @gmkurtzer!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309168643|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497656909.207774",
        "date": 1497656909207
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309159314|#760: Lack of username causes singularity to abort>",
                "text": "BTW, I updated the master branch, will you test when you have a moment?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309159314|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497654634.949611",
        "date": 1497654634949
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309156446|#760: Lack of username causes singularity to abort>",
                "text": "So just to confirm you also must be setting `config passwd` and `config group` to no in the config, is that accurate?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309156446|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497653309.771407",
        "date": 1497653309771
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/755#issuecomment-309148938|#755: Make the currently hard-coded SINGULARITYENV_PATH usable>",
                "text": "Thank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/755#issuecomment-309148938|#755: Make the currently hard-coded SINGULARITYENV_PATH usable>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497652228.614388",
        "date": 1497652228614
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/755|#755 Make the currently hard-coded SINGULARITYENV_PATH usable> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/755|#755 Make the currently hard-coded SINGULARITYENV_PATH usable> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497652223.613572",
        "date": 1497652223613
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309148535|#760: Lack of username causes singularity to abort>",
                "text": "Hi Greg,\nI should have mentioned we disable mounting home in singularity.conf so I believe the previous logic in 2.2.1 was to short circuit the username check. If it could be set to NULL and not abort that would be great.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309148535|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497652046.585037",
        "date": 1497652046585
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-309148482|#758: Docker cleanup error on mounted files>",
                "text": "Hi @hra0031,\n\nI am not able to reproduce this, but I've made some changes to cleanupd in the master GitHub branch. Can you test that when you get a chance?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/758#issuecomment-309148482|#758: Docker cleanup error on mounted files>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497652026.581965",
        "date": 1497652026581
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309148019|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "I just pushed a fix to the master branch, can you test?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309148019|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497651831.551312",
        "date": 1497651831551
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309146052|#760: Lack of username causes singularity to abort>",
                "text": "Hi @AdamSimpson, \n\nThis worked previously in 2.2.1? There are a number of user bits of information that we need to obtain from the password database (e.g. home directory, username, etc..). About the best I could offer is to return a NULL username which will only break some things, and NULL for home directory which would only break the 'mount home' feature. Is that acceptable?\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/760#issuecomment-309146052|#760: Lack of username causes singularity to abort>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497651040.422672",
        "date": 1497651040422
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309144096|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "Yep, you are right @vsoch, Singularity was masking the `SINGULARITY_CACHEDIR`. This is fixed in master, can you test @AdamSimpson? THANKS!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309144096|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497650338.295591",
        "date": 1497650338295
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309108526|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "text": "I think there are two possibilities - either @gmkurtzer is setting it to over-ride what the python finds (eg, note that the C portion has `CACHEDIR`. Or the variable is somehow being unset / not exported properly for the python to find. @gmkurtzer thoughts?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/761#issuecomment-309108526|#761: SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497639665.546272",
        "date": 1497639665546
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#761 SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap' https://github.com/singularityware/singularity/issues/761 by AdamSimpson",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nSINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR are honored during bootstrap.\n\n*Actual behavior*\n\nSINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR appear to be ignored during bootstrap and the default /root/.singularity directory is used regardless.\n\n*Steps to reproduce behavior*\n\n$ export SINGULARITY_CACHEDIR=/tmp\n$ export SINGULARITY_DISABLE_CACHE=True\n$ sudo -E singularity -vvv bootstrap test.img gpu.def \nIncreasing verbosity level (4)\nSingularity version: 2.3-dist\nExec'ing: /usr/local/libexec/singularity/cli/bootstrap.exec\nVERBOSE: Set messagelevel to: 4\nVERBOSE: Initialize configuration file: /usr/local/etc/singularity/singularity.conf\nVERBOSE: Got config key allow setuid = 'yes'\nVERBOSE: Got config key max loop devices = '256'\nVERBOSE: Got config key allow pid ns = 'yes'\nVERBOSE: Got config key config passwd = 'yes'\nVERBOSE: Got config key config group = 'yes'\nVERBOSE: Got config key config resolv_conf = 'yes'\nVERBOSE: Got config key mount proc = 'yes'\nVERBOSE: Got config key mount sys = 'yes'\nVERBOSE: Got config key mount dev = 'yes'\nVERBOSE: Got config key mount home = 'yes'\nVERBOSE: Got config key mount tmp = 'yes'\nVERBOSE: Got config key mount hostfs = 'no'\nVERBOSE: Got config key bind path = '/etc/localtime'\nVERBOSE: Got config key bind path = '/etc/hosts'\nVERBOSE: Got config key user bind control = 'yes'\nVERBOSE: Got config key enable overlay = 'yes'\nVERBOSE: Got config key mount slave = 'yes'\nVERBOSE: Got config key sessiondir max size = '16'\nVERBOSE: Initializing Singularity Registry\nVERBOSE: Adding value to registry: 'COMMAND' = 'bootstrap'\nVERBOSE: Adding value to registry: 'SYSCONFDIR' = '/usr/local/etc'\nVERBOSE: Adding value to registry: 'BUILDDEF' = 'gpu.def'\nVERBOSE: Adding value to registry: 'DISABLE_CACHE' = 'True'\nVERBOSE: Adding value to registry: 'WRITABLE' = '1'\nVERBOSE: Adding value to registry: 'VERSION' = '2.3-dist'\nVERBOSE: Adding value to registry: 'CACHEDIR' = '/tmp'\nVERBOSE: Adding value to registry: 'IMAGE' = 'test.img'\nVERBOSE: Adding value to registry: 'MESSAGELEVEL' = '4'\nVERBOSE: Adding value to registry: 'BINDIR' = '/usr/local/bin'\nVERBOSE: Adding value to registry: 'LOCALSTATEDIR' = '/usr/local/var'\nVERBOSE: Adding value to registry: 'LIBEXECDIR' = '/usr/local/libexec'\nVERBOSE: Set home (via getpwuid()) to: /root\nINFO   : Sanitizing environment\nVERBOSE: Adding value to registry: 'WRITABLE' = '1'\nVERBOSE: Checking that file pointer is a Singularity image\nVERBOSE: File is a valid Singularity image\nVERBOSE: Calculating image offset\nVERBOSE: Found image at an offset of 31 bytes\nVERBOSE: Found available loop device: /dev/loop0\nVERBOSE: Using loop device: /dev/loop0\nVERBOSE: Set container directory to: /usr/local/var/singularity/mnt/container\nVERBOSE: Checking what kind of image we are mounting\nVERBOSE: Source path is not a directory: test.img\nVERBOSE: Attempting to mount as singularity image\nVERBOSE: Mounting /dev/loop0 in read/write to: /usr/local/var/singularity/mnt/container\nINFO   : Building from bootstrap definition recipe\nVERBOSE: Got bootstrap definition key/val 'BootStrap' = 'docker'\nVERBOSE: Adding value to registry: 'DRIVER' = 'docker'\nVERBOSE: Got bootstrap definition key/val 'From' = 'ubuntu:xenial'\nVERBOSE: Set messagelevel to: 4\nAdding base Singularity environment to container\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS found as /usr/local/var/singularity/mnt/container\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as /usr/local/var/singularity/mnt/container/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /root/.singularity",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/AdamSimpson|AdamSimpson>",
                "title": "#761 SINGULARITY_DISABLE_CACHE and SINGULARITY_CACHEDIR ignored during bootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/761",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497639333.438119",
        "date": 1497639333438
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#760 Lack of username causes singularity to abort' https://github.com/singularityware/singularity/issues/760 by AdamSimpson",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nOn systems where usernames are not resolvable( through getpwuid(getuid()) ) singularity should still function.\n\n*Actual behavior*\n\nSingularity fails obtaining user information and aborts. This is the case on Titan here at the OLCF where the compute nodes don't have access to LDAP. This previously worked in version 2.2.\n\n*Steps to reproduce behavior*\n\nRun singularity on a system where getpwuid(getuid()) returns NULL, as below:\n\n$ aprun singularity -vvv shell Ubuntu.img \nIncreasing verbosity level (4)\nSingularity version: 2.3-dist\nExec'ing: /usr/lib64/singularity/cli/shell.exec\nEvaluating args: 'UbuntuOMPI.img'\nVERBOSE: Set messagelevel to: 4\nVERBOSE: Initialize configuration file: /etc/singularity/singularity.conf\nVERBOSE: Got config key allow setuid = 'yes'\nVERBOSE: Got config key allow pid ns = 'yes'\nVERBOSE: Got config key allow user image = 'yes'\nVERBOSE: Got config key protected image mode = 'none'\nVERBOSE: Got config key enable overlay = 'yes'\nVERBOSE: Got config key config passwd = 'no'\nVERBOSE: Got config key config group = 'yes'\nVERBOSE: Got config key config resolv_conf = 'yes'\nVERBOSE: Got config key mount proc = 'yes'\nVERBOSE: Got config key mount sys = 'yes'\nVERBOSE: Got config key mount dev = 'yes'\nVERBOSE: Got config key mount home = 'no'\nVERBOSE: Got config key mount tmp = 'yes'\nVERBOSE: Got config key mount hostfs = 'no'\nVERBOSE: Got config key bind path = '/etc/hosts'\nVERBOSE: Got config key bind path = '/opt/cray'\nVERBOSE: Got config key bind path = '/var/spool/alps'\nVERBOSE: Got config key bind path = '/var/opt/cray'\nVERBOSE: Got config key bind path = '/lustre/atlas'\nVERBOSE: Got config key bind path = '/lustre/atlas1'\nVERBOSE: Got config key bind path = '/lustre/atlas2'\nVERBOSE: Got config key user bind control = 'yes'\nVERBOSE: Got config key mount slave = 'yes'\nVERBOSE: Got config key container dir = '/var/lib/singularity/mnt'\nVERBOSE: Got config key singularity user = 'singularity'\nVERBOSE: Initializing Singularity Registry\nVERBOSE: Adding value to registry: 'LIBEXECDIR' = '/usr/lib64'\nVERBOSE: Adding value to registry: 'COMMAND' = 'shell'\nVERBOSE: Adding value to registry: 'MESSAGELEVEL' = '4'\nVERBOSE: Adding value to registry: 'VERSION' = '2.3-dist'\nVERBOSE: Adding value to registry: 'LOCALSTATEDIR' = '/var'\nVERBOSE: Adding value to registry: 'SYSCONFDIR' = '/etc'\nVERBOSE: Adding value to registry: 'BINDIR' = '/usr/bin'\nVERBOSE: Adding value to registry: 'IMAGE' = 'Ubuntu.img'\nERROR  : Failed obtaining user information for uid: 5059\nABORT  : Retval = 255\nApplication 1528005 exit codes: 255\nApplication 1528005 resources: utime ~0s, stime ~0s, Rss ~3952, inblocks ~141, outblocks ~12",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/AdamSimpson|AdamSimpson>",
                "title": "#760 Lack of username causes singularity to abort",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/760",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497638438.155044",
        "date": 1497638438155
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309096353|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "Are you asking why writable works? I would suggest trying to write to places (that you shouldn't have permission to). I don't think adding writable will kill a shell if you aren't root on a resource, but it will only give you \"writable\" to those places you have permission to write.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-309096353|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497636664.583015",
        "date": 1497636664583
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309080032|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "text": "The problem seems to be from the following malloc in function new_hash_entry from src/util/config_parser.c which only allows 8 values:\n\n char *hash_value = (char*)malloc(sizeof(char*)*8);",
                "pretext": "[singularityware/singularity] New comment by ch741 on issue <https://github.com/singularityware/singularity/issues/759#issuecomment-309080032|#759: Memory error with 9 or more bind paths in singularity.conf>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497632515.231638",
        "date": 1497632515231
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#759 Memory error with 10 or more bind paths in singularity.conf' https://github.com/singularityware/singularity/issues/759 by ch741",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nNormal execution of singularity commands.\n\n*Actual behavior*\n\nThe following error:\n\n*** Error in `/usr/local/libexec/singularity/bin/action-suid': malloc(): memory corruption (fast): 0x000000000234d1c0 ***\n======= Backtrace: =========\n/lib64/libc.so.6(+0x791fb)[0x7eff3a33a1fb]\n/lib64/libc.so.6(+0x848e8)[0x7eff3a3458e8]\n/lib64/libc.so.6(*libc_malloc+0x54)[0x7eff3a346f14]\n/usr/local/libexec/singularity/bin/action-suid[0x407a71]\n/usr/local/libexec/singularity/bin/action-suid[0x407d7b]\n/usr/local/libexec/singularity/bin/action-suid[0x40244a]\n/lib64/libc.so.6(*libc_start_main+0xf1)[0x7eff3a2e1401]\n/usr/local/libexec/singularity/bin/action-suid[0x402a3a]\n======= Memory map: ========\n00400000-00420000 r-xp 00000000 fd:00 288489                             /usr/local/libexec/singularity/bin/action-suid\n0061f000-00620000 r--p 0001f000 fd:00 288489                             /usr/local/libexec/singularity/bin/action-suid\n00620000-00621000 rw-p 00020000 fd:00 288489                             /usr/local/libexec/singularity/bin/action-suid\n0234a000-0236b000 rw-p 00000000 00:00 0                                  [heap]\n7eff34000000-7eff34021000 rw-p 00000000 00:00 0 \n7eff34021000-7eff38000000 ---p 00000000 00:00 0 \n7eff3a0aa000-7eff3a0c0000 r-xp 00000000 fd:00 2767948                    /usr/lib64/libgcc_s-6.3.1-20161221.so.1\n7eff3a0c0000-7eff3a2bf000 ---p 00016000 fd:00 2767948                    /usr/lib64/libgcc_s-6.3.1-20161221.so.1\n7eff3a2bf000-7eff3a2c0000 r--p 00015000 fd:00 2767948                    /usr/lib64/libgcc_s-6.3.1-20161221.so.1\n7eff3a2c0000-7eff3a2c1000 rw-p 00016000 fd:00 2767948                    /usr/lib64/libgcc_s-6.3.1-20161221.so.1\n7eff3a2c1000-7eff3a47e000 r-xp 00000000 fd:00 2767869                    /usr/lib64/libc-2.24.so\n7eff3a47e000-7eff3a67d000 ---p 001bd000 fd:00 2767869                    /usr/lib64/libc-2.24.so\n7eff3a67d000-7eff3a681000 r--p 001bc000 fd:00 2767869                    /usr/lib64/libc-2.24.so\n7eff3a681000-7eff3a683000 rw-p 001c0000 fd:00 2767869                    /usr/lib64/libc-2.24.so\n7eff3a683000-7eff3a687000 rw-p 00000000 00:00 0 \n7eff3a687000-7eff3a6ac000 r-xp 00000000 fd:00 2767859                    /usr/lib64/ld-2.24.so\n7eff3a86a000-7eff3a86c000 rw-p 00000000 00:00 0 \n7eff3a8a9000-7eff3a8ac000 rw-p 00000000 00:00 0 \n7eff3a8ac000-7eff3a8ad000 r--p 00025000 fd:00 2767859                    /usr/lib64/ld-2.24.so\n7eff3a8ad000-7eff3a8ae000 rw-p 00026000 fd:00 2767859                    /usr/lib64/ld-2.24.so\n7eff3a8ae000-7eff3a8af000 rw-p 00000000 00:00 0 \n7ffcc99f9000-7ffcc9a1b000 rw-p 00000000 00:00 0                          [stack]\n7ffcc9ad6000-7ffcc9ad8000 r--p 00000000 00:00 0                          [vvar]\n7ffcc9ad8000-7ffcc9ada000 r-xp 00000000 00:00 0                          [vdso]\nffffffffff600000-ffffffffff601000 r-xp 00000000 00:00 0                  [vsyscall]\n\n*Steps to reproduce behavior*\n\nInsert 10 or more bind paths in singularity.conf and try running a singularity command.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ch741|ch741>",
                "title": "#759 Memory error with 10 or more bind paths in singularity.conf",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/759",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497612799.142755",
        "date": 1497612799142
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308994158|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "I tried it today on singularity image and is working as well. :laughing: \nI created an image from docker using import on my notebook (Ubuntu 16.04):\n```$ singularity create /tmp/c7.img\n$ singularity import c7.img docker://centos:latest\n$ singularity shell /tmp/c7.img \nSingularity: Invoking an interactive shell within container...\nSingularity c7.img:~&gt; ls /\nanaconda-post.log  dev  home  lib64   media  opt   root  sbin     srv  tmp  var\nbin        etc  lib   lost+found  mnt    proc  run   singularity  sys  usr\n```\nNext, I transferred this image to cluster and run with bind and writable:\n```$ singularity --debug shell --bind /scratch --writable c7.img\nSingularity c7.img:~&gt; ls /scratch\nbackup  sys  temp  work\n```\nSure, it doesn't work without writable. So why is this function disabled completely at build time?",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308994158|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497609839.625449",
        "date": 1497609839625
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by osallou on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308980648|#756: Fails to bind/mount a non existing dir in container>",
                "text": "could indeed by centos6 related , but many clusters/hpc do not have recent OS... :-(",
                "pretext": "[singularityware/singularity] New comment by osallou on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308980648|#756: Fails to bind/mount a non existing dir in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497605716.785953",
        "date": 1497605716785
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#758 Docker cleanup error on mounted files' https://github.com/singularityware/singularity/issues/758 by hra0031",
                "text": "We are experiencing an issue with Singularity docker files cleanup. After every run (random docker image) the singularity.runtime folder remain in temp and singularity ends with error:\n```WARNING [U=500,P=16752]    unlink()                                  Failed removing file: /tmp/.singularity-runtime.6PXI2t0m/centos:latest/usr/share/zoneinfo/UTC\nERROR   [U=500,P=16752]    main()                                    Could not remove directory /tmp/.singularity-runtime.6PXI2t0m: Device or resource busy\nABORT   [U=500,P=16752]    main()                                    Retval = 255\n```\n\nI have to modify the source code of cleanup to not stop on the first error and continue. Then I can see what files can't be removed. On CentOS 7 (inside singularity) it is:\n```/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/usr/share/zoneinfo/UTC\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/tmp\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/etc/passwd\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/etc/group\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/etc/hosts\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/etc/resolv.conf\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/dev\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/sys\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/var/tmp\n/tmp/.singularity-runtime.Pb5XAzR6/centos:latest/proc\n```\nAfter some investigation I found, that every of this files is a mountpoint which is mounted on start of singularity:\n```/dev/sda31 on /usr/share/zoneinfo/UTC type ext3 (rw,nosuid,relatime,errors=continue,barrier=1,data=ordered)\n/dev/sda31 on /etc/hosts type ext3 (rw,nosuid,relatime,errors=continue,barrier=1,data=ordered)\nproc on /proc type proc (rw,relatime)\nsysfs on /sys type sysfs (rw,nosuid,relatime)\ndevtmpfs on /dev type devtmpfs (rw,nosuid,relatime,size=65944376k,nr_inodes=16486094,mode=755)\n(rw,relatime,cpuset,noprefix,release_agent=/sbin/cpuset_release_agent)\n/dev/sda33 on /tmp type ext3 (rw,nosuid,relatime,errors=continue,barrier=1,data=ordered)\n/dev/sda31 on /var/tmp type ext3 (rw,nosuid,relatime,errors=continue,barrier=1,data=ordered)\ntmpfs on /etc/passwd type tmpfs (rw,nosuid,relatime,size=16384k)\ntmpfs on /etc/group type tmpfs (rw,nosuid,relatime,size=16384k)\n/dev/sda31 on /etc/resolv.conf type ext3 (rw,nosuid,relatime,errors=continue,barrier=1,data=ordered)\n```\nI try to remove files as user/root while singularity cleanup is still running (I have to add some delay to code) This ends with the same error. `lsof` and `fuser` can't see anything on this files. When the cleanup process close, files can be removed with `rm` without problem.\nAs next thing, I try to unmount mounted files directly in C code with escalated privileges before removing and I get the same error: `Device or resource busy`.\nFor now, I'm at end of the road and I don't know what to try as next thing.\n\n*Version of Singularity:*\n\nCentos/RHEL 6.7/6.9\nSingularity 2.3/develop\n\n*Steps to reproduce behavior*\n\n```[vagrant@centos6]$ singularity --debug shell -e docker://centos:latest\n...\nSingularity centos:latest:~/singularity&gt; exit\nVERBOSE [U=500,P=16752]    main()                                    Cleaning directory: /tmp/.singularity-runtime.6PXI2t0m\nDEBUG   [U=500,P=16752]    s_rmdir()                                 Removing directory: /tmp/.singularity-runtime.6PXI2t0m\nWARNING [U=500,P=16752]    unlink()                                  Failed removing file: /tmp/.singularity-runtime.6PXI2t0m/centos:latest/usr/share/zoneinfo/UTC\nERROR   [U=500,P=16752]    main()                                    Could not remove directory /tmp/.singularity-runtime.6PXI2t0m: Device or resource busy\nABORT   [U=500,P=16752]    main()                                    Retval = 255\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hra0031|hra0031>",
                "title": "#758 Docker cleanup error on mounted files",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/758",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497600559.623173",
        "date": 1497600559623
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/625#issuecomment-308942094|#625: make singularity calling cmdline available from within container>",
                "text": "awesome, thanks @c1t4r closing!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/625#issuecomment-308942094|#625: make singularity calling cmdline available from within container>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497593475.464970",
        "date": 1497593475464
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/625|#625 make singularity calling cmdline available from within container> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/625|#625 make singularity calling cmdline available from within container> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497593475.464963",
        "date": 1497593475464
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308852005|#757: Too many levels of symbolic links>",
                "text": "I found a way to replicate the issue. I am not sure all the steps/details are required here, but this is how I could reproduce the issue:\n\nNetwork share\n  Samba 4.5.10 (CIFS) share from FreeNAS. I think the problem should also occur with any type of network share that make use of an automounter. We make use of Kerberos for authentification and we use some fancy mount options that, I think, are not relevant to this issue.\n\nHost: Ubuntu 14.04\n```$ sudo apt-get install autofs\n$ cd /\n$ sudo mkdir test\n```\n\nEdit the file `/etc/auto.master` and add at the end of the file\n\n  `/test   /etc/auto.test --ghost --timeout=60`\n\nEdit the file `/etc/auto.test` and add\n\n`testing  -fstype=cifs,sec=krb5,user=$USER,cruid=$UID,multiuser,nounix,mfsymlinks,resilienthandles,vers=3.0 ://hostname/path`\n\nAs I said previously, I don't think all those mount options are necessary to reproduce this issue.\n\nRestart the `autofs` service using `sudo service autofs restart`\n\nYou should now see a folder `testing` inside `/test`. \n\nCreate a dummy (Trusty-based) container file `image.img` using Singularity 2.3 and place it on the network share in `/test/testing`. Open a `shell` inside the container using\n\n```$ cd /\n$ singularity shell /test/testing/image.img\n```\n\nExit the shell and wait until the 60 seconds automounter timeout expires. Try to open a shell again using\n\n```$ singularity shell /test/testing/image.img\n```\n\nYou will get the error \n\n```ERROR  : Could not open image test/testing/image.img: Too many levels of symbolic links\nABORT  : Retval = 255\n```\n\nIf you try to open a shell again, it should work as expected. You can repeat this shell/timeout thing and get the error every next shell.",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308852005|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497557298.778102",
        "date": 1497557298778
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308813882|#757: Too many levels of symbolic links>",
                "text": "I will try to make one. I will ask gshamov and maswan if they can help with this.",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308813882|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497547926.559525",
        "date": 1497547926559
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308812845|#757: Too many levels of symbolic links>",
                "text": "Can you find a simple reproducer?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/757#issuecomment-308812845|#757: Too many levels of symbolic links>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497547682.474184",
        "date": 1497547682474
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#757 Too many levels of symbolic links' https://github.com/singularityware/singularity/issues/757 by fmorency",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nUsing the singularity container while the image is on a network share mounter using autofs should work. This used to work with 2.2.1\n\n*Actual behavior*\n\nSometime, the container usage fails with error \"Too many level of symbolic links\" with the path pointing to the `.img` file. \n\n*Steps to reproduce behavior*\n\nOn our end, this happens when we run our Nextflow processing pipeline on our SLURM mini-cluster and the image is on our SMB network share mounted using autofs. I know that Slack users gshamov and maswan both had the issue when using an automounter on Lustre/NFS. Here's an excerpt of the Slack discussion:\n\n```\ngshamov [2:10 PM] \nWe have /sbb filestystem that is Lustre, that gets automounted per user as /global/scratch/user. When I bind both with -B and try to access /global/scratch/user I get \" Too many levels of symbolic links\" error.\n\nmaswan [2:41 PM] \nugh, we've just been fighting that\nwe ended up with static nfs mounts\nwe think the kernel gets all confused at the point where autofs tries to unmount an \"idle\" filesystem that only has bind mounts and then gets all confused for future access to the filesystem, or something\nworked fine for some filesystems, horribly for others\netc\n\nfmorency [2:46 PM] \nI sometime see that error with autofs + cifs (smb3)\nStill not sure what's the cause\n\nmaswan [2:48 PM] \nyeah, me neither\n``` \n\nThe automounter works fine when accessing the mounts from the terminal before/after the error. I'm not sure how to debug this and any help would be appreciated.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/fmorency|fmorency>",
                "title": "#757 Too many levels of symbolic links",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/757",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497547558.430716",
        "date": 1497547558430
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/734|#734 Sourcing from /environment doesn't work> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/734|#734 Sourcing from /environment doesn't work> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497538927.214121",
        "date": 1497538927214
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308762173|#734: Sourcing from /environment doesn't work>",
                "text": "+1! Thanks @fmorency :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308762173|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497538926.214099",
        "date": 1497538926214
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-308761561|#732: Environment variables not available from inside the definition file>",
                "text": "werd! ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-308761561|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497538851.183118",
        "date": 1497538851183
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/732|#732 Environment variables not available from inside the definition file> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/732|#732 Environment variables not available from inside the definition file> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497538851.183109",
        "date": 1497538851183
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-308754940|#732: Environment variables not available from inside the definition file>",
                "text": "You can close this issue :)",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-308754940|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497537811.765879",
        "date": 1497537811765
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308754879|#734: Sourcing from /environment doesn't work>",
                "text": "Yes all good. You can close this issue.",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308754879|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497537798.760549",
        "date": 1497537798760
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308751472|#756: Fails to bind/mount a non existing dir in container>",
                "text": "I think that `enable overlay = yes` requires that Singularity be running on a host that implements an overlay file system.  I don't think this is available in RHEL 6/CentOS 6.  I believe it makes it's first appearance in RHEL 7/CentOS 7.  Can anyone else verify?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308751472|#756: Fails to bind/mount a non existing dir in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497537111.492611",
        "date": 1497537111492
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308750352|#756: Fails to bind/mount a non existing dir in container>",
                "text": "hey @osallou ! Could you please provide output with `--debug`? The above seems to work ok for me:\n\n```\n singularity   shell -B /home/vanessa/Desktop:/opt/xx  centos-latest.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity centos-latest.img:~&gt; ls /opt\nxx\n```\n(I apologize I know that's the worst message \"hey it works for me!\" but with debug we can start to figure out what is going on",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/756#issuecomment-308750352|#756: Fails to bind/mount a non existing dir in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497536883.402698",
        "date": 1497536883402
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#756 Fails to bind/mount a non existing dir in container' https://github.com/singularityware/singularity/issues/756 by osallou",
                "text": "*Version of Singularity:*\n\n2.3-dist\n\n*Expected behavior*\n\nHave in conf user bind control and enable overlay to yes\n\nExpect to mount a local directory in container even if it does not exists in container\n\nI am on CentOS 6.7\n\n*Actual behavior*\n\nas options are set as per doc explained, user should be able to mount a non existant directory in container.\n\n*Steps to reproduce behavior*\n```./singularity/bin/singularity   shell -B /omaha-beach/xx:/opt/xx  centos-latest.img```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/osallou|osallou>",
                "title": "#756 Fails to bind/mount a non existing dir in container",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/756",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497520551.398682",
        "date": 1497520551398
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-308645486|#753: Fixing shub pull 404 message, cleanup on fail>",
                "text": "bwaahahah I got it on one line!! Diabolical!! And it's lost all meaning, lol. Now I can go to sleep :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/753#issuecomment-308645486|#753: Fixing shub pull 404 message, cleanup on fail>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497509627.136107",
        "date": 1497509627136
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/752#issuecomment-308644932|#752: if extraction of pulled image fails -- leaves it compressed>",
                "text": "hey @yarikoptic I just added to the current PR (for your other issue!) to modify how this extraction is done. Given that there is a non return code of 0 (indicating some error) we clean up the intermediate files (which should be the image, etc.) Could you give it a test on your tiny hard drive if you get the chance?\n\n<https://github.com/singularityware/singularity/pull/753>\n\nI'd test it, but you know, my hard drive is WAYY too big.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/752#issuecomment-308644932|#752: if extraction of pulled image fails -- leaves it compressed>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497509447.109860",
        "date": 1497509447109
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308637726|#734: Sourcing from /environment doesn't work>",
                "text": "hey @fmorency did you get this working?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-308637726|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497506726.748440",
        "date": 1497506726748
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by moskalenko on pull request <https://github.com/singularityware/singularity/pull/755#issuecomment-308596864|#755: Development>",
                "text": "Reworked the PR in a portable way and dealing with unset variables.",
                "pretext": "[singularityware/singularity] New comment by moskalenko on pull request <https://github.com/singularityware/singularity/pull/755#issuecomment-308596864|#755: Development>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497487436.622321",
        "date": 1497487436622
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#755 Development' https://github.com/singularityware/singularity/pull/755 by moskalenko",
                "text": "*Description of the Pull Request (PR):*\n\netc/init is hard-coding SINGULARITYENV_PATH preventing its use at runtime. The included pull request tests for the presence of $SINGULARITYENV_PATH in the environment first and only sets the default $PATH if the above variable is not set in the environment.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #754\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/moskalenko|moskalenko>",
                "title": "#755 Development",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/755",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497472742.550980",
        "date": 1497472742550
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#754 SINGULARITYENV_PATH is hardcoded in 2.3' https://github.com/singularityware/singularity/issues/754 by moskalenko",
                "text": "*Version of Singularity:*\n\n2.3.0 \n\n*Expected behavior*\n\nExpect to be able to use SINGULARITYENV_PATH to set the PATH inside a container\n\n*Actual behavior*\n\nOnly a combination of the hardcoded SINGULARITYENV_PATH in the etc/init and whatever is set in user's ~/.bashrc is used as the $PATH inside a container\n\n*Steps to reproduce behavior*\n\nSet SINGULARITYENV_PATH in your environment and modify it in your ~/.bashrc. Observe the result to be as described in Actual behavior above.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/moskalenko|moskalenko>",
                "title": "#754 SINGULARITYENV_PATH is hardcoded in 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/754",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497472466.459616",
        "date": 1497472466459
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/473|#473 Could not set NO_NEW_PRIVS safeguard: Invalid argument> by <https://github.com/barrymoo|barrymoo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/473|#473 Could not set NO_NEW_PRIVS safeguard: Invalid argument> by <https://github.com/barrymoo|barrymoo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497470804.902773",
        "date": 1497470804902
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-308466035|#727: home mount erase /usr/ in container>",
                "text": "Hi\n\nThe home directory is mounted via NFS to `/usr/users/` on all our machines. The `/home/` is the local home only for that machine.\nThanks for your ideas. I created in the container` /usr/users/` and `/usr/users/mschnepf `. After that, I started the container with `overlay = no`. In both cases the home direct was mounted but `/usr/bin,` `/usr/lib `, …. was always not existing in the container.\n\nI can move the home directory with the` -H` option to another directory. With this option, all directories in `/usr/ ` are in the container. However, this would not really help. Some machines are integrated in out batch system and has to move `/home/somewhere/else` to `/usr/users/ `. In this case, `/usr/` is empty expect `/usr/users/mschnepf`. \n\nI looked at the output of `./configure `and found `checking for overlayfs... yes`. So my system should support overlayFS. ",
                "pretext": "[singularityware/singularity] New comment by mschnepf on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-308466035|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497453744.666034",
        "date": 1497453744666
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308407037|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "I think it will be nice too! It's an easy enough bit of code that we can add it if /when the community pushes for that. Right now I think there are more pressing things to focus on, so I wanted to close the PR. Note that the issue is still not closed so we won't forget about it :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308407037|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497440829.290055",
        "date": 1497440829290
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by rbrthogan on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308404016|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "@vsoch that's a shame. Perhaps it's not essential for everyone but I think it's a pretty simple extension of the docker functionality that will be absolutely required from some enterprise users of Singularity and at least a nice to have for others.",
                "pretext": "[singularityware/singularity] New comment by rbrthogan on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308404016|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497439892.102050",
        "date": 1497439892102
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308325570|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "@gmkurtzer thanks for the explanation. Perhaps it would be useful to make this functionality available to users in the future.",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308325570|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497419031.864361",
        "date": 1497419031864
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#753 Fixing error print so that container not found on shub (404) prints user friendly message' https://github.com/singularityware/singularity/pull/753 by vsoch",
                "text": "This will close #751 \n\nThe issue was that an \"error\" (404) returned a properly formed json, and we needed to look at the status code before parsing that. It was a quick fix - I instead call the get function of the client to return the response, check the status code:\n\n• if 404, give user message and gracefully exit\n• if ok, continue to read the json as we did before. Instead of the error shown in the issue above, it now looks like this\n\n```singularity pull shub://repronim/niceman\nERROR Cannot find image repronim/niceman. Is your capitalization correct?\n```\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#753 Fixing error print so that container not found on shub (404) prints user friendly message",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/753",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497394946.878014",
        "date": 1497394946878
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/694|#694 Adding ability to read docker credentials from .docker/config.json> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/694|#694 Adding ability to read docker credentials from .docker/config.json> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497394314.760206",
        "date": 1497394314760
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308271242|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "I'm going to close this for now - I don't think it would be of essential need, at least for now.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-308271242|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497394314.760154",
        "date": 1497394314760
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308269522|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "text": "ah, I actually had a catch, I was just catching the wrong thing :) I should be able to fix this!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308269522|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497393722.647409",
        "date": 1497393722647
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308268095|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "text": "oh yeah, totally agree - that's pretty ugly.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308268095|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497393245.553032",
        "date": 1497393245553
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308243851|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "text": "not really -- just a bit unexpected since github is ignoring it...   I was primarily whining that spitting a traceback is suboptimal here -- some message like \"an image blah/bloo was not found.  Note that URI is case sensitive\" would be much better ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308243851|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497386886.847351",
        "date": 1497386886847
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#752 if extraction of pulled image fails -- leaves it compressed' https://github.com/singularityware/singularity/issues/752 by yarikoptic",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nextract\n\n*Actual behavior*\n\nif previous extraction failed (out of space), next pull says just that we have it already and that is it\n\n*Steps to reproduce behavior*\n\nsend me a bigger SSD, and I will send you mine at the capacity limit ;)\n\n```shell\n$&gt; singularity pull shub://ReproNim/niceman\nProgress |===================================| 100.0% \n\ngzip: ./ReproNim-niceman-master.img: No space left on device\nERROR: pulling container failed!\n\n*Now I freed up some space!*\n\n$&gt; singularity pull shub://ReproNim/niceman\nDone. Container is at: ./ReproNim-niceman-master.img.gz\n\n$&gt; ls -lta\ntotal 2485336\ndrwx--S--- 2 yoh yoh       4096 Jun 13 16:33 ./\n-rwx------ 1 yoh yoh 2077159438 Jun 13 16:32 ReproNim-niceman-master.img.gz*\n...\n\n$&gt; ./ReproNim-niceman-master.img.gz \nzsh: exec format error: ./ReproNim-niceman-master.img.gz\n\n$&gt; gunzip ReproNim-niceman-master.img.gz \n\nhopa:~/repronim/containers/singularity\n$&gt; ./ReproNim-niceman-master.img \n\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#752 if extraction of pulled image fails -- leaves it compressed",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/752",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497386345.668012",
        "date": 1497386345668
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308239853|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "text": "I think it's correct that the capitalization needs to be specific in this case, because it's the uri for an image. Do you consider this a bug?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/751#issuecomment-308239853|#751: reveals too much python in \"incorrect\" (?) invocation of singularity pull>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497385986.543850",
        "date": 1497385986543
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#751 reveals too much python in \"incorrect\" (?) invocation of singularity pull' https://github.com/singularityware/singularity/issues/751 by yarikoptic",
                "text": "*Version of Singularity:*\n\n2.3 (debian)\n\n*Expected behavior*\n\nexpected pull to succeed and me get an image\n\n*Actual behavior*\n\n```$&gt; singularity pull shub://repronim/niceman                 \nTraceback (most recent call last):         \n  File \"/usr/lib/x86_64-linux-gnu/singularity/python/pull.py\", line 74, in &lt;module&gt;\n    main()\n  File \"/usr/lib/x86_64-linux-gnu/singularity/python/pull.py\", line 66, in main\n    layerfile=LAYERFILE)\n  File \"/usr/lib/x86_64-linux-gnu/singularity/python/shub/main.py\", line 79, in PULL\n    image_name = get_image_name(manifest)\n  File \"/usr/lib/x86_64-linux-gnu/singularity/python/shub/api.py\", line 169, in get_image_name\n    image_name = \"%s-%s.%s\" %(manifest['name'].replace('/','-'),\n```\n\nha -- and to make it work -- need to be precise in casing: ```singularity pull shub://ReproNim/niceman\n``` worked... I guess I got spoiled by github not carrying about the case?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#751 reveals too much python in \"incorrect\" (?) invocation of singularity pull",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/751",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497385598.410223",
        "date": 1497385598410
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#750 mush mode_t' https://github.com/singularityware/singularity/pull/750 by truatpasteurdotfr",
                "text": "*Description of the Pull Request (PR):*\n\nfix building on musl based alpine linux 3.6\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #722\n\n*Checkoff for all PRs:*\n\n• [X ] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [X ] I have tested this PR locally with a `make test`\n• [ ] This PR is NOT against the project's master branch\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [X ] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/truatpasteurdotfr|truatpasteurdotfr>",
                "title": "#750 mush mode_t",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/750",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497379689.357905",
        "date": 1497379689357
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-308183818|#749: Support singularity pull from quay.io>",
                "text": "ah, and the tag \"latest\" is used by default if the user doesn't specify one. If there is no tag \"latest\" then you would see that bug. The reason it is trying to retrieve a manifest / tags is likely because there was a 401 response for the first call. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-308183818|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497373611.109587",
        "date": 1497373611109
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308183702|#745: Singularity static binary>",
                "text": "*static compilation*: Binary packaging is what I want to use (Conda), but this pkg-manager does not have root privileges. \n\n*localstatedir*: the problem is when I take a package managers, like Conda where I ship binary files and the package manager does not have root privileges. So I can get Singularity to the users computer, but I have no way to say please use /tmp/ or /home/user/tmp/ instead. Even worse, Singularity is assuming some directory under `/usr/var` which was not created and refuses to work. Even with root privileges it is not creating the the missing directories.\n\nI think especially when Singularity tries more and more to run without root, this would be a nice feature to get Singularity easily and run containers purely in user-space.",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308183702|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497373584.100407",
        "date": 1497373584100
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-308178751|#749: Support singularity pull from quay.io>",
                "text": "Hey @nathanweeks ! The --size assumes a properly formed version 1 manifest, so we would need to look at what quay.io is delivering. I suspect based on your errors that it's not the same manifest, but I'll need to check this out.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/749#issuecomment-308178751|#749: Support singularity pull from quay.io>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497372537.711027",
        "date": 1497372537711
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308177766|#746: autogen.sh missing, referenced in INSTALL.md>",
                "text": "thanks @gmkurtzer ! And it looks like we do have those steps in the website doc instructions too.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308177766|#746: autogen.sh missing, referenced in INSTALL.md>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497372319.632631",
        "date": 1497372319632
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-308175150|#744: --quite is not working>",
                "text": "Hi @gmkurtzer!\n\nMaybe we can make `--silent` take arguments like pythons logging module is doing. warn/error and so on? I think there are use-cases where you want to omit warnings but see errors.\n\nJust a little bit of background, I try to create a <https://conda.io/docs/using/|conda> package for Singularity (<https://github.com/bioconda/bioconda-recipes/blob/master/recipes/singularity/meta.yaml>) and in Conda you don't know where your package ends up. it is relocatable and a user can install it.\nWhen I do this, Singularity obviously was not able to set everything up under `/usr/local/var/singularity/`.\n\nI found that Singularity is working quite well with this setup, but the warnings are annoying. \nBtw. why does `/usr/local/var/singularity/mnt/overlay/final/etc/resolv.conf` needs to be in the container?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-308175150|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497371740.426112",
        "date": 1497371740426
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308169672|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "@gmkurtzer true! In this case it seems to be the ordering will do the trick! Any estimation of a new release with this fix.",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308169672|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497370566.986890",
        "date": 1497370566986
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308167345|#745: Singularity static binary>",
                "text": "Hi everyone,\n\n*static, single file build*: There are multiple reasons why Docker can release a single binary file where it is not feasible with Singularity. In theory, if we convert all of the shell code and Python code to C, we probably could, but I don't like this idea for a multitude of reasons. Additionally Docker is written in Go which facilitates this.\n\n*static compilation*: This is possible, but I would prefer binary packaging (e.g. RPM/DEB).\n\n*localstatedir*: Jason is correct, this is set during compilation time, and it is designed to be immutable as where it is must be on the local file system (e.g. not over NFS), and thus should be defined by the system administrator. While this could be a configurable option, it is not something that needs any modification or touching, and these directories are created by the installer (vs. configured where the admin will have to modify the host system afterwords).\n\nHope that helps.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308167345|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497370085.803896",
        "date": 1497370085803
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308164683|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "I think you have a typo \"-B /home/bag/temp/foobar:/home/bag/foobar:rw\" (missing the `temp/` directory in the dest path.\n\nBTW, you can take a shortcut of just supplying `-B /home/bag/temp/foobar` in that if dest == source, it is assumed.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308164683|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497369564.591921",
        "date": 1497369564591
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308163753|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "This is actually working only because you happen to be in a Docker container rather then an image. If you did this in an image, you would get a failure, but when run like this, Docker containers are just directories on the host system, and Singularity will indeed try to create the directory, and it works. \n\nThe entire overlay workhorse code is wrapped in an `#ifdef` that is thus getting skipped and instead printing \"OverlayFS not supported by host build\".\n\nYou are right that you can use the registry to \"fool\" singularity into doing something that it wasn't intending which runs into a registry change where we can namespace key/values.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-308163753|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497369384.516784",
        "date": 1497369384516
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308161168|#746: autogen.sh missing, referenced in INSTALL.md>",
                "text": "Comments on [development 1bd6d5a]?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308161168|#746: autogen.sh missing, referenced in INSTALL.md>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497368894.317483",
        "date": 1497368894317
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308159611|#746: autogen.sh missing, referenced in INSTALL.md>",
                "text": "Actually, this is the correct behavior for released tarballs (`autogen.sh` not being present). The purpose of autogen is to create the `configure` script and all of the `Makefile.in`s.\n\nWe need to update the INSTALL.md to reflect the difference when pulling a developer source tree Vs. a release source tree.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-308159611|#746: autogen.sh missing, referenced in INSTALL.md>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497368608.200589",
        "date": 1497368608200
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-308156547|#741: singularity exec git not working>",
                "text": "Excellent! The fix (not zero'ing out the passwd/group files on every bootstrap loop) will be included in the next release.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-308156547|#741: singularity exec git not working>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497368030.967507",
        "date": 1497368030967
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/741|#741 singularity exec git not working> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/741|#741 singularity exec git not working> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497368030.967475",
        "date": 1497368030967
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-308155635|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "Ahh, very cool, thanks @truatpasteurdotfr! Will you send a PR (so you can get credit for the one line fix!)? ;-)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-308155635|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497367861.896792",
        "date": 1497367861896
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/742|#742 Update security admin guide for Singularity 2.3> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/742|#742 Update security admin guide for Singularity 2.3> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497367740.845003",
        "date": 1497367740845
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-308154967|#742: Update security admin guide for Singularity 2.3>",
                "text": "It looks great to me, thanks @vsoch and @tcooper! :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-308154967|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497367740.844895",
        "date": 1497367740844
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308153982|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "For information I have tested with this script\n\n```bash\n#PBS -S /bin/bash\n#PBS -N singularity\n#PBS -j oe\n#PBS -o logs/\n#PBS -l walltime=12:00:00\n#PBS -l select=1:ncpus=4:mem=20gb\n#PBS -q haswellq\n\ncd $PBS_O_WORKDIR\n\nmkdir $PBS_JOBID\n\ncd $PBS_JOBID\n\nSINGULARITY_LOCALCACHEDIR=`pwd` singularity --debug exec docker://centos cat /etc/redhat-release; echo $? ; ls -d .singularity_runtime* ; echo $? ;\n\nls -al .singularity-runtime.*/centos/usr\n\ncd ..\n\nrm -rf $PBS_JOBID\n```\n\nand I have got this error (especially the end with the Warnings) I don't know if it is normal  (see attachment)\n<https://github.com/singularityware/singularity/files/1071912/log2.txt|log2.txt>",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308153982|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497367575.776057",
        "date": 1497367575776
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-308151791|#744: --quite is not working>",
                "text": "Heya @bgruening,\n\nI typically consider --quiet to suppress normal output, not warnings or errors as their presence describes a misalignment between the expected/requested behavior and what is possible. I would tend to feel that warnings (and of course errors) are printed with --quiet.\n\nWith that said, I would be open to supporting a --silent option, that won't even print warnings or errors. Any other opinions?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/744#issuecomment-308151791|#744: --quite is not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497367172.609104",
        "date": 1497367172609
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#749 Support singularity pull from quay.io' https://github.com/singularityware/singularity/issues/749 by nathanweeks",
                "text": "The BioContainers project (<https://biocontainers.pro/>) uses quay.io as its Docker registry. Per <https://github.com/singularityware/singularity/issues/491,> it looks like quay.io should be a supported Docker registry in Singularity 2.3. However, two issues: \n\n1. Singularity 2.3 is unable to determine the image size: \n\n```$ singularity pull docker://quay.io/biocontainers/canu\nERROR: Could not obtain the container size, try using --size\nABORT: Aborting with RETVAL=255\n```\n\n1. (specifying the --size) Singularity doesn't automatically select a tag:\n\n```$ singularity pull --size 4096 docker://quay.io/biocontainers/canu\nInitializing Singularity image subsystem\nOpening image file: canu.img\nCreating 4096MiB image \nBinding image to loop\nCreating file system within image \nImage is done: canu.img\nDocker image path: quay.io/biocontainers/canu:latest\nERROR Improperly formed manifest, layers or fsLayers must be present\n```\nUsing the singularity size.py script to debug:\n\n```$ SINGULARITY_CONTENTS=canu.txt SINGULARITY_CONTAINER=docker://quay.io/biocontainers/canu /usr/libexec/singularity/python/size.py\n...\nDEBUG GET https://quay.io/v2/biocontainers/canu/tags/list\n```\n\nThe tags/list URL returns:\n```{\"name\":\"biocontainers/canu\",\"tags\":[\"1.3--0\",\"1.4--1\",\"1.4--pl5.22.0_2\",\"1.5--pl5.22.0_0\"]}\n```\n\nNo \"latest\" tag, though the tags are listed from least recent to most recent (not sure if that's guaranteed or just a side effect of lexicographic ordering).",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/nathanweeks|nathanweeks>",
                "title": "#749 Support singularity pull from quay.io",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/749",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497366893.493316",
        "date": 1497366893493
    },
    {
        "user": "godlovedc",
        "text": "<@U2MT7BF0V|godlovedc> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1497361807.412851",
        "date": 1497361807412
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308080457|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "My guess is that it is coming from this line : <https://github.com/singularityware/singularity/blob/adf5259ac94d7b213c649f073dcda32459b0c8b7/src/util/file.c#L350>\n\n```return(nftw(dir, _unlink, 32, FTW_DEPTH|FTW_MOUNT|FTW_PHYS)); \n```\nMaybe the value of 32 for the typeflag is not good or maybe FTW_MOUNT is not good also since my workdir is not mount has the samelocation of the singularity bin or the location of the computation node.",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308080457|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497351354.702913",
        "date": 1497351354702
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by abdulrahmanazab on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-308080071|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "text": "Ok thanks for the answer. We installed it now using the RPM on our 500 nodes. I guess you can close this issue unless you are planning to provide an alternative in the future ;)\nAlso I think it would be useful to write something about this in the documentation because there will be similar cases.",
                "pretext": "[singularityware/singularity] New comment by abdulrahmanazab on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-308080071|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497351248.681853",
        "date": 1497351248681
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308067750|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Here is the log (localstatevar has been disabled this time)\n\n```bash\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-development.g6755b2f\nExec'ing: /gpfs/opt/tools/singularity/dev/libexec/singularity/cli/exec.exec\nEvaluating args: 'docker://centos cat /etc/redhat-release'\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/my_user/.singularity\nVERBOSE2 SINGULARITY_ENVIRONMENT found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d/environment\nVERBOSE2 SINGULARITY_RUNSCRIPT found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/singularity\nVERBOSE2 SINGULARITY_TESTFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d/test\nVERBOSE2 SINGULARITY_DEFFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d/Singularity\nVERBOSE2 SINGULARITY_ENVBASE found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.SyFX3JlY/centos/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /gpfs/workdir/my_user/Code/singularity\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as /tmp/.singularity-layers.d5ursVW6\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\nVERBOSE2 SINGULARITY_CONTAINER found as docker://centos\nDEBUG Found uri docker://\nDEBUG \n*** STARTING DOCKER IMPORT PYTHON  ****\nDEBUG Docker layers and (env,labels,runscript) will be written to: /tmp/.singularity-layers.d5ursVW6\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\nDEBUG Starting Docker IMPORT, includes environment, runscript, and metadata.\nVERBOSE Docker image: centos\nVERBOSE2 Specified Docker ENTRYPOINT as %runscript.\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: library\nVERBOSE Repo Name: centos\nVERBOSE Repo Tag: latest\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG GET <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:library/centos:pull>\nDEBUG Headers found: Content-Type,Authorization,Accept\nVERBOSE3 Response on obtaining token is None.\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG Image manifest version 2.2 found.\nDEBUG Adding digest sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG Using 9 workers for multiprocess.\nVERBOSE3 Found Docker command (Entrypoint) None\nVERBOSE3 Found Docker command (Cmd) /bin/bash\nVERBOSE3 Adding Docker CMD as Singularity runscript...\nDEBUG /bin/bash\nVERBOSE3 Found Docker command (Env) PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nVERBOSE3 Found Docker container environment!\nVERBOSE3 Adding Docker environment to metadata tar\nDEBUG Found template for tarinfo\nVERBOSE3 Found Docker command (Labels) {u'build-date': u'20170605', u'vendor': u'CentOS', u'name': u'CentOS Base Image', u'license': u'GPLv2'}\nVERBOSE3 Found Docker container labels!\nVERBOSE3 Adding Docker labels to metadata tar\nDEBUG Found template for tarinfo\nVERBOSE3 Adding Docker runscript to metadata tar\nDEBUG Found template for tarinfo\nDEBUG metadata file /gpfs/home/my_user/.singularity/metadata/sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz already exists, will over-write.\nVERBOSE2 Tar file with Docker env and labels: /gpfs/home/my_user/.singularity/metadata/sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz\nVERBOSE3 Writing Docker layers files to /tmp/.singularity-layers.d5ursVW6\nVERBOSE2 Writing file /tmp/.singularity-layers.d5ursVW6 with mode w.\nVERBOSE2 Writing file /tmp/.singularity-layers.d5ursVW6 with mode a.\nDEBUG *** FINISHING DOCKER IMPORT PYTHON PORTION ****\nDocker image path: index.docker.io/library/centos:latest\nCache folder set to /gpfs/home/my_user/.singularity/docker\nCreating container runtime...\nImporting: base Singularity environment\nExploding layer: sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d.tar.gz\nExploding layer: sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz\nVERBOSE [U=0,P=12466]      message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Initialize configuration file: /gpfs/opt/tools/singularity/dev/etc/singularity/singularity.conf\nDEBUG   [U=0,P=12466]      singularity_config_parse()                Starting parse of configuration file /gpfs/opt/tools/singularity/dev/etc/singularity/singularity.conf\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key max loop devices = '256'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key allow pid ns = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key config passwd = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount home = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key bind path = '/etc/localtime'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key enable overlay = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=12466]      singularity_config_parse()                Got config key sessiondir max size = '16'\nDEBUG   [U=0,P=12466]      singularity_config_parse()                Finished parsing configuration file '/gpfs/opt/tools/singularity/dev/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=12466]      singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=12466]      singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/gpfs/opt/tools/singularity/dev…",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-308067750|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497347936.988162",
        "date": 1497347936988
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308007864|#745: Singularity static binary>",
                "text": "@bgruening I _think_ there may be a `SINGULARITY_*` variable that may control that... I'm not sure which though. @gmkurtzer ... is that the default for `SINGULARITY_CACHEDIR`? ",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308007864|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497330357.701355",
        "date": 1497330357701
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308001474|#745: Singularity static binary>",
                "text": "@jmstover yes I'm taking about a static compile option. But with such a binary hard coding a path like `--localstatedir` can be problematic. Can `--localstatedir` not be setup during runtime?",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-308001474|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497327002.350625",
        "date": 1497327002350
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308000703|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "@gmkurtzer  tried this as well, but odering does not seem to be the problem.\n\n```\n singularity exec -B /home/bag/temp/foobar:/home/bag/foobar:rw -B /home/bag/temp:/home/bag/temp:ro singularity_import/samtools:1.4.1--0 touch /home/bag/temp/foobar/file.txt \n\nWARNING: Bind file destination does not exist in container: /usr/local/var/singularity/mnt/overlay/final/etc/resolv.conf\ntouch: /home/bag/temp/foobar/file.txt: Read-only file system\n\n```",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-308000703|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497326628.310744",
        "date": 1497326628310
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307988363|#745: Singularity static binary>",
                "text": "@bgruening Are you talking of a static compile of singularity? I mean, I think the locations under `/usr/local/var` are because of the compile options... i.e. `$prefix/var` as `--localstatedir` wasn't specified.\n\nStatic versions are already build of libsingularity-{image,runtime} ... so I'm guessing just having a static target in the Makefiles that builds with `-static` would probably get close to what you're wanting...",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307988363|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497320856.692430",
        "date": 1497320856692
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-307971029|#743: child rw mounts gets overwritten by parent ro mounts>",
                "text": "Hi @bgruening,\n\nThe problem actually has to do with ordering, and the current ordering is non-intuitive. What is happening is that Singularity first mounted `/home/bag/temp/foobar` as read-write and then it mounted `/home/bag/temp` as read-only. If you change the ordering I bet you it would work. To make things more intuitive, I will change the ordering.\n\nDoes that seem reasonable?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/743#issuecomment-307971029|#743: child rw mounts gets overwritten by parent ro mounts>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497313281.751688",
        "date": 1497313281751
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-307965367|#746: autogen.sh missing, referenced in INSTALL.md>",
                "text": "This is definitely a bug - is this the .tar.gz from the tagged repo, or another download location? The autogen.sh is included in master branch, so it (should) be included in the .tar.gz.\n\n@gmkurtzer I just downloaded the most recent .tar.gz, and it is indeed not there. Did you do anything special / different so it wouldn't be included? Is the install intended to be done in a different way (not using this file?) If so, could you post here and I'll update the docs (and we will need to address this issue by also updating the INSTALL.md)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/746#issuecomment-307965367|#746: autogen.sh missing, referenced in INSTALL.md>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497310873.406959",
        "date": 1497310873406
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307964506|#745: Singularity static binary>",
                "text": "oh that's pretty neat! Although I have no idea how to do it - would it come down to providing a dump of executables that could be extracted (with root) to the standard `/usr/local`? The tricker part is the config file, I suppose if we want it for CI we could just use the default settings.\n\nThis might be easy to do (and maintain) if we use the same CI places to build (and then save the executables). @gmkurtzer what are your thoughts, would this work for Singularity? Or is there other stuffs that wouldn't be \"dumpable\" that we need to account for?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307964506|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497310534.355615",
        "date": 1497310534355
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307962475|#745: Singularity static binary>",
                "text": "@vsoch have a look at this: <https://docs.docker.com/engine/installation/binaries/#install-static-binaries>\nJust downloading a binary is way faster than compiling and you don't need the build libraries and tools.",
                "pretext": "[singularityware/singularity] New comment by bgruening on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307962475|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497309759.231434",
        "date": 1497309759231
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307961933|#745: Singularity static binary>",
                "text": "Would a traditional install not suit your needs on a CI environment? If the issue is install time, you could take advantage of caching, for example <https://circleci.com/docs/1.0/how-cache-works/|on circle> or <https://docs.travis-ci.com/user/caching/|on travis>. If this doesn't meet your need, could you point me to something about what Docker is doing so I can learn more?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/745#issuecomment-307961933|#745: Singularity static binary>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497309563.199672",
        "date": 1497309563199
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-307961613|#747: OverlayFS and 2.6.32-573 kernel>",
                "text": "ruhroh. @gmkurtzer this probably needs priority attention!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/747#issuecomment-307961613|#747: OverlayFS and 2.6.32-573 kernel>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497309439.179369",
        "date": 1497309439179
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#748 Singularity Ignores Umask when Creating Images' https://github.com/singularityware/singularity/issues/748 by Saford91",
                "text": "*Version of Singularity: 2.3 on CentOS 6.8 and 2.2 on CentOS 7.3.*\n\n*Expected behavior*\n\nI expect files Singularity creates to use the current umask.\n\nFor example:\n\n```\n\n*umask 0077*\n\n*singularity create container.img*\n\n...\n\n*ls -l container.img*\n\n-rwx------ 1 steve steve  805306400 Jun 12 16:36 container.img\n```\n\n*Actual behavior*\n\nSingularity creates the container as if the umask is set to 0022.\n\n```\n\n*umask 0077*\n\n*singularity create container.img*\n\n...\n\n*ls -l container.img*\n\n-rwxr-xr-x 1 steve steve  805306400 Jun 12 16:52 container.img\n```\n\n*Steps to reproduce behavior*\n\nSet umask to 0077\nCreate container file",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/Saford91|Saford91>",
                "title": "#748 Singularity Ignores Umask when Creating Images",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/748",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497300750.139709",
        "date": 1497300750139
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307898173|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "text": "Update: I performed the conversion with docker2singularity and it worked without problems. What is more the problematic file `/usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info` is not present in the image created by docker2singularity (which is consistent with the original docker image).\n\nI am not sure why the two images behave so differently.",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307898173|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497296597.757425",
        "date": 1497296597757
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307895032|#741: singularity exec git not working>",
                "text": "Hi @gmkurtzer, just let you know that I just cloned a copy from the latest singularity git repo and it works. But the released version does not work.",
                "pretext": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307895032|#741: singularity exec git not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497295807.500618",
        "date": 1497295807500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307895029|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "text": "for writable you need sudo, so you would need to run:\n\n```sudo singularity shell -w /home/groups/russpold/singularity_images/poldracklab_fmriprep_0.4.5.img\n```\n\nand then remove the files. Wheel files have historically caused a lot of trouble, they are some sort of new package (akin to an egg). The reason you don't see wheels in Docker is because the package works to \"unpack at a later time\" <http://wheel.readthedocs.io/en/latest/|see docs here>. The solutions I can think of, off the top of my head, would be to package the Docker images with the wheels already extracted, or just removed. Take a look at <https://wheel.readthedocs.io/en/latest/#usage|usage here> - it looks like you can control where they unpack to, so perhaps you could do a folder that could be mounted (with write) or I bet you could force them to install before actually running the scripts. Keep us updated on what you find!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307895029|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497295807.500496",
        "date": 1497295807500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307881648|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "text": "I also tried removing the files like @satra did, but this is no longer possible\n```\n[chrisgor@sh-ln02 login! ~]$ singularity shell -w /home/groups/russpold/singularity_images/poldracklab_fmriprep_0.4.5.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity poldracklab_fmriprep_0.4.5.img:~&gt; chmod a=rw /usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info\nchmod: changing permissions of '/usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info': Operation not permitted\nSingularity poldracklab_fmriprep_0.4.5.img:~&gt; rm -rf /usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info\nrm: cannot remove '/usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info': Permission denied\n```",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307881648|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497292934.522884",
        "date": 1497292934522
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307879340|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "text": "BTW this is singularity 2.3 on Sherlock2",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307879340|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497292501.368687",
        "date": 1497292501368
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307879226|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "text": "I just run into the same issue. Something funky is going on. Here is what I did.\n\n1. I imported a docker image directly from docker hub: `singularity pull -s 15307 --name /home/groups/russpold/singularity_images/poldracklab_fmriprep_0.4.5.img docker://poldracklab/fmriprep:0.4.5`\n2. When I tried to run it I got this error:\n     ```[chrisgor@sh-ln02 login! ~]$ /home/groups/russpold/singularity_images/poldracklab_fmriprep_0.4.5.img\n     Traceback (most recent call last):\n     File \"/usr/local/miniconda/bin/fmriprep\", line 6, in &lt;module&gt;\n     from pkg_resources import load_entry_point\n     File \"&lt;frozen importlib._bootstrap&gt;\", line 961, in _find_and_load\n     File \"&lt;frozen importlib._bootstrap&gt;\", line 950, in _find_and_load_unlocked\n     File \"&lt;frozen importlib._bootstrap&gt;\", line 646, in _load_unlocked\n     File \"&lt;frozen importlib._bootstrap&gt;\", line 616, in _load_backward_compatible\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2985, in &lt;module&gt;\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2971, in _call_aside\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2998, in _initialize_master_working_set\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 651, in _build_master\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 644, in __init__\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 700, in add_entry\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 1990, in find_on_path\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2399, in from_location\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2740, in _reload_version\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2364, in _version_from_file\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 2532, in _get_metadata\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 1873, in get_metadata_lines\n     File \"/usr/local/miniconda/lib/python3.6/site-packages/setuptools-27.2.0-py3.6.egg/pkg_resources/__init__.py\", line 1861, in get_metadata\n     PermissionError: [Errno 13] Permission denied: '/usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info'\n     ```\n3. I looked at the problematic file. It has no permissions:\n     ```[chrisgor@sh-ln02 login! ~]$ singularity exec -c /home/groups/russpold/singularity_images/poldracklab_fmriprep_0.4.5.img ls -al /usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info\n     ---------- 1 root root 0 Jun 12 12:52 /usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info\n     ```\n4. I tried to do the same thing in Docker. No errors:\n     ```PS C:\\Users\\filo&gt; docker run -ti --rm --read-only --tmpfs /tmp --entrypoint=bash poldracklab/fmriprep:0.4.5\n     root@7fba7fdf5578:~/src/fmriprep# fmriprep\n     usage: fmriprep [-h] [-v]\n                 [--participant_label PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]\n                 [-s SESSION_ID] [-r RUN_ID] [-t TASK_ID] [--debug]\n                 [--nthreads NTHREADS] [--n_cpus NTHREADS]\n                 [--omp-nthreads OMP_NTHREADS] [--mem_mb MEM_MB]\n                 [--use-plugin USE_PLUGIN]\n                 [--ignore {fieldmaps,slicetiming} [{fieldmaps,slicetiming} ...]]\n                 [--bold2t1w-dof {6,9,12}]\n                 [--output-space {T1w,template,fsnative,fsaverage,fsaverage6,fsaverage5} [{T1w,template,fsnative,fsaverage,fsaverage6,fsaverage5} ...]]\n                 [--template {MNI152NLin2009cAsym}]\n                 [--output-grid-reference OUTPUT_GRID_REFERENCE]\n                 [--skull-strip-ants] [--no-skull-strip-ants] [--fmap-bspline]\n                 [--fmap-no-demean] [--no-freesurfer] [--no-submm-recon]\n                 [-w WORK_DIR] [--reports-only] [--write-graph]\n                 bids_dir output_dir {participant}\n     ```\n5. I looked at the problematic file in Docker. It's not there!\n     ```PS C:\\Users\\filo&gt; docker run -ti --rm --read-only --tmpfs /tmp --entrypoint=ls poldracklab/fmriprep:0.4.5 -al /usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info\n     ls: cannot access '/usr/local/miniconda/lib/python3.6/site-packages/.wh.conda-4.3.11-py3.6.egg-info': No such file or directory\n     ```\n\nThis file exists in the singualrity image, but does not in the docker image that the singularity image was created from. Very strange! I'll try doing the conversion using docker2singularity and report back",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/571#issuecomment-307879226|#571: guidelines for creating readonly docker containers compatible with singularity>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497292477.360562",
        "date": 1497292477360
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307812881|#741: singularity exec git not working>",
                "text": "@gmkurtzer Yes that's it. I tried to recreate and bootstrap the container many times, and the passwd file is empty. The current singularity version I am using is 2.3. But git works and the passwd file is normal if created and bootstrapped with Singularity 2.2.99. So probably there is some bug in the released version 2.3.  ",
                "pretext": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307812881|#741: singularity exec git not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497279007.344857",
        "date": 1497279007344
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#747 OverlayFS and 2.6.32-573 kernel' https://github.com/singularityware/singularity/issues/747 by hra0031",
                "text": "We are using CentOS 6.7/6.9 with kernel 2.6.32-573/2.6.32-696. This kernel doesn't have overlayfs.ko, but this functionality is really handy (we bind /scratch and /apps directories). This functionality is disabled by default because configure.ac don't find kernel module. When I study the source code I found a way to bypass the settings by setting the environment variable `SINGULARITY_OVERLAYFS_ENABLED=1`. In this case, `OVERLAYFS_ENABLED` is propagated to the registry and the functionality is enabled.\n\n```$ singularity --debug shell -e --bind /scratch docker://centos:latest\n...\nDEBUG   [U=4573,P=1123]    singularity_runtime_overlayfs()           Checking if overlayfs should be used\nDEBUG   [U=4573,P=1123]    singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(enable overlay, yes)\nDEBUG   [U=4573,P=1123]    singularity_config_get_value_impl()       Returning configuration value enable overlay='yes'\nDEBUG   [U=4573,P=1123]    singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(enable overlay, yes) = 1\nDEBUG   [U=4573,P=1123]    singularity_registry_get()                Returning NULL on 'DISABLE_OVERLAYFS'\nDEBUG   [U=4573,P=1123]    singularity_registry_get()                Returning NULL on 'WRITABLE'\nVERBOSE [U=4573,P=1123]    singularity_runtime_overlayfs()           OverlayFS not supported by host build\n...\nDEBUG   [U=4573,P=13971]   singularity_registry_get()                Returning value from registry: 'BINDPATH' = '/scratch,'\nDEBUG   [U=4573,P=13971]   singularity_runtime_mount_userbinds()     Checking for 'user bind control' in config\nDEBUG   [U=4573,P=13971]   singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(user bind control, yes)\nDEBUG   [U=4573,P=13971]   singularity_config_get_value_impl()       Returning configuration value user bind control='yes'\nDEBUG   [U=4573,P=13971]   singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(user bind control, yes) = 1\nDEBUG   [U=4573,P=13971]   singularity_runtime_mount_userbinds()     Parsing SINGULARITY_BINDPATH for user-specified bind mounts.\nDEBUG   [U=4573,P=13971]   singularity_runtime_mount_userbinds()     Found bind: /scratch -&gt; container:/scratch\nDEBUG   [U=4573,P=13971]   singularity_runtime_mount_userbinds()     Checking if bind point is already mounted: /scratch\nDEBUG   [U=4573,P=13971]   singularity_runtime_rootfs()              Returning container_directory: /apps/all/Singularity/2.3-develop/var/singularity/mnt/container\nDEBUG   [U=4573,P=13971]   check_mounted()                           Opening /proc/mounts\nDEBUG   [U=4573,P=13971]   check_mounted()                           Iterating through /proc/mounts\nDEBUG   [U=4573,P=13971]   singularity_registry_get()                Returning value from registry: 'OVERLAYFS_ENABLED' = '1'\nVERBOSE [U=4573,P=13971]   singularity_runtime_mount_userbinds()     Creating bind directory on overlay file system: /scratch\n...\nSingularity centos:latest:/tmp&gt; ls /scratch\nbackup  sys  temp  work\n```\n\n*Version of Singularity:*\n\nSingularity 2.3/develop\n\n*Expected behavior*\n\nOverlayFS shouldn't work in that old kernel.\n\n*Actual behavior*\n\nIt is working!\n\n*Steps to reproduce behavior*\n\nset env SINGULARITY_OVERLAYFS_ENABLED=1",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hra0031|hra0031>",
                "title": "#747 OverlayFS and 2.6.32-573 kernel",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/747",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497277892.907469",
        "date": 1497277892907
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307801078|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "We are experiencing a similar problem. The cleanup process can't remove usr/share/zoneinfo/UTC and exit. (CentOS 6.7/6.9)\n```exit\nVERBOSE [U=4573,P=21391]   main()                                    Cleaning directory: /tmp/.singularity-runtime.NpHtCEyE\nDEBUG   [U=4573,P=21391]   s_rmdir()                                 Removing directory: /tmp/.singularity-runtime.NpHtCEyE\nWARNING [U=4573,P=21391]   writable()                                Failed changing permission of file: /tmp/.singularity-runtime.NpHtCEyE/centos:latest/home/hra0031\nWARNING [U=4573,P=21391]   unlink()                                  Failed removing file: /tmp/.singularity-runtime.NpHtCEyE/centos:latest/usr/share/zoneinfo/UTC\nERROR   [U=4573,P=21391]   main()                                    Could not remove directory /tmp/.singularity-runtime.NpHtCEyE: Device or resource busy\nABORT   [U=4573,P=21391]   main()                                    Retval = 255\n```\nIn the output, I'm missing debug information from the original thread. I can see only debug output after daemonize. When I try to remove the file manually it is working without problem.",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307801078|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497276644.422863",
        "date": 1497276644422
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#746 autogen.sh missing, referenced in INSTALL.md' https://github.com/singularityware/singularity/issues/746 by lugh9",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\neither include autogen.sh or remove reference from INSTALL.md\n\n*Actual behavior*\n\nINSTALL.md references an installation component not included in distribution package\n\n*Steps to reproduce behavior*\n\ntar xzfv singularity-2.3.tar.gz\ncd singularity-2.3\n./autogen.sh\n-bash: ./autogen.sh: No such file or directory",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/lugh9|lugh9>",
                "title": "#746 autogen.sh missing, referenced in INSTALL.md",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/746",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497275749.080425",
        "date": 1497275749080
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/724|#724 urlparse is buggy in Python 2.6> by <https://github.com/hra0031|hra0031>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/724|#724 urlparse is buggy in Python 2.6> by <https://github.com/hra0031|hra0031>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497264867.409192",
        "date": 1497264867409
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-307756711|#724: urlparse is buggy in Python 2.6>",
                "text": "I think this is resolved... closing",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-307756711|#724: urlparse is buggy in Python 2.6>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497264867.409179",
        "date": 1497264867409
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#745 Singularity static binary' https://github.com/singularityware/singularity/issues/745 by bgruening",
                "text": "For CI environments it would be very handy to offer static binaries, like Docker is doing.\n\nI have seen a few locations where Singularity assumes some directories under `/usr/local/var/` which seems problematic during runtime.\n\nAnyone know if this is currently possible?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/bgruening|bgruening>",
                "title": "#745 Singularity static binary",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/745",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497254671.201848",
        "date": 1497254671201
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#744 --quite is not working' https://github.com/singularityware/singularity/issues/744 by bgruening",
                "text": "*Version of Singularity:*\n\n```singularity --version\n2.3-master.g044a991b\n```\n\n*Expected behavior*\n\nSuppress warnings during execution.\n\n*Actual behavior*\n\nI get:\n```singularity --quiet exec  singularity_import/samtools:1.4.1--0 ls -l\nWARNING: Bind file destination does not exist in container: /usr/local/var/singularity/mnt/overlay/final/etc/resolv.conf\n```\n\n*Steps to reproduce behavior*\n\n```singularity --quiet exec  singularity_import/samtools:1.4.1--0 ls -l\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/bgruening|bgruening>",
                "title": "#744 --quite is not working",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/744",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497254407.144538",
        "date": 1497254407144
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#743 child rw mounts gets overwritten by parent ro mounts' https://github.com/singularityware/singularity/issues/743 by bgruening",
                "text": "*Version of Singularity:*\n\n```singularity --version\n2.3-master.g044a991b\n```\n\n*Expected behavior*\n\nIf I mount two folder that are nested like\n`-B /home/bag/temp:/home/bag/temp:ro` and `-B /home/bag/temp/foobar:/home/bag/foobar:rw`\nthe parent `ro` folder takes precedence over the child `rw` mount. This prevents fine grained user-mounts.\n\n*Actual behavior*\n\nAbility to write into any mount that is labelled as `rw`.\n\n*Steps to reproduce behavior*\n\n ```singularity exec -B /home/bag/temp:/home/bag/temp:ro -B /home/bag/temp/foobar:/home/bag/foobar:rw  singularity_import/samtools:1.4.1--0 touch /home/bag/temp/foobar/file.txt\ntouch: /home/bag/temp/foobar/file.txt: Read-only file system\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/bgruening|bgruening>",
                "title": "#743 child rw mounts gets overwritten by parent ro mounts",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/743",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497253999.060569",
        "date": 1497253999060
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307565734|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "<https://gist.github.com/truatpasteurdotfr/e6729e428e76b47f1fda9a3fe8509915> builds needs some testing ;P",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307565734|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497102006.352201",
        "date": 1497102006352
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307548528|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "fixed for GLOB, it stops a little later with a mode_t error:\n```/bin/bash ../../../libtool  --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../../../src  -DSYSCONFDIR=\\\"/etc\\\" -DLOCALSTATEDIR=\\\"/var\\\" -DLIBEXECDIR=\\\"/usr/libexec\\\" -DNS_CLONE_NEWPID -DNS_CLONE_FS -DNS_CLONE_NEWNS -DNS_CLONE_NEWUSER -DNS_CLONE_NEWIPC -DSINGULARITY_NO_NEW_PRIVS -DSINGULARITY_MS_SLAVE -DSINGULARITY_OVERLAYFS  -Os -fomit-frame-pointer -Wall -fpie -fPIC  -Os -fomit-frame-pointer -MT ../../util/libimage_la-suid.lo -MD -MP -MF ../../util/.deps/libimage_la-suid.Tpo -c -o ../../util/libimage_la-suid.lo `test -f '../../util/suid.c' || echo './'`../../util/suid.c\nlibtool: compile:  gcc -DHAVE_CONFIG_H -I. -I../../../src -DSYSCONFDIR=\\\"/etc\\\" -DLOCALSTATEDIR=\\\"/var\\\" -DLIBEXECDIR=\\\"/usr/libexec\\\" -DNS_CLONE_NEWPID -DNS_CLONE_FS -DNS_CLONE_NEWNS -DNS_CLONE_NEWUSER -DNS_CLONE_NEWIPC -DSINGULARITY_NO_NEW_PRIVS -DSINGULARITY_MS_SLAVE -DSINGULARITY_OVERLAYFS -Os -fomit-frame-pointer -Wall -fPIC -Os -fomit-frame-pointer -MT ../../util/libimage_la-suid.lo -MD -MP -MF ../../util/.deps/libimage_la-suid.Tpo -c ../../util/suid.c  -fPIC -DPIC -o ../../util/.libs/libimage_la-suid.o\nIn file included from ../../util/suid.c:32:0:\n../../../src/util/file.h:26:27: error: unknown type name 'mode_t'\n int chk_perms(char *path, mode_t mode);\n                           ^~~~~~\n../../../src/util/file.h:27:26: error: unknown type name 'mode_t'\n int chk_mode(char *path, mode_t mode);\n                          ^~~~~~\n../../../src/util/file.h:38:25: error: unknown type name 'mode_t'\n int s_mkpath(char *dir, mode_t mode);\n                         ^~~~~~\n```\n\nI just need a online addition to fix but ymmv:\n```\n--- singularity-master/src/util/file.h\n+++ singularity-master-alpine/src/util/file.h\n@@ -23,6 +23,7 @@\n\n char *file_id(char *path);\n char *file_devino(char *path);\n+#include &lt;sys/stat.h&gt;\n int chk_perms(char *path, mode_t mode);\n int chk_mode(char *path, mode_t mode);\n int is_file(char *path);\n```",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307548528|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497079332.405533",
        "date": 1497079332405
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307543242|#742: Update security admin guide for Singularity 2.3>",
                "text": "@gmkurtzer I'll leave this to you when you take a look at my final changes. Who knows what I snuck in there...\n\nThanks for the issue @tcooper ! Let us know what other holes are in the docs - I don't have many years experience as any kind of HPC admin so I don't have a great sense of the thought process that one would go through, and likely this is reflected via some important stuffs missing in the docs.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307543242|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497071363.103273",
        "date": 1497071363103
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tcooper on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307542571|#742: Update security admin guide for Singularity 2.3>",
                "text": "Thanks for the additional detail...very much improved! I'll probably add a step in our Rocks roll-build process to check `singularity.spec.in` for the `#SUID programs` and trigger a warning if the list changes between versions. I'll let you guys close the issue when you're satisfied you've completed the updates.",
                "pretext": "[singularityware/singularity] New comment by tcooper on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307542571|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497070363.062407",
        "date": 1497070363062
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307541901|#742: Update security admin guide for Singularity 2.3>",
                "text": "hey @tcooper ! This might still need the magic touch of @gmkurtzer , but I gave an early pass at updating to addres this specific issue. Take a look --&gt; <http://singularity.lbl.gov/docs-security> and let us know what you'd like further explained, etc. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307541901|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497069361.022715",
        "date": 1497069361022
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tcooper on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538827|#742: Update security admin guide for Singularity 2.3>",
                "text": "Careless copy/paste from my dev system... sorry. There are only one of each of these.",
                "pretext": "[singularityware/singularity] New comment by tcooper on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538827|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497065310.839346",
        "date": 1497065310839
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538707|#742: Update security admin guide for Singularity 2.3>",
                "text": "I'm already starting work on the page, so if you post here I'll see it and forward along the copy paste, lol",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538707|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497065149.832640",
        "date": 1497065149832
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538684|#742: Update security admin guide for Singularity 2.3>",
                "text": "that's funny, do you know why your find lists create, action, and import twice? Mine I get just these:\n\n```find /usr/local/libexec/singularity/ -perm -4000\n/usr/local/libexec/singularity/bin/create-suid\n/usr/local/libexec/singularity/bin/copy-suid\n/usr/local/libexec/singularity/bin/action-suid\n/usr/local/libexec/singularity/bin/mount-suid\n/usr/local/libexec/singularity/bin/import-suid\n/usr/local/libexec/singularity/bin/export-suid\n/usr/local/libexec/singularity/bin/expand-suid\n```\nI think your computer has ghosties in it.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538684|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497065118.831206",
        "date": 1497065118831
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538676|#742: Update security admin guide for Singularity 2.3>",
                "text": "Heya @tcooper, great catches.\n\n@vsoch, awesome thanks! I will do this at my first opportunity (already getting late today).  I will post the updates here (unless you want to create another issue on the pages repo?).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538676|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497065108.830732",
        "date": 1497065108830
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538539|#742: Update security admin guide for Singularity 2.3>",
                "text": "+1 on this issue, I was just bothering @gmkurtzer this week about some of those exact files!\n\n@gmkurtzer if you want to write up the descriptions, I can update the page and figure out the new binary locations, etc. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/742#issuecomment-307538539|#742: Update security admin guide for Singularity 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497064908.822246",
        "date": 1497064908822
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#742 Update security admin guide for Singularity 2.3' https://github.com/singularityware/singularity/issues/742 by tcooper",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nSecurity admin guide should be up to date.\n\n*Actual behavior*\n\nSecurity admin guide is not up to date.\n\n*Steps to reproduce behavior*\n\n• Browse to <http://singularity.lbl.gov/docs-security>\n• Read the security admin guide\n• Note references to `$PREFIX/libexec/singularity/sexec-suid`\n• `$PREFIX/libexec/singularity/sexec-suid` does not exist in version 2.3\n• Examine files in `$PREFIX/libexec/singularity` to find...\n\n```$ find $PREFIX/libexec/singularity -perm -4000\n$PREFIX/libexec/singularity/bin/import-suid\n$PREFIX/libexec/singularity/bin/action-suid\n$PREFIX/libexec/singularity/bin/create-suid\n$PREFIX/libexec/singularity/bin/export-suid\n$PREFIX/libexec/singularity/bin/import-suid\n$PREFIX/libexec/singularity/bin/mount-suid\n$PREFIX/libexec/singularity/bin/action-suid\n$PREFIX/libexec/singularity/bin/create-suid\n$PREFIX/libexec/singularity/bin/expand-suid\n$PREFIX/libexec/singularity/bin/copy-suid\n```\n\n Please update the security admin guide to reference the new suid binaries.\n\nAlso, it would be helpful to expand this guide to explain the purpose of each suid binary. For example, for basic operations, `singularity create ...`, `singularity import ...`, `singularity shell ...` and `singularity exec ...` only the following binaries need the suid bit set...\n\n```$ find $PREFIX/libexec/singularity -perm -4000\n$PREFIX/libexec/singularity/bin/import-suid\n$PREFIX/libexec/singularity/bin/action-suid\n$PREFIX/libexec/singularity/bin/create-suid\n```\n\nDisabling other suid binaries may be preferable to to managing the `LIMIT CONTAINER OWNERS` option in the `$PREFIX/etc/singularity/singularity.conf` file.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/tcooper|tcooper>",
                "title": "#742 Update security admin guide for Singularity 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/742",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497064174.789643",
        "date": 1497064174789
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/730|#730 Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS> by <https://github.com/dctrud|dctrud>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/730|#730 Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS> by <https://github.com/dctrud|dctrud>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497043970.795094",
        "date": 1497043970795
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/730#issuecomment-307504992|#730: Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS>",
                "text": "Thanks for the pointer - will close this and try that!",
                "pretext": "[singularityware/singularity] New comment by dctrud on issue <https://github.com/singularityware/singularity/issues/730#issuecomment-307504992|#730: Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497043970.795088",
        "date": 1497043970795
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307495149|#741: singularity exec git not working>",
                "text": "That is it?! The only things in the password file? That passwd file is broke... Can you try to recreate and bootstrap the container?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307495149|#741: singularity exec git not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497041084.100516",
        "date": 1497041084100
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307492400|#741: singularity exec git not working>",
                "text": "Yes I ran all commands as root.\nThe output of the command \"$ singularity exec test.img cat /etc/passwd\" is:\n\nsystemd-bus-proxy:x:999:997:systemd Bus Proxy:/:/sbin/nologin\nsystemd-network:x:998:996:systemd Network Management:/:/sbin/nologin\ndbus:x:81:81:System message bus:/:/sbin/nologin\ntss:x:59:59:Account used by the trousers package to sandbox the tcsd daemon:/dev/null:/sbin/nologin",
                "pretext": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307492400|#741: singularity exec git not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497040295.887020",
        "date": 1497040295887
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307491050|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "it's ok! It's fantastic when it turns out to be as simple as a permissions error. Glad to help!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307491050|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497039926.782496",
        "date": 1497039926782
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307487698|#741: singularity exec git not working>",
                "text": "Hello @hfutxrg,\n\nI ran through your reproducer, but it is working for me. I had to make some minor changes (e.g. `sudo singularity bootstrap test.img docker://centos:latest`, and prefix the `yum` singularty line with `sudo` but the rest worked as expected). Were you running as root for all of the above commands?\n\nWhat is inside the passwd file inside that container?\n```$ singularity exec test.img cat /etc/passwd\n```\nIs it normal, and does your user name exist there?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/741#issuecomment-307487698|#741: singularity exec git not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497038964.515954",
        "date": 1497038964515
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#741 singularity exec git not working' https://github.com/singularityware/singularity/issues/741 by hfutxrg",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nAfter I run the command:\nsingularity exec -s /bin/bash -B $PWD:/mnt -w test.img git clone <https://github.com/NVIDIA/caffe.git> /mnt/caffe\n\nThe expected output is:\n\nCloning into '/mnt/caffe'...\nremote: Counting objects: 27858, done.\nremote: Compressing objects: 100% (19/19), done.\nremote: Total 27858 (delta 25), reused 19 (delta 19), pack-reused 27820\nReceiving objects: 100% (27858/27858), 39.95 MiB | 5.43 MiB/s, done.\nResolving deltas: 100% (17917/17917), done.\nChecking connectivity... done.\n\n*Actual behavior*\n\nCloning into '/mnt/caffe'...\nremote: Counting objects: 27858, done.\nremote: Compressing objects: 100% (19/19), done.\nremote: Total 27858 (delta 25), reused 19 (delta 19), pack-reused 27820\nReceiving objects: 100% (27858/27858), 39.95 MiB | 5.88 MiB/s, done.\nResolving deltas: 100% (17917/17917), done.\n*fatal: unable to look up current user in the passwd file: no such user\nUnexpected end of command stream*\n\nBecause of the error, the repo clone failed. The clone is successful if I use \"git clone\" inside the container.\n\n*Steps to reproduce behavior*\n\nsingularity create --size 4096 test.img\nsingularity bootstrap test.img rhel.def\nsingularity exec -B $PWD:/mnt -w test.img yum -y groupinstall \"Development Tools\"\nsingularity exec -s /bin/bash -B $PWD:/mnt -w test.img git clone <https://github.com/NVIDIA/caffe.git> /mnt/caffe",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hfutxrg|hfutxrg>",
                "title": "#741 singularity exec git not working",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/741",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497037435.069508",
        "date": 1497037435069
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/740|#740 Quick Start gives \"Do you have permission...?\" error when importing centos Docker image> by <https://github.com/chrisdembia|chrisdembia>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/740|#740 Quick Start gives \"Do you have permission...?\" error when importing centos Docker image> by <https://github.com/chrisdembia|chrisdembia>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497035403.472519",
        "date": 1497035403472
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisdembia on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307474962|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "&gt; @chrisdembia What's the output of:\nroot..... \n\nDeleting the `~/.singularity` folder fixes the issue.\n\nSorry for the bother.",
                "pretext": "[singularityware/singularity] New comment by chrisdembia on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307474962|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497035403.472475",
        "date": 1497035403472
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307474074|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "@chrisdembia What's the output of:\n\nls -ld ~/.singularity\nls -ld ~/.singularity/docker",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307474074|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497035158.399004",
        "date": 1497035158399
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307472448|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "usually you can use unset, like\n\n```unset SINGULARITY_DOCKER_PASSWORD\n```\nThe permission denied is strange - did you do anything with sudo or change permissions? sudo would have gone to roots home, so I'm not sure what might have happened. I would use sudo to still clear that directory to start fresh. When you do it again, paste all your commands and debug here and we will go from there!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307472448|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497034715.253803",
        "date": 1497034715253
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisdembia on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307471516|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "Thanks for the quick response. How do I do that? Is that an environment variable? The problem occurs even if that environment variable is not defined.\n\nBy the way, I just tried deleting the files in ~/.singularity/docker and I got a \"Permission denied.\"",
                "pretext": "[singularityware/singularity] New comment by chrisdembia on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307471516|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497034485.177886",
        "date": 1497034485177
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307470311|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "text": "It looks like it is finding a Docker password, it's probably trying to formulate an auth header that is being denied. Could you clear `SINGULARITY_DOCKER_PASSWORD` and try again?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/740#issuecomment-307470311|#740: Quick Start gives \"Do you have permission...?\" error when importing centos Docker image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497034179.079638",
        "date": 1497034179079
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by cclerget on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307469817|#739: Allow tracing program execution to create minimal containers>",
                "text": "Yes, output could change. I have tested it with latest version 4.17 and worked fine. Centos 7 use strace 4.8, latest ubuntu use 4.11.\nRegular expressions are flexible to adapt output parsing between versions. Finally output remains the same: syscall(arg1,...) = ret since 2009.\nI don't worry too much about output changes, and this couldn't be a problem in a near future ;-)",
                "pretext": "[singularityware/singularity] New comment by cclerget on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307469817|#739: Allow tracing program execution to create minimal containers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497034053.038965",
        "date": 1497034053038
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#740 Quick Start gives \"Do you have permission...?\" error when importing centos Docker image' https://github.com/singularityware/singularity/issues/740 by chrisdembia",
                "text": "I am trying to follow the Quick Start instructions (<http://singularity.lbl.gov/quickstart>) and got an unexpected permission error.\n\nI'm using Ubuntu 14.04.\n\n*Version of Singularity:*\n\n2.3-HEAD.gadf5259\n\n*Expected behavior*\n\n```Cache folder set to /home/fitze/.singularity/docker\nImporting: base Singularity environment\nImporting: /home/fitze/.singularity/docker/sha256:785fe1d06b2d42874d3e18fb0747ad8c9ed83d04e7641279a4d5ae353f27eff9.tar.gz\nImporting: /home/fitze/.singularity/docker/sha256:a90ac515821d5b70fe202c201485396ba95305348f9f7f52813e2873d3c72eee.tar.gz\n```\n\n*Actual behavior*\n\n```Docker image path: index.docker.io/library/centos:7\nCache folder set to /home/fitze/.singularity/docker\n[1/1] ||----------------------------------|   0.0% ERROR Error downloading https://index.docker.io/v2/library/centos/blobs/sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d. Do you have permission to write to /home/fitze/.singularity/docker?\n```\n\n*Steps to reproduce behavior*\n\n```git clone https://github.com/singularityware/singularity.git\ncd singularity\n./autogen.sh\n./configure --prefix=/usr/local\nmake\nsudo make install\nsingularity create centos7.img\nsingularity import centos7.img docker://centos:7\nsingularity --debug import centos7.img  docker://centos:7\n```\n\n*Debug output*\n\n```\n\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-HEAD.gadf5259\nExec'ing: /usr/local/libexec/singularity/cli/import.exec\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/fitze/.singularity\nVERBOSE2 SINGULARITY_ENVIRONMENT found as None/.singularity.d/environment\nVERBOSE2 SINGULARITY_RUNSCRIPT found as None/singularity\nVERBOSE2 SINGULARITY_TESTFILE found as None/.singularity.d/test\nVERBOSE2 SINGULARITY_DEFFILE found as None/.singularity.d/Singularity\nVERBOSE2 SINGULARITY_ENVBASE found as None/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as None/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /home/fitze/Documents/singularity/quickstart\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as /tmp/.singularity-layers.0MbJmMGK\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\nVERBOSE2 SINGULARITY_CONTAINER found as docker://centos:7\nDEBUG Found uri docker://\nDEBUG \n*** STARTING DOCKER IMPORT PYTHON  ****\nDEBUG Docker layers and (env,labels,runscript) will be written to: /tmp/.singularity-layers.0MbJmMGK\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\nDEBUG Starting Docker IMPORT, includes environment, runscript, and metadata.\nVERBOSE Docker image: centos:7\nVERBOSE2 Specified Docker ENTRYPOINT as %runscript.\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: library\nVERBOSE Repo Name: centos\nVERBOSE Repo Tag: 7\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG GET <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:library/centos:pull>\nDEBUG Headers found: Content-Type,Authorization,Accept\nVERBOSE3 Response on obtaining token is None.\nDocker image path: index.docker.io/library/centos:7\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/7>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/7>\nDEBUG Image manifest version 2.2 found.\nDEBUG Adding digest sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/7>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/7>\nCache folder set to /home/fitze/.singularity/docker\nDEBUG Using 9 workers for multiprocess.\n[1/1] ||----------------------------------|   0.0% DEBUG Starting multiprocess\nVERBOSE Downloading layers from <https://index.docker.io/v2/library/centos/blobs/sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d>\nDEBUG Downloading layer sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d\nDEBUG GET (stream) <https://index.docker.io/v2/library/centos/blobs/sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d>\nERROR Error downloading <https://index.docker.io/v2/library/centos/blobs/sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d>. Do you have permission to write to /home/fitze/.singularity/docker?\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisdembia|chrisdembia>",
                "title": "#740 Quick Start gives \"Do you have permission...?\" error when importing centos Docker image",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/740",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497033164.750508",
        "date": 1497033164750
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/611|#611 Nvidia GPU support with different driver versions?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/611|#611 Nvidia GPU support with different driver versions?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497030149.735180",
        "date": 1497030149735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307453814|#611: Nvidia GPU support with different driver versions?>",
                "text": "Excellent, thank you for testing. I'm gonna close this issue. YAY!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307453814|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497030149.735146",
        "date": 1497030149735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307445191|#611: Nvidia GPU support with different driver versions?>",
                "text": "Yup, tested, works.\nThanks!",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307445191|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497027940.013869",
        "date": 1497027940013
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307433202|#739: Allow tracing program execution to create minimal containers>",
                "text": "Yes, you nailed one of the big issues I also found for dealing with ptrace as we were porting Singularity to different architectures. But one of the aspects that required it was that the output of strace was variable depending on version and parsing accordingly was problematic.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307433202|#739: Allow tracing program execution to create minimal containers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497024964.030983",
        "date": 1497024964030
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by cclerget on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307427655|#739: Allow tracing program execution to create minimal containers>",
                "text": "actually trace2sing check for presence of strace (and version too) and perl and exit gracefully with an error message saying to install required package.\n\nThe main reason I use strace rather than ptrace is to support more architecture without playing with stack and registers of each arch and let all the pain to strace, second reason is to not reinvent the wheel when strace does this perfectly",
                "pretext": "[singularityware/singularity] New comment by cclerget on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307427655|#739: Allow tracing program execution to create minimal containers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497023673.571379",
        "date": 1497023673571
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307425239|#674: (How to) Access local file during bootstrap?>",
                "text": "There, implemented in [development 6755b2f]. Testing requested. :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307425239|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497023152.379460",
        "date": 1497023152379
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307424074|#674: (How to) Access local file during bootstrap?>",
                "text": "I agree with what @gmkurtzer is proposing. +1",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307424074|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497022883.279417",
        "date": 1497022883279
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307424027|#739: Allow tracing program execution to create minimal containers>",
                "text": "BTW, I had written (in v1.x) a ptrace binary that will follow the execution of any program, script or anything, watching for files it touches, and then return those files in a list, which can then be used to assemble a container. Would that code be handy here?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/739#issuecomment-307424027|#739: Allow tracing program execution to create minimal containers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497022873.275512",
        "date": 1497022873275
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307422155|#674: (How to) Access local file during bootstrap?>",
                "text": "I'm wondering... Does anybody see any drawback to making the %files section simply run before %post (or whatever we end up renaming it too)? That seems cleaner, and I don't see any drawbacks.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-307422155|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497022443.116024",
        "date": 1497022443116
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#739 Allow tracing program execution to create minimal containers' https://github.com/singularityware/singularity/pull/739 by cclerget",
                "text": "*Add trace command:*\n\nAllow to trace command execution inside container and host to create minimal singularity container.\nAs discussed on singularity google group: <https://groups.google.com/a/lbl.gov/forum/#!topic/singularity/l1k-CtXHiRM,> it's a first attempt, so need some adjustments and discussion.\n\nIt implements two cases:\n1. trace program execution inside container:\n     `singularity trace $HOME/ubuntu.img python -c 'print \"hello\"'`\n2. trace program execution on the host directly:\n     `singularity trace img2create.sh python -c 'print \"hello\"'`\n\nI can't include unit tests because of missing dependencies in test container and I don't know if travis host have the required packages (strace, perl)\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [ ] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/cclerget|cclerget>",
                "title": "#739 Allow tracing program execution to create minimal containers",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/739",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497022285.056104",
        "date": 1497022285056
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307420441|#611: Nvidia GPU support with different driver versions?>",
                "text": "Can you test [development 25cd7a1] and let me know if that works for ya when only using the `--nv` option?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307420441|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497022088.980710",
        "date": 1497022088980
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307417564|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "I just committed a change to the development branch that allows for debugging of the cleanup thread to STDERR when in `--debug` mode. Can you update to that version, and rerun the command, again with debugging enabled, and send the output please?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307417564|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497021486.753336",
        "date": 1497021486753
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307411623|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "Heya @truatpasteurdotfr, can you try again now?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307411623|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497020168.242597",
        "date": 1497020168242
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/738|#738 Development> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/738|#738 Development> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497019857.124713",
        "date": 1497019857124
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on pull request <https://github.com/singularityware/singularity/pull/738#issuecomment-307362767|#738: Development>",
                "text": "Nohow ATM... They both have the same origin but then diverted. I am not sure why it is still here in upstream repo, unless we decide to nice mine into here ",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on pull request <https://github.com/singularityware/singularity/pull/738#issuecomment-307362767|#738: Development>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497006937.528679",
        "date": 1497006937528
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307350979|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "I agree.  In retrospect, I do not see much benefit to sysadmins to use `~` in their include statement.  Let's just pull it; would be quite nice to keep compatibility with musl!",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307350979|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497002954.771355",
        "date": 1497002954771
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307344228|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "There is no syslog file in the /var/log of the node.\n\nWe recompiled singularity with the option you mentioned but it did not change the behaviour.",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-307344228|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1497001082.346232",
        "date": 1497001082346
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/738#issuecomment-307320896|#738: Development>",
                "text": "hey @yarikoptic how is this related to the release that you do (eg, apt-get install singularity-container?)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/738#issuecomment-307320896|#738: Development>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496994585.865285",
        "date": 1496994585865
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#738 Development' https://github.com/singularityware/singularity/pull/738 by Trophime",
                "text": "*Description of the Pull Request (PR):*\n\nUpdate debian files for 2.3 release\nThe test are not performed when building the package as you suggested\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #699\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/Trophime|Trophime>",
                "title": "#738 Development",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/738",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496993978.745477",
        "date": 1496993978745
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307274128|#721: Could not mount Singularity overlay: No such device>",
                "text": "Is the configuration file change enough to cover both scenerios?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307274128|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496973388.278031",
        "date": 1496973388278
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307273978|#721: Could not mount Singularity overlay: No such device>",
                "text": "Yes. We provide a backport. People might have installed original or backports kernel. So it is impossible to know at build time since we've are dealing with backports here. Better be ready for both scenarios imho without requiring rebuild.",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307273978|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496973323.269911",
        "date": 1496973323269
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/712|#712 Fix debian package> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/712|#712 Fix debian package> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496968455.661526",
        "date": 1496968455661
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-307263713|#712: Fix debian package>",
                "text": "@Trophime this looks great, can you resubmit this to the development branch?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-307263713|#712: Fix debian package>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496968455.661510",
        "date": 1496968455661
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/729#issuecomment-307251628|#729: Singularity exec module not working>",
                "text": "@dexter2cz Thanks. your solution works.",
                "pretext": "[singularityware/singularity] New comment by hfutxrg on issue <https://github.com/singularityware/singularity/issues/729#issuecomment-307251628|#729: Singularity exec module not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496963340.904649",
        "date": 1496963340904
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307250646|#721: Could not mount Singularity overlay: No such device>",
                "text": "Actually on second thought, this case is interesting. Why does the debian package support it, but the host doesn't? Different kernel?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307250646|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496962985.843218",
        "date": 1496962985843
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307250098|#721: Could not mount Singularity overlay: No such device>",
                "text": "Ahhhh, I keep getting tripped up by RH's backports. We could silence this error on systems that don't have overlay support at the time of compile.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307250098|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496962803.808688",
        "date": 1496962803808
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307247362|#735: Definition of Services - Feature for 2.4>",
                "text": "awesome! Yes please do.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307247362|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496961806.625073",
        "date": 1496961806625
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307240800|#735: Definition of Services - Feature for 2.4>",
                "text": "Yep!.\nThey have now a <https://github.com/kubernetes-incubator|kubernetes-incubator> , this is where the PR should go first.\nBut first we must be sure to support some minimal functionalities. that is why this issue post is so important.\n\nRight now I made it to deploy what they call a <https://kubernetes.io/docs/concepts/workloads/controllers/jobs-run-to-completion/|jobs> . \n\nI'll keep you informed! ",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307240800|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496959629.193201",
        "date": 1496959629193
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307239970|#735: Definition of Services - Feature for 2.4>",
                "text": "@ArangoGutierrez that's a great idea! Each container in a pod is supported by way of adding a folder to here --&gt; <https://github.com/kubernetes/kubernetes/tree/master/cluster> so for example, Singularity support would be writing the necessary code bits for that. If you are interested in this you should go for it! The work / PR would be to the kubernetes repo, which is open source, and they have very clear instructions for how to go about it. And it looks like their docs say that particular folder isn't accepting new types, and you should start here --&gt; <https://github.com/kubernetes/kube-deploy>  Have fun!! It sounds like a great project.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307239970|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496959380.135585",
        "date": 1496959380135
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307239034|#735: Definition of Services - Feature for 2.4>",
                "text": "@v thanks. I was just making my point, but you are right on the json format, but just don't loose from the main idea. To have a global status storage.  I'm studying the Kubernetes, in order to work around a future integration with Singularity, and that is a key feature. so the Kubelet component will report container node status to the api-server.",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307239034|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496959108.069274",
        "date": 1496959108069
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307234598|#721: Could not mount Singularity overlay: No such device>",
                "text": "yes -- normal on older kernels eg 3.16 on stable debian (jessie) without kernel backports  ",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307234598|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496957831.750814",
        "date": 1496957831750
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307219815|#611: Nvidia GPU support with different driver versions?>",
                "text": "What Kilian said :-)\n\nOn Thu, Jun 8, 2017 at 2:12 PM, Kilian Cavalotti <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; I get the feeling, but:\n&gt; \n&gt; 1. that's how NVIDIA does this in nvidia-docker\n&gt; 2. nvidia-smi is a very common tool that most users would expect to\n&gt;      find in their containers\n&gt; 3. it's shipped as part of the NVIDIA X11 _driver_, not CUDA, so it's\n&gt;      tightly coupled to the NVML and the kernel module, which should be part of\n&gt;      the host OS stack, not the container's.\n&gt; \n&gt; So, although I understand that it may feel weird, I think that would be\n&gt; necessary to avoid having to install matching NVML/drivers in the\n&gt; containers.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/611#issuecomment-307184102>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AHUUXC24ZlxfNPOMMYs5FM1sl20Pq_IDks5sCDmfgaJpZM4M-zk7>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307219815|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496954125.630212",
        "date": 1496954125630
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307218667|#733: bootstraping is failing on 2.3>",
                "text": "That fixed it, thanks @gmkurtzer!",
                "pretext": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307218667|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496953854.539291",
        "date": 1496953854539
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/733|#733 bootstraping is failing on 2.3> by <https://github.com/DeepHorizons|DeepHorizons>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/733|#733 bootstraping is failing on 2.3> by <https://github.com/DeepHorizons|DeepHorizons>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496953854.539079",
        "date": 1496953854539
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-307216583|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "Yes, that did it.  Thanks!\n\nMaybe it would be a good idea to put a comment in the code to say why FD_CLOEXEC is deliberately not being set, in case someone later again thinks that it should.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-307216583|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496953340.367711",
        "date": 1496953340367
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/723|#723 Allow mount point to have SETGID/SETUID bits set> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/723|#723 Allow mount point to have SETGID/SETUID bits set> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496952551.110752",
        "date": 1496952551110
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307213294|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "It looks good to me, merging! Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307213294|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496952547.109680",
        "date": 1496952547109
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307212330|#735: Definition of Services - Feature for 2.4>",
                "text": "@ArangoGutierrez take a look at the current inspect, it already has many of the features that you are showing. Why would the inspect for an image be in a list as opposed to a single formatted json response? With the above, the user would have to do:\n\n```result = response.json()\nversion = result[0][\"Version\"]\n```\nto access the `Version`, for example, and the user would expect to do:\n\n```result = response.json()\nversion = result[\"Version\"]\n```\nThe field suggestions for the services are good, and coincide with what Docker uses. The various fields, names, and statuses themselves do need to be a bit standardized, and the format of the json for services too. Take a look at <http://jsonapi.org/format/|the json api> if you are interested in learning more about this. For now I wouldn't worry about the actual format of how the services are obtained via inspect (this is pretty straight forward given standards), but rather the implementation of the services / start /stop to begin with. Thanks for your thoughts!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307212330|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496952325.036988",
        "date": 1496952325036
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307199106|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "```\n[ Thu Jun 08 12:05 mibauer:~/singularity_d3 ]\n$ sudo chmod g+s /usr/local/var/singularity/mnt/container/\n[ Thu Jun 08 12:06 mibauer:~/singularity_d3 ]\n$ ': stat -c \"%a %n\" /usr/local/var/singularity/mnt/container/\n2755 /usr/local/var/singularity/mnt/container/\n[ Thu Jun 08 12:05 mibauer:~/singularity_d3 ]\n$ singularity --debug shell test.img \n[...]\nDEBUG   [U=1000,P=17850]   chk_mode()                                Found appropriate mode on file: /usr/local/var/singularity/mnt/container\n[...]\nSingularity test.img:~/singularity_d3&gt;\n\n```\n\nAs seen above, the masking works. This should be safe to merge, unless anybody notices any issues!",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307199106|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496949028.937590",
        "date": 1496949028937
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307196365|#721: Could not mount Singularity overlay: No such device>",
                "text": "Is the lack of overlay support \"normal\", or is that a custom build?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-307196365|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496948385.712495",
        "date": 1496948385712
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307195445|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "@bbockelm, do you see any reason to keep GLOB_TILDE? I mean, this means we can use home directory expansion, but I can't see that we would ever want that for configuration parsing considering it must be trusted (e.g. owned by root). Thoughts?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-307195445|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496948167.632742",
        "date": 1496948167632
    },
    {
        "user": "cclerget",
        "text": "<@U5RJ04A4F|cclerget> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1496947579.422625",
        "date": 1496947579422
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307192557|#725: urlparse bug in Python 2.6>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307192557|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496947488.390320",
        "date": 1496947488390
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/725|#725 urlparse bug in Python 2.6> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/725|#725 urlparse bug in Python 2.6> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496947484.388840",
        "date": 1496947484388
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307192387|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "text": "Excellent, I got it all ready for testing in the development branch.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307192387|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496947449.376708",
        "date": 1496947449376
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307185477|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "@gmkurtzer Don't merge this yet, I need to re run tests and will post results here.",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307185477|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496945898.819103",
        "date": 1496945898819
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307184102|#611: Nvidia GPU support with different driver versions?>",
                "text": "I get the feeling, but:\n1. that's how NVIDIA does this in `nvidia-docker`\n2. `nvidia-smi` is a very common tool that most users would expect to find in their containers\n3. it's shipped as part of the NVIDIA X11 *driver*, not CUDA, so it's tightly coupled to the NVML and the kernel module, which should be part of the host OS stack, not the container's.\n\nSo, although I understand that it may feel weird, I think that would be necessary to avoid having to install matching NVML/drivers in the containers.",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307184102|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496945564.700315",
        "date": 1496945564700
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307181503|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "text": "correct!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307181503|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496944959.478134",
        "date": 1496944959478
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307180865|#725: urlparse bug in Python 2.6>",
                "text": "ok I'm good to merge then. I can't test but it looks like it passes tests and the changes are very clean and logical.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307180865|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496944816.423416",
        "date": 1496944816423
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307179481|#611: Nvidia GPU support with different driver versions?>",
                "text": "I have an aversion to making the `nvidia-smi` program bound into the container by default, but I will if it is deemed to be completely necessary (as opposed to having `nvidia-smi` already within the container with the Nvidia linked applications).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-307179481|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496944520.311495",
        "date": 1496944520311
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307178744|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "My pleasure. I'm slowly working through my giant pile of emails which is what reminded me!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307178744|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496944367.254816",
        "date": 1496944367254
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-307178498|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "Singularity currently does open a file descriptor to the image directory:\n\n```DEBUG   [U=1000,P=25681]   singularity_image_open()                  Opening file descriptor to image: /mnt/loop0/\n```\nBut I had added the FD_CLOEXEC option to that file descriptor. I just updated the development branch, will you retest?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-307178498|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496944316.236548",
        "date": 1496944316236
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307175886|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "@gmkurtzer Thanks for the reminder, I'll update the branch with the correct code momentarily",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307175886|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496943728.025661",
        "date": 1496943728025
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307175469|#723: Allow mount point to have SETGID/SETUID bits set>",
                "text": "We talked about adding a mask on `chk_mode()`.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/723#issuecomment-307175469|#723: Allow mount point to have SETGID/SETUID bits set>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496943632.991372",
        "date": 1496943632991
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/737|#737 Alignment between online docs and source code docs> by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/737|#737 Alignment between online docs and source code docs> by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496943444.924668",
        "date": 1496943444924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/737#issuecomment-307173843|#737: Alignment between online docs and source code docs>",
                "text": "Hi @ArangoGutierrez,\n\nI think this PR takes us further away from our online docs and more towards the generic Autotools INSTALL file. Also, I think keeping the MarkDown syntax and suffix is important.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/737#issuecomment-307173843|#737: Alignment between online docs and source code docs>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496943275.864670",
        "date": 1496943275864
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307172847|#735: Definition of Services - Feature for 2.4>",
                "text": "*+1 on this issue!*\n\n#\n\nFollowing the logical steps proposed by @vsoch. \n&gt; 2) need to define and expose services more cleanly. \n&gt; 3) will be orchestration \nI think that the idea of @cclerget of having a status storage \n``` bash\n/var/run/singularity/{image-name}.{uid}.{pid}\n```\nis important for those steps.   Since the orchestration service will need to tell every service exposed from singularity images, a global status storage is a must.\nThis status storage can be also a JSON file as the `inspect` command, and will expose something like\n```[\"Singularity Version\",\n\"Image\": {\"Def_file_from\", \"Image_name\", \"Created_date\",\".img_path\"},\n\"uid\",\n\"Singularity_global\":{ },\n\"Singularity_command_options\":{ },\n\"Container_Command\": {\"Command\",\"Args\"},\n\"State\": {\"Status\", \"Running\",\"Restarting\", \"Pid\", \"ExitCode\", \"Error\",\"StartedAt\", \"FinishedAt\" },\n]\n```\n\nBut also the `inspect` must contain a basic of \n```[\"Version\",\n\"Def_file_from\",\n\"Image_name\",\n\"Created\",\n\"uid_who_created_the_img\",\n\"Path\",\n\"Has_Runscript\",\n\"Env\"] \n```\nThis are just me thinking on @v's step #3 Container orchestration.",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307172847|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496943038.779494",
        "date": 1496943038779
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#737 Alignment between online docs and source code docs' https://github.com/singularityware/singularity/pull/737 by ArangoGutierrez",
                "text": "*Description of the Pull Request (PR):*\n\nSince there is an entire <https://github.com/singularityware/singularityware.github.io|doc repo>, the INSTALL.md could be turn into a classic INSTALL plane.text file. That way we have better alignment between online docs and source code docs.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: # N/A\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "title": "#737 Alignment between online docs and source code docs",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/737",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496941129.105835",
        "date": 1496941129105
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307147789|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "text": "Ahh, yes. The `bootstrap` command cleans the environment, so we just have to add an exception (or rather a reset) of this variable. So I just need to make sure that `SINGULARITY_DOCKER_USERNAME` and `SINGULARITY_DOCKER_PASSWORD` are reset in bootstrap, correct?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/726#issuecomment-307147789|#726: SINGULARITY_DOCKER_USERNAME not export in bootstrap>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496937491.781556",
        "date": 1496937491781
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307146730|#725: urlparse bug in Python 2.6>",
                "text": "Yes @vsoch, the master branch is for releases and bug fixes only. Given that this is a bug fix, we can merge it directly iff it is affecting people directly now and if it has been tested, stable and reviewed. But in a nutshell, yes, everything should generally go through the development branch.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-307146730|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496937282.695726",
        "date": 1496937282695
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-307144450|#728: reduce img or convert img to gz archive ?>",
                "text": "@huitre39,\n\nMaybe this is what you are looking to do:\n\n```$ singularity export container.img | gzip -c -9 &gt; container.tar.gz\n```\nBut you should know, that is not a great way to run containers because they always must be splat out to the local file system to run. ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-307144450|#728: reduce img or convert img to gz archive ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496936831.515101",
        "date": 1496936831515
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-307140832|#727: home mount erase /usr/ in container>",
                "text": "Hi @mschnepf,\n\nOh gosh... I haven't seen anyone putting home directories in `/usr/users` for a very very very long time! Due to how Singularity 'tries' to be as smart as possible, with regards to home directory mounts when overlayfs is not available, there is no direct workaround for this at present.\n\nAn indirect workaround may exist if the `prctl()` option `SET_NO_NEW_PRIVS` is available on your distribution. This would enable you to virtualize your home directory. Check out the `-H` feature in version 2.3 and see if you can use this to 'move' your home directory. If so, you can set this to be automatic via the environment variable `SINGULARITY_HOME=/source:/dest`.\n\nAlso, just to make sure there isn't another bug that might be triggering this, does your system support overlayFS? You can find it in the `--debug` output and/or in via the `./configure` build output.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-307140832|#727: home mount erase /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496936083.213100",
        "date": 1496936083213
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-307138707|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "text": "Running Singularity from an NFS location with the root_squash option will always fail. There are two fixes, the first one you mentioned (to install via source or RPM/DEB onto all of the compute nodes directly), or you remove the root_squash option (which honestly doesn't really offer much in the terms of security).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/736#issuecomment-307138707|#736: Singularity as a module on a HPC cluster with NFS and root-squash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496935651.031469",
        "date": 1496935651031
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307136995|#733: bootstraping is failing on 2.3>",
                "text": "Please see the fix in the development branch, and let me know if that helps!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307136995|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496935318.889817",
        "date": 1496935318889
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307132293|#733: bootstraping is failing on 2.3>",
                "text": "I've reproduced this and know why it is happening. Fixing, standby...",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307132293|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496934380.504606",
        "date": 1496934380504
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307117391|#734: Sourcing from /environment doesn't work>",
                "text": "Nevermind my previous comment :D",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307117391|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496931429.280883",
        "date": 1496931429280
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307112739|#733: bootstraping is failing on 2.3>",
                "text": "@vsoch I am mirroring the container, but I'm not basing it off of debian. I've built a custom base image that we use on our cluster here at RIT that enables GPU support among other things. I then overlay the notebook on that. The debian bootstrap was just for example. As for the files, I downloaded the files and I add them in in the `%setup` step. I omitted them for brevity. Thanks for the example, nice to see `%labels` and `%environment` working!\n\nI did more experimentation and was able to reproduce the bug consistently. It seems to be a problem with overlaying.\n\n*Steps to reproduce*\n\n1. `singularity create -s 1024 image.img`\n2. `singularity bootstrap image.img test1.def`\n3. `singularity bootstrap image.img test2.def`\n\n`test1.def`\n```BootStrap: docker\nFrom: ubuntu:16.04\n```\n\n`test2.def`\n```%post\n    apt-get update &amp;&amp; apt-get install -yq --no-install-recommends \\\n        sudo \\\n        emacsen-common \\\n        fontconfig-config \\\n        tex-common\n```\n\nAll those installs fail with some sort of invalid user error.\nIf any of those packages are moved into the first definition file, they install just fine.",
                "pretext": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307112739|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496930491.905895",
        "date": 1496930491905
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307111346|#734: Sourcing from /environment doesn't work>",
                "text": "I'm not sure why, but Singularity doesn't seem to like `. /test/test.sh` in the `%environment` section",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307111346|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496930212.791305",
        "date": 1496930212791
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#736 Singularity as a module on a HPC cluster with NFS and root-squash' https://github.com/singularityware/singularity/issues/736 by abdulrahmanazab",
                "text": "*Version of Singularity:*\n\n2.2.1\n\n*Expected behavior*\n\nsingularity shell &lt;image-name&gt;\n...&gt; \n\n*Actual behavior*\n\nERROR  : The feature you are requesting requires privilege you do not have\nABORT  : Retval = 255\n\n*Steps to reproduce behavior*\n\nYou have a cluster of multiple nodes. Shared NFS file system with root-squash. Install singularity as a module 'sudo make install' as the root of the NFS file-system (from one of the admin nodes). Now try to run 'singularity shell' from one of the compute nodes, it produces that error. \n\nThis is somehow obvious because the NFS root is not the same as the root on the compute nodes. Is there any ideas to solve this other than installing singularity using 'sudo make install' on each single compute node. We would like a solution to install it as a shared module other than individual installation on compute nodes.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/abdulrahmanazab|abdulrahmanazab>",
                "title": "#736 Singularity as a module on a HPC cluster with NFS and root-squash",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/736",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496927698.903441",
        "date": 1496927698903
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-307022972|#727: home mount erease /usr/ in container>",
                "text": "When you disable overlayfs, this means that any path in the container that doesn't exist (but exists for the user on the host) will not be automatically generated. Given that, it makes sense that the container doesn't mount anything under `/usr/users`, that's not a standard location on most linux distributions (at least not on the few I've used, haha). There are a couple of things you could try. \n\n1. You could try generating  container that *does* have the folder /usr/users and then enable mount home = yes and  enable overlay = no, and see if the home is allowed to be mounted.\n2. If that doesn't work, you could add /usr/users as an allowed mount point and try again (without overlayfs). \n3. Finally, you can try going one level up, creating a single user folder, and seeing if that works (still without overlayfs).\n\nJust curious - why did you put home directories in /usr/users? What do you have under `/home`? And what is the concern about using overlayfs? My (probably somewhat poor) understanding of `/usr` is that it is primarily for software for users, not personal files / home directories. It would be like finding someone put their dressing table in the garage workshop, haha. \n\nAnyway, if the above three things don't work, please run a (failed) command with singularity `--debug` so we can see the order of operations of testing mount points, and exact error messages.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/727#issuecomment-307022972|#727: home mount erease /usr/ in container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496906983.187295",
        "date": 1496906983187
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307020558|#734: Sourcing from /environment doesn't work>",
                "text": "and you probably want to define the variable first and export on the next line, I think that format is called a \"bashism\"",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307020558|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496906289.058480",
        "date": 1496906289058
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307020429|#734: Sourcing from /environment doesn't work>",
                "text": "hey @fmorency, if you want to redo this functionality with fewer files and a little cleaner syntax, you can pay around with the following:\n\n```\nBootStrap: debootstrap\nOSVersion: trusty\nMirrorURL: <http://ca.archive.ubuntu.com/ubuntu/>\n\n%files\n   ./test.sh /test\n\n%environment\nexport SOMEVAR=123\n```\n\nand next time feel free to include your code here! It's a little scary always downloading and extracting a random zip from the internet :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-307020429|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496906248.051015",
        "date": 1496906248051
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307019501|#733: bootstraping is failing on 2.3>",
                "image_url": "https://user-images.githubusercontent.com/814322/26916378-009ca266-4bdf-11e7-9f2c-bb43a9e171bd.png",
                "image_width": 1115,
                "image_height": 335,
                "image_bytes": 127869,
                "text": "I noticed in your examples you were trying to run files that exist in the original repo, but I'm bnot sure how they would be present in the image unless you downloaded them. So I adjusted the Singularity file a bit, and this worked perfect for me:\n\n```\nBootStrap: docker\nFrom: debian:stretch\n\n%labels\nAUTHOR <https://github.com/jupyter/docker-stacks/tree/master/base-notebook>\n\n%environment    \nexport CONDA_DIR=/opt/conda\nexport PATH=$CONDA_DIR/bin:$PATH\nexport SHELL=/bin/bash\nexport NB_USER=jovyan\nexport NB_UID=1000\nexport HOME=/home/$NB_USER\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\n\n%post\n```# add universe repo to apt sources and install some packages\nDEBIAN_FRONTEND=noninteractive\nexport DEBIAN_FRONTEND\n#sed -i '/deb/ s/$/ universe/' /etc/apt/sources.list\nsed -i \"s/http:\\/\\/us.archive.ubuntu.com/http:\\/\\/mirrors.rit.edu/g\" /etc/apt/sources.list\n# Delete any old cache\napt-get clean\nrm -rf /var/lib/apt/lists/*\napt-get update &amp;&amp; apt-get install -yq --no-install-recommends \\\n    wget \\\n    bzip2 \\\n    ca-certificates \\\n    locales \\\n    fonts-liberation\n\necho \"en_US.UTF-8 UTF-8\" &gt; /etc/locale.gen &amp;&amp; \\\n    locale-gen\n\n# Install Tini\nexport CONDA_DIR=/opt/conda\nexport PATH=$CONDA_DIR/bin:$PATH\nexport SHELL=/bin/bash\nexport NB_USER=jovyan\nexport NB_UID=1000\nexport HOME=/home/$NB_USER\nexport LC_ALL=en_US.UTF-8\nexport LANG=en_US.UTF-8\nexport LANGUAGE=en_US.UTF-8\n\n# Install conda as jovyan\ncd /tmp\nmkdir -p $CONDA_DIR\nwget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh\necho \"c59b3dd3cad550ac7596e0d599b91e75d88826db132e4146030ef471bb434e9a *Miniconda3-4.2.12-Linux-x86_64.sh\" | sha256sum -c -\n/bin/bash Miniconda3-4.2.12-Linux-x86_64.sh -f -b -p $CONDA_DIR\nrm Miniconda3-4.2.12-Linux-x86_64.sh\n$CONDA_DIR/bin/conda config --system --add channels conda-forge\n$CONDA_DIR/bin/conda config --system --set auto_update_conda false\nconda clean -tipsy\n\n# Install Jupyter Notebook and Hub\nconda install --quiet --yes \\\n    'notebook=5.0.*' \\\n    'jupyterhub=0.7.*' \\\n    'jupyterlab=0.18.*' \\\n    &amp;&amp; conda clean -tipsy\n\nwget https://raw.githubusercontent.com/jupyter/docker-stacks/master/base-notebook/start.sh\nmv start.sh /usr/local/bin\nchmod u+x /usr/local/bin/start.sh```\n%runscript    \n    exec /bin/bash /usr/local/bin/start.sh jupyter notebook \"$@\"\n```\nand then to generate:\n\n```singularity create --size 6000 conda.img\nsudo singularity bootstrap conda.img Singularity\n```\n\nand to run you have to bind to the run directory (to get write as a user)\n\n```singularity run -B /tmp:/run/user conda.img\n```\n<https://user-images.githubusercontent.com/814322/26916378-009ca266-4bdf-11e7-9f2c-bb43a9e171bd.png|image>\n\nwhala, notebook! And opening up showed all the crap in my `/tmp` directory, lol. Again, you could probably just have bootstrapped that docker image that had already done this.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307019501|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496905972.002634",
        "date": 1496905972002
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307015743|#733: bootstraping is failing on 2.3>",
                "text": "hey @DeepHorizons - it looks like you are just mirroring this container, almost to a T:\n\n<https://github.com/jupyter/docker-stacks/blob/master/base-notebook/Dockerfile>\n\nWhy not just bootstrap that Docker image?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-307015743|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496904823.805719",
        "date": 1496904823805
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307002888|#735: Definition of Services - Feature for 2.4>",
                "text": "you're a bad@ss @bauerm97 ! It must be because you are liking CA so much? I'm sorry I missed you (yesterday was it?) I had (and still have) some yuck-sickness and I don't even have a voice!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307002888|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496899913.180690",
        "date": 1496899913180
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000879|#735: Definition of Services - Feature for 2.4>",
                "text": "@vsoch Just to reiterate what I stated on the mailing list, this is currently in active development and I should have a prototype of this line of execution ready for a first round of testing in a few days time!",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000879|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496899049.082331",
        "date": 1496899049082
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000417|#735: Definition of Services - Feature for 2.4>",
                "text": "comment from @bauerm97 also on list:\n\n&gt; &gt; Singularity is, in its current state, not capable of properly dealing with daemons (and to a broader point, PID namespaces in general) running in the container. We are currently fleshing out a solution to this and have begun working on possible implementations. The current proposed solution is to implement an optional start/stop feature, which will properly handle the PID namespace by spawning an “s-init” process inside the PID namespace which will exist as PID 1. “singularity stop” will instruct the “s-init” process inside the PID namespace to terminate, which will cause the kernel to reap the remaining process inside the PID namespace. Daemon processes spawned inside the PID namespace will no longer linger after the main singularity process is terminated. Let me know if this will be sufficient for your use cases!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000417|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496898805.054975",
        "date": 1496898805054
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000276|#735: Definition of Services - Feature for 2.4>",
                "text": "comment from @gmkurtzer on list:\n\n&gt; &gt; &gt; Also there was just a meeting that I had with some other developers trying to think about how to deal with this (and similar) use cases directly. I think it is going to look like:\n$ singularity start container.img\n$ singularity status container.img\nSINIT process active\n$ singularity shell container.img\nJoining existing SINIT namespaces...\n\n$ singularity stop container.img\nKilling all processes running under SINIT\n\nBasically, once you have started a container process, any subsequent action commands (shell, exec, run, etc..) that you invoke on that container will always join the existing namespace. This means that you will be able to run daemon processes as you would expect and come back to it and kill it afterwords. Where it is going to get really tricky is systemd because something like `service httpd start` is actually going to connect to the systemd process, so we will need to make sure that systemd is running properly first.\n\nAnyway, that is what we are currently thinking.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/735#issuecomment-307000276|#735: Definition of Services - Feature for 2.4>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496898729.046597",
        "date": 1496898729046
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#735 Definition of Services - Feature for 2.4' https://github.com/singularityware/singularity/issues/735 by vsoch",
                "text": "Given that we want to eventually work up our way to \"orchestration of containers\" (akin to docker-compose) using Singularity containers, the logical steps to that are that we need 1) a container to spit out it's metadata / bits (and we've accomplished the start of this with `inspect`) but now we 2) need to define and expose services more cleanly. Part 3) will be orchestration of those two things, but likely that will be for a later time.\n\nThe example I will give is a simple web server, as we had a recent issue in the user list with regard to an apache2 daemon still running when the container stopped. Right now, the way to go about using a container to run a service is to have a runscript that ends in something like:\n\n```exec service apache2 start\n```\nand then the user would run the container:\n\n```singularity run apache2.img\n```\n\nto execute this command. Depending on the addition (or absence) of the `--pid` or `-p` argument, we can get a few outcomes with this call.\n\n1. Not having the argument means that the server will still be running, as a daemon, for example, you could shell into another container without it, start apache, and then in a different window on the host see\n\n```ps -fC apache2\nUID        PID  PPID  C STIME TTY          TIME CMD\nroot     25943  5463  0 17:07 ?        00:00:00 /usr/sbin/apache2 -k start\nwww-data 25945 25943  0 17:07 ?        00:00:00 /usr/sbin/apache2 -k start\nwww-data 25947 25943  0 17:07 ?        00:00:00 /usr/sbin/apache2 -k start\n```\n\nThen exiting the container (or if you did exec, just exec-ing the command to start apache). You wouldn't see these processes go away.\n\n1. Having the argument (I think) would create a new PID namespace, and exit (or a quick exec) would not leave the processes on the container. A few important points to address:\n\n*Should running a container start a service?*\n\nThere isn't any official rule, but I don't like the idea of a container run being linked to starting a service that might potentially hang around when the user (thinks) it's finished. This is an unwelcome surprise. The answer to \"should running a container start a service.\" is no.\n\n*Container Services*\n\nThus, we need to make an easy, transparent way for makers to define services, and for users to user them. With this we should strongly advocate to not include starting/stopping of services as part of the runscript, unless the service is specifically started and stopped during the duration of the runtime. An easy solution, and one that would fit into a (later) need to have not only services, but orchestration of them, is adding a `%services` section to the build definition.\n\n*Defining a service*\n\nThe user would define a service like:\n\n```[ action ] [ service name ] [ command ]\n```\n\nwhere `action` is either start / stop / restart (or any of the standard allowable ones you generally use), `service name` is a single string to identify it (eg from the command line), and this would be defined by the user), and the `command` is the controller of the service. For example\n\n```%services\nstart apache2 service apache2 start\nstop apache2 service apache2-stop\n```\n\nSo from outside the container, let's say I had a bunch of services and I wanted to stop them all, I'd do:\n\n```singularity start ubuntu.img\n```\nIf I wanted just apache\n\n```singularity start ubuntu.img apache2\n```\n\nand what that would essentially do is start and stop the services provided by the container. What singularity would need to do internally is keep a simple pid for each running service, somewhere writable for the user and accessible by singularity, and then add and remove the file as needed. If the service stops automatically or before the user asks for a stop, the pid should be removed and there shouldn't be a bug that the container thinks it's running, but it's not. The container would spit out a friendly warning when the user asks to stop a service that isn't running. \n\n*Container Services... more than services?*\n\nThe really cool part of this workflow is that it would be flexible to things that aren't technically services, but the container maker could specify them to be. For example, take a look at this (from some scientific container)\n\n```%services\nstart analysis-pipeline /usr/bin/python /code/start.py\nstart brain-reg /usr/bin/python /code/registration.py\n```\nFor the above, notice that I haven't even defined any \"stop\" commands, although arguably the container could by default, if no stop exists, find all active pids that have been generated (for the above it would be for python) and just kill them. This also introduces an idea that I'm not sure others will like/hate - having the ability to start a container as a service, meaning something is running via some background process.\n\n*Orchestration*\n\nUltimately, we want something that would make it really easy for a user (using Singularity) to give a container different contexts (something I brought up a long time ago.) A context is a description of actions (defined by services provided within or between containers). It might also include custom mounts or sourcing environment variables, anything that could be done by issuing the start command. For example, a user could do something like:\n\n1. Run a service to listen for PUT of data to my container (which is a web endpoint)\n2. When data is received, get it, and stop the service (the container is being used now for an analysis)\n     • When this happens, spawn another listening container to wait for the next. Or keep listening, and start a different service (container?) to process the data.\n3. Start container with service that gives it context to run some analysis pipeline. Services might be chained, or maybe with different (independent) data components run by different works.\n\nProbably some of the above belongs better in some management pipeline (yes there are many!) but the important note is that having these services defined and exposed, along with inspect for other metadata, are the two essential pieces for making singularity containers better talk to the world around them. Thoughts?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#735 Definition of Services - Feature for 2.4",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/735",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496877024.400458",
        "date": 1496877024400
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/730#issuecomment-306947770|#730: Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS>",
                "text": "Hi @dctrud,\n\nYou could possibly do this within the `%environment` bootstrap section and make it a scriptlet that virtualizes the home directory from within the container. We can't do it safely outside if `SET_NO_NEW_PRIVS` is not available on the host.\n\nHope that helps!\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/730#issuecomment-306947770|#730: Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496875920.203578",
        "date": 1496875920203
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306946738|#732: Environment variables not available from inside the definition file>",
                "text": "ah ok. So @fmorency I think wyou have a few options:\n\n1. You can have the variables set in %post (or %setup, wherever you need them). If it's the case that the user of your script needs to set them, then provide this instruction to do so in the docs. Anyone that finds a bootstrap file lying around will see the variables written, and it won't be \"lost information.\"\n2. If it's something that can be done during runtime, you could have the user define it in the way we mentioned (eg, export `SINGULARITY_VAR`) and then the container will find it. I don't know your use case, but this makes sense for (most) applications.\n3. If it's something for the install that you want to also keep with the container, then export it in %post/%setup (where needed) and also add it to the %environment section.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306946738|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496875600.146252",
        "date": 1496875600146
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306942287|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Do you have any errors showing up in syslog?\n\nAlso, I noticed that you are not using a local state directory. I would recommend compiling Singularity with --localstatedir=/var/ to ensure it is always on the local file system.\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306942287|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496874181.869566",
        "date": 1496874181869
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306936285|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "```bash\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-dist\nExec'ing: /gpfs/opt/tools/singularity/2.3/libexec/singularity/cli/exec.exec\nEvaluating args: 'docker://centos cat /etc/redhat-release'\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/my_user/.singularity\nVERBOSE2 SINGULARITY_ENVIRONMENT found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d/environment\nVERBOSE2 SINGULARITY_RUNSCRIPT found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/singularity\nVERBOSE2 SINGULARITY_TESTFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d/test\nVERBOSE2 SINGULARITY_DEFFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d/Singularity\nVERBOSE2 SINGULARITY_ENVBASE found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as /workdir/my_user/Code/singularity/.singularity-runtime.UGmdSYv4/centos/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /gpfs/workdir/my_user/Code/singularity\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as /tmp/.singularity-layers.cjnQiYDr\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\nVERBOSE2 SINGULARITY_CONTAINER found as docker://centos\nDEBUG Found uri docker://\nDEBUG \n*** STARTING DOCKER IMPORT PYTHON  ****\nDEBUG Docker layers and (env,labels,runscript) will be written to: /tmp/.singularity-layers.cjnQiYDr\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\nDEBUG Starting Docker IMPORT, includes environment, runscript, and metadata.\nVERBOSE Docker image: centos\nVERBOSE2 Specified Docker ENTRYPOINT as %runscript.\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: library\nVERBOSE Repo Name: centos\nVERBOSE Repo Tag: latest\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG GET <https://index.docker.io/v2/library/centos/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:library/centos:pull>\nDEBUG Headers found: Content-Type,Authorization,Accept\nVERBOSE3 Response on obtaining token is None.\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG Image manifest version 2.2 found.\nDEBUG Adding digest sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG GET <https://index.docker.io/v2/library/centos/manifests/latest>\nDEBUG Using 9 workers for multiprocess.\nVERBOSE3 Found Docker command (Entrypoint) None\nVERBOSE3 Found Docker command (Cmd) /bin/bash\nVERBOSE3 Adding Docker CMD as Singularity runscript...\nDEBUG /bin/bash\nVERBOSE3 Found Docker command (Env) PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nVERBOSE3 Found Docker container environment!\nVERBOSE3 Adding Docker environment to metadata tar\nDEBUG Found template for tarinfo\nVERBOSE3 Found Docker command (Labels) {u'build-date': u'20170605', u'vendor': u'CentOS', u'name': u'CentOS Base Image', u'license': u'GPLv2'}\nVERBOSE3 Found Docker container labels!\nVERBOSE3 Adding Docker labels to metadata tar\nDEBUG Found template for tarinfo\nVERBOSE3 Adding Docker runscript to metadata tar\nDEBUG Found template for tarinfo\nDEBUG metadata file /gpfs/home/my_user/.singularity/metadata/sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz already exists, will over-write.\nVERBOSE2 Tar file with Docker env and labels: /gpfs/home/my_user/.singularity/metadata/sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz\nVERBOSE3 Writing Docker layers files to /tmp/.singularity-layers.cjnQiYDr\nVERBOSE2 Writing file /tmp/.singularity-layers.cjnQiYDr with mode w.\nVERBOSE2 Writing file /tmp/.singularity-layers.cjnQiYDr with mode a.\nDEBUG *** FINISHING DOCKER IMPORT PYTHON PORTION ****\nDocker image path: index.docker.io/library/centos:latest\nCache folder set to /gpfs/home/my_user/.singularity/docker\nCreating container runtime...\nImporting: base Singularity environment\nExploding layer: sha256:d5e46245fe40c2d1ab72bfe328de28549b605b2587ab2fa8715f54e3e2de9c5d.tar.gz\nExploding layer: sha256:6b8bbe197a20c88d065c265cf6f6f8b4e3695f104d1f47f01a1298b3566f27fe.tar.gz\nVERBOSE [U=0,P=27606]      message_init()                            Set messagelevel to: 5\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Initialize configuration file: /gpfs/opt/tools/singularity/2.3/etc/singularity/singularity.conf\n[0mDEBUG   [U=0,P=27606]      singularity_config_parse()                Starting parse of configuration file /gpfs/opt/tools/singularity/2.3/etc/singularity/singularity.conf\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key allow setuid = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key max loop devices = '256'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key allow pid ns = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key config passwd = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key config group = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key config resolv_conf = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount proc = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount sys = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount dev = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount home = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount tmp = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount hostfs = 'no'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key bind path = '/etc/localtime'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key bind path = '/etc/hosts'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key user bind control = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key enable overlay = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key mount slave = 'yes'\n[0mVERBOSE [U=0,P=27606]      singularity_config_parse()                Got config key sessiondir max size = '16'\n[0mDEBUG   [U=0,P=27606]      singularity_config_parse()                Finished parsing configuration file '/gpfs/opt/tools/singularity/2.3/etc/singularity/singularity.conf'\n[0mVERBOSE [U=0,P=27606]      singularity_registry_init()               Initializing Singularity Registry\n[0mVERBOSE [U=0,P=27606]      singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/gpfs/opt/tools/singularity/2.3/libexec…",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306936285|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496872401.465015",
        "date": 1496872401465
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-306936282|#733: bootstraping is failing on 2.3>",
                "text": "At the moment, the 2.3 release and the development branch are almost identical. I don't understand why one would work and not the other. Can you confirm that you installed both/either into a clean environment?\n\nIf it is still an issue, can you make a minimal bootstrap definition file, as simple as possible that reproduces this, and I (and maybe others) can try to run it.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/733#issuecomment-306936282|#733: bootstraping is failing on 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496872399.464664",
        "date": 1496872399464
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306935571|#732: Environment variables not available from inside the definition file>",
                "text": "Ahhh, yes, that actually is a \"feature\" not a bug. lol\n\nThis is because the intention of the `bootstrap` command is to try and be as reproducible as possible which means it should not depend on any variables from the \"outside world\". Singularity thus purposefully cleans all variables from the environment when bootstrapping.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306935571|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496872208.416142",
        "date": 1496872208416
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306933509|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Hrmm.. very interesting. Can you rerun with the --debug option, and paste all of the output?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306933509|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496871651.270122",
        "date": 1496871651270
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-306932916|#734: Sourcing from /environment doesn't work>",
                "text": "The `/environment` file has been superseded to a directory structure at `/.singularity.d/env/*`.\n\nSorry!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/734#issuecomment-306932916|#734: Sourcing from /environment doesn't work>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496871505.230626",
        "date": 1496871505230
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306931635|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "I have checked the PBS output and I have an exit status to 2.\nMight be a clue that something went wrong with a command.",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306931635|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496871200.148288",
        "date": 1496871200148
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306930977|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Hey @gmkurtzer \n\nThank you for your reply.\nSorry I have not been clear.\n\nIf I do what you do in a PBS script then it ends like you : \n```cat logs/211501.OU \nDocker image path: index.docker.io/library/centos:latest\nCache folder set to /gpfs/home/xxx/.singularity/docker\nCreating container runtime...\nCentOS Linux release 7.3.1611 (Core) \nls: cannot access .singularity_runtime*: No such file or directory\n```\nbut if I do `ls`in the directory after completion of the job I have : \n```[xxx@xxx singularity]$ ls -al\ntotal 1318912\ndrwx------  4 xxx xxx       4096 Jun  7 23:18 .\ndrwxr-xr-x 15 xxx xxx       4096 Jun  7 18:22 ..\n-rwxr-xr-x  1 xxx xxx 1347420192 Jun  7 16:15 docker-r-sis.img\ndrwxr-xr-x  2 xxx xxx       4096 Jun  7 23:18 logs\n-rw-r--r--  1 xxx xxx        390 Jun  7 23:18 script2.pbs\n-rw-r--r--  1 xxx xxx        430 Jun  7 23:17 script2.pbs~\n-rw-r--r--  1 xxx xxx        430 Jun  7 17:52 script.pbs\n-rw-r--r--  1 xxx xxx        487 Jun  7 17:45 script.pbs~\ndrwx------  3 xxx xxx       4096 Jun  7 23:18 .singularity-runtime.jwR7Fi38\n-rw-r--r--  1 xxx xxx          0 Jun  7 17:53 y.txt\n```\nThus the singularity-runtime.jwR7Fi38 folder has not been deleted at the end.\n\nBelow is the PBS script :\n```bash\n#PBS -S /bin/bash\n#PBS -N singularity\n#PBS -j oe\n#PBS -o logs/\n#PBS -l walltime=12:00:00\n#PBS -l select=1:ncpus=4:mem=20gb\n#PBS -q haswellq\n\ncd $PBS_O_WORKDIR\n\n#export SINGULARITY_LOCALCACHEDIR=$PWD\n\nSINGULARITY_LOCALCACHEDIR=`pwd` singularity exec docker://centos cat /etc/redhat-release; ls -d .singularity_runtime*\n```",
                "pretext": "[singularityware/singularity] New comment by Quanteek on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306930977|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496871027.099613",
        "date": 1496871027099
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#734 Sourcing from /environment doesn't work' https://github.com/singularityware/singularity/issues/734 by fmorency",
                "text": "*Version of Singularity:*\n\n2.3 (neurodebian)\n\n*Expected behavior*\n\nFile is sourced properly when running/executing/shelling the container. This was working in 2.2.1\n\n*Actual behavior*\n\nFile is never sourced.\n\n*Steps to reproduce behavior*\n\nCreate and bootstrap a container using <https://github.com/singularityware/singularity/files/1059262/source_environment_issue.zip|source_environment_issue.zip>\n\n```\n\n*singularity create --size 1000 test.img*\n\n*singularity bootstrap test.img test.def*\n\n```and open a shell in the newly created container. Print the content of the value defined in the sh file\n```\n\n*singularity shell test.img*\n\nSingularity: Invoking an interactive shell within container...\n\nSingularity test.img:/tmp/aaa&gt; echo $SOMEVAR\n\n```\nSource the file from within the shell and print the content of the value again\n\n```Singularity test.img:/tmp/aaa&gt; . /test/test.sh \nSingularity test.img:/tmp/aaa&gt; echo $SOMEVAR\n123\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/fmorency|fmorency>",
                "title": "#734 Sourcing from /environment doesn't work",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/734",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496868016.147247",
        "date": 1496868016147
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dexter2cz on issue <https://github.com/singularityware/singularity/issues/729#issuecomment-306897260|#729: Singularity exec module not working>",
                "text": "Hello,\nmodule is a shell function, that si declared by sourcing /etc/profile (/etc/profile.d/modules.sh -&gt; /usr/share/Modules/init/$shell). Try something like this:\n\n$ singularity exec -s /bin/bash -w test.img bash -c \"source /usr/share/Modules/init/bash; module list\"\n\nNo Modulefiles Currently Loaded.",
                "pretext": "[singularityware/singularity] New comment by dexter2cz on issue <https://github.com/singularityware/singularity/issues/729#issuecomment-306897260|#729: Singularity exec module not working>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496863054.463115",
        "date": 1496863054463
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306891264|#732: Environment variables not available from inside the definition file>",
                "text": "Hi @gmkurtzer \n\nSimply do\n\n```\n$ sudo su\n\n*export BLA=TESTING*\n\n*export BLA2=TESTING2*\n\n*singularity create --size 1000 test.img*\n\n*singularity bootstrap test.img test.def*\n\n```\n\nwith the following `test.def` file\n\n```\nBootStrap: debootstrap\nOSVersion: trusty\nMirrorURL: <http://ca.archive.ubuntu.com/ubuntu/>\n\n%setup\n    touch $SINGULARITY_ROOTFS/$BLA\n\n%post\n    touch $BLA2\n```\n\nNote that neither files are created. The log shows\n\n ```\nI: Base system installed successfully.\n• touch /var/lib/singularity/mnt/container/\n     Running post scriptlet\n• touch\n     touch: missing file operand\n     Try 'touch --help' for more information.\n     ```",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306891264|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496861675.972117",
        "date": 1496861675972
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#733 bootstraping is failing on 2.3' https://github.com/singularityware/singularity/issues/733 by DeepHorizons",
                "text": "*Version of Singularity:*\n\nWorking: 2.2.1\nBroken: 2.3\nGets farther: development branch\n\n*Expected behavior*\n\nInstalling packages succeeds.\n\n*Actual behavior*\n\nInstalling some packages fails.\n`apt` has several complaints,\n• `W: No sandbox user '_apt' on the system, can not drop privileges`\n• `chown: invalid user: 'root:root'`\n• `chown: invalid user: 'root:staff'`\n\nInstalling `sudo` fails on 2.3, and `emacsen-common` fails on the development branch.\n\nRunning the development branch, bootstrapping one file seems to work, then bootstrapping a second file fails.\n\n*Steps to reproduce behavior*\n\n```singularity create -s 4096 image.img\nsingularity bootstrap image.img image.def\n```\n\nbase-notebook.def (Will fail on 2.3, succeed on development)\n```\nBootStrap: docker\nFrom: debian:stretch\n\n%setup\n    # commands to be executed on host outside container during bootstrap\n```# There are some files here, but they don't conflict with anything```\n%post\n    # commands to be executed inside container during bootstrap\n```# add universe repo to apt sources and install some packages\nexport DEBIAN_FRONTEND=noninteractive\n#sed -i '/deb/ s/$/ universe/' /etc/apt/sources.list\nsed -i \"s/http:\\/\\/us.archive.ubuntu.com/http:\\/\\/mirrors.rit.edu/g\" /etc/apt/sources.list\n# Delete any old cache\napt-get clean\nrm -rf /var/lib/apt/lists/*\napt-get update &amp;&amp; apt-get install -yq --no-install-recommends \\\n    wget \\\n    bzip2 \\\n    ca-certificates \\\n    sudo \\\n    locales \\\n    fonts-liberation\n\necho \"en_US.UTF-8 UTF-8\" &gt; /etc/locale.gen &amp;&amp; \\\n    locale-gen\n\n# Install Tini\n\n# Configure environment\necho '\\nexport CONDA_DIR=/opt/conda' &gt;&gt; /environment\nexport CONDA_DIR=/opt/conda\necho 'export PATH=$CONDA_DIR/bin:$PATH' &gt;&gt; /environment\nexport PATH=$CONDA_DIR/bin:$PATH\necho 'export SHELL=/bin/bash' &gt;&gt; /environment\nexport SHELL=/bin/bash\necho 'export NB_USER=jovyan' &gt;&gt; /environment\nexport NB_USER=jovyan\necho 'export NB_UID=1000' &gt;&gt; /environment\nexport NB_UID=1000\necho 'export HOME=/home/$NB_USER' &gt;&gt; /environment\nexport HOME=/home/$NB_USER\necho 'export LC_ALL=en_US.UTF-8' &gt;&gt; /environment\nexport LC_ALL=en_US.UTF-8\necho 'export LANG=en_US.UTF-8' &gt;&gt; /environment\nexport LANG=en_US.UTF-8\necho 'export LANGUAGE=en_US.UTF-8' &gt;&gt; /environment\nexport LANGUAGE=en_US.UTF-8\n\n# Create jovyan user with UID=1000 and in the 'users' group\n\n# Setup jovyan home directory\n\n# Install conda as jovyan\ncd /tmp\nmkdir -p $CONDA_DIR\nwget --quiet https://repo.continuum.io/miniconda/Miniconda3-4.2.12-Linux-x86_64.sh\necho \"c59b3dd3cad550ac7596e0d599b91e75d88826db132e4146030ef471bb434e9a *Miniconda3-4.2.12-Linux-x86_64.sh\" | sha256sum -c -\n/bin/bash Miniconda3-4.2.12-Linux-x86_64.sh -f -b -p $CONDA_DIR\nrm Miniconda3-4.2.12-Linux-x86_64.sh\n$CONDA_DIR/bin/conda config --system --add channels conda-forge\n$CONDA_DIR/bin/conda config --system --set auto_update_conda false\nconda clean -tipsy\n\n# Install Jupyter Notebook and Hub\nconda install --quiet --yes \\\n    'notebook=5.0.*' \\\n    'jupyterhub=0.7.*' \\\n    'jupyterlab=0.18.*' \\\n    &amp;&amp; conda clean -tipsy```\n%runscript\n    # commands to be executed when the container runs\n```start-notebook.sh```\n%test\n    # commands to be executed within container at close of bootstrap process\n\n```\n\nminimal-notebook.def (Fails on development branch)\n```%post\n    # commands to be executed inside container during bootstrap\n    . /environment\n```addgroup staff\n\n# Install all OS dependencies for fully functional notebook server\napt-get update &amp;&amp; apt-get install -yq --no-install-recommends \\\ngit \\\nvim \\\njed \\\nemacs \\\nbuild-essential \\\npython-dev \\\nunzip \\\nlibsm6 \\\npandoc \\\ntexlive-latex-base \\\ntexlive-latex-extra \\\ntexlive-fonts-extra \\\ntexlive-fonts-recommended \\\ntexlive-generic-recommended \\\ntexlive-xetex \\\nlmodern \\\nlibxrender1 \\\ninkscape\n\n# Install ipywidgets\nconda install --quiet --yes \\\n    'ipywidgets=5.1*' &amp;&amp; \\\n    conda clean -tipsy```\n%runscript\n    # commands to be executed when the container runs\n```# This starts a bash shell if no arguments were passed, otherwise runs the command\nif [ -z \"$1\" ]\nthen\n    exec bash\nelse\n    exec \"$@\"\nfi```\n```\n\nHere is a sample log from 2.3 from the base-notebook.def\n```INFO:root:Setting up sudo (1.8.16-0ubuntu1.4) ...\nINFO:root:chown: invalid user: 'root:root'\nINFO:root:dpkg: error processing package sudo (--configure):\nINFO:root: subprocess installed post-installation script returned error exit status 1\nINFO:root:Setting up fonts-liberation (1.07.4-1) ...\nINFO:root:Errors were encountered while processing:\nINFO:root: sudo\nINFO:root:W: No sandbox user '_apt' on the system, can not drop privileges\nINFO:root:E: Sub-process /usr/bin/dpkg returned an error code (1)\nINFO:root:ABORT: Aborting with RETVAL=255\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DeepHorizons|DeepHorizons>",
                "title": "#733 bootstraping is failing on 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/733",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496859775.268789",
        "date": 1496859775268
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306875805|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "text": "Hi @Quanteek,\n\nI can't seem to reproduce this behavior:\n\n```$ singularity --version\n2.3-master.gda9cd20\n$ SINGULARITY_LOCALCACHEDIR=`pwd` singularity exec docker://centos cat /etc/redhat-release; ls -d .singularity_runtime*\nDocker image path: index.docker.io/library/centos:latest\nCache folder set to /home/gmk/.singularity/docker\n[1/1] |===================================| 100.0% \nCreating container runtime...\nCentOS Linux release 7.3.1611 (Core) \nls: cannot access .singularity_runtime*: No such file or directory\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/731#issuecomment-306875805|#731: remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496858403.750748",
        "date": 1496858403750
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306872619|#732: Environment variables not available from inside the definition file>",
                "text": "Hi @fmorency,\n\nWhere are you exporting the variables within the container? Can you post an example deffile?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/732#issuecomment-306872619|#732: Environment variables not available from inside the definition file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496857742.499186",
        "date": 1496857742499
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#732 Environment variables not available from inside the definition file' https://github.com/singularityware/singularity/issues/732 by fmorency",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\n$ export BLA=/path/to/file\n$ singularity bootstrap container.img container.def\n...\nI expect to be able to access $BLA from inside the various sections (`%setup`, `%post`, etc) of the definition file. This was working properly in 2.2.1\n\n*Actual behavior*\n\nThe environment variable is not accessible from inside the definition file. I tried using `SINGULARITY_BLA` and setting the variable in `%environment` without success\n\n*Steps to reproduce behavior*\n\nExport an environment variable on your shell and try using it from inside the definition file",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/fmorency|fmorency>",
                "title": "#732 Environment variables not available from inside the definition file",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/732",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496857580.439706",
        "date": 1496857580439
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#731 remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR' https://github.com/singularityware/singularity/issues/731 by Quanteek",
                "text": "Hey,\n\nFirst of all thank you for this amazing job.\n\nI am a beginner with Singularity so might not be a bug but expected behavior (but did not find something on that in the doc).\nI am using an HPC system with a frontend and computation nodes managed with PBS.\n\n*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nAt the end of my PBS script I want to have zero elements of singularity on the disk since it takes a lot of space (2Go per run).\nI am using SINGULARITY_LOCALCACHEDIR on the current dir since our /tmp is quite small for each node. \n\n*Actual behavior*\n\n.singularity-runtime folder is still available after run.\n\n*Steps to reproduce behavior*\n\nYou can execute this script if you have PBS on your machine : \n```bash\n#PBS -S /bin/bash                                                                                                                             \n#PBS -N singularity                                                                                                                           \n#PBS -j oe                                                                                                                                    \n#PBS -o logs/                                                                                                                                 \n#PBS -l walltime=12:00:00                                                                                                                     \n#PBS -l select=1:ncpus=4:mem=20gb                                                                                                             \n#PBS -q haswellq                                                                                                                              \n\ncd $PBS_O_WORKDIR                                                                                                                             \n\nexport SINGULARITY_LOCALCACHEDIR=$PWD                                                                                                         \n\necho \"pulling\"                                                                                                                                \nsingularity pull docker://quanteek/docker-r-sis                                                                                               \n\necho \"running\"                                                                                                                                \nsingularity exec docker://quanteek/docker-r-sis /home/user01/run.sh p.txt y.txt  \n\n#when the job quits there is still a folder in $PWD which can be heavy in size which can prevent multiple run.\n```\n\nThank you for your help.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/Quanteek|Quanteek>",
                "title": "#731 remaining .singularity-runtime folder in $SINGULARITY_LOCALCACHEDIR",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/731",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496851924.336062",
        "date": 1496851924336
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#730 Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS' https://github.com/singularityware/singularity/issues/730 by dctrud",
                "text": "Singularity 2.3\n\nWe are running singularity on a system with \n\n• User home directories under /home2\n• A kernel that doesn't have neccessary PR_SET_NO_NEW_PRIVS support for user bind\n\nMost of our users are interested in importing docker containers to try out new deep learning apps etc. Since there is no /home2 in these containers the home dir mount will fail. Using `-H /home2/me:/home/me` also fails due to no PR_SET_NO_NEW_PRIVS support.\n\nIs there any chance that there could be some kind of option to rewrite home directories when added to the container /etc/passwd?\n\nAt present we are asking users to do something like...\n\n```Singularity tensorflow_cpu.img:~&gt; export HOME=\"/tmp/${USER}-fakehome\"\nSingularity tensorflow_cpu.img:~&gt; mkdir \"$HOME/\"\n```\n\n... which works, but is a bit messy. Understand if this is not a priority given common PR_SET_NO_NEW_PRIVS support in most-used kernels. We will actually only have this issue until we upgrade our cluster later in the year.\n\nMany thanks for this great software.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/dctrud|dctrud>",
                "title": "#730 Rewrite non-standard home directory path for easy docker imports on system without PR_SET_NO_NEW_PRIVS",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/730",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496851207.049221",
        "date": 1496851207049
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-306836204|#674: (How to) Access local file during bootstrap?>",
                "text": "+1 for the `%pre-files` feature. I need to copy files from host to container and manipulate them in the `%post` section",
                "pretext": "[singularityware/singularity] New comment by fmorency on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-306836204|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496850259.655381",
        "date": 1496850259655
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#729 Singularity exec module not working' https://github.com/singularityware/singularity/issues/729 by hfutxrg",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nAfter executing the command:\nsingularity exec -s /bin/bash -w test.img module list\n\nthe expected output should be (no modules loaded yet but at least has some output):\nCurrently Loaded Modulefiles:\n\nIt's not working for other module commands such as \"module load\"\nThere is no issue if I use \"singularity shell ...\" and then execute \"module list\" inside the container.\n\n*Actual behavior*\n\nthe actual output is:\n/.singularity.d/actions/exec: line 8: exec: module: not found\n\n*Steps to reproduce behavior*\n\nsingularity create test.img\nsingularity bootstrap test.img rhel.def\nsingularity exec -s /bin/bash -w test.img yum install environment-modules\nsingularity exec -s /bin/bash -w test.img module list",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hfutxrg|hfutxrg>",
                "title": "#729 Singularity exec module not working",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/729",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496847326.416936",
        "date": 1496847326416
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by huitre39 on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-306786334|#728: reduce img or convert img to gz archive ?>",
                "text": "but i want use this compressed image (without decompress before)",
                "pretext": "[singularityware/singularity] New comment by huitre39 on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-306786334|#728: reduce img or convert img to gz archive ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496840215.742033",
        "date": 1496840215742
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-306784277|#728: reduce img or convert img to gz archive ?>",
                "text": "Hey @huitre39 try\n\n```gzip -c -9 container.img &gt; container.img.gz\n```\nto compress your image, and to decompress\n\n```gzip -d -f container.img.gz\n```\nI think you will have to decompress before using.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/728#issuecomment-306784277|#728: reduce img or convert img to gz archive ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496839743.610859",
        "date": 1496839743610
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#728 reduce img or convert img to gz archive ?' https://github.com/singularityware/singularity/issues/728 by huitre39",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nI want to reduce my disk or convert my disk to gz archive\n\n*Steps to reproduce behavior*\n\nHello i have problem, i want to reduce size of my disk, can i make it ?\nor can i export my disk to rootfs image (gz archive) ?\ni see that singularity can open the archives for example alpine linux : (Minimal root filesystem. For use in containers. and minimal chroots)\n<https://alpinelinux.org/downloads/>\n<https://nl.alpinelinux.org/alpine/v3.6/releases/x86_64/alpine-minirootfs-3.6.1-x86_64.tar.gz>\n\ncan i convert my img to gz archive (\"root filesystem\") ?\n\nthank's for advance",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/huitre39|huitre39>",
                "title": "#728 reduce img or convert img to gz archive ?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/728",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496825614.426992",
        "date": 1496825614426
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#727 home mount erease /usr/ in container' https://github.com/singularityware/singularity/issues/727 by mschnepf",
                "text": "Hi \nI’m using singularity 2.3, also tested with 2.2.3, on Ubuntu 16.04. Our home directory is on /usr/users/${user}.\n\nI start a singulartiy container with disabled overlay file system  (enable overlay = no) and enabled home mount (mount home = yes). In this container /usr/ is complete empty excluded /usr/users/${user}. So /usr/bin/ /usr/lib/ ... is no longer available inside the container. With enabled overlay file system all directories in /usr/ and the home (/usr/users/${user}) is available inside the container.\n\nThis makes it impossible with disables overlay file system to use programs which are installed in /usr/bin/ for us.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/mschnepf|mschnepf>",
                "title": "#727 home mount erease /usr/ in container",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/727",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496823999.027966",
        "date": 1496823999027
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306705350|#725: urlparse bug in Python 2.6>",
                "text": "No worries! I'm really glad that you caught this. It took me a while to get an old python to reproduce it, and you are completely right it's an issue.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306705350|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496818838.948071",
        "date": 1496818838948
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306704759|#725: urlparse bug in Python 2.6>",
                "text": "Sorry for the master branch. I'm working on some projects right now where I push directly to master... my fault.",
                "pretext": "[singularityware/singularity] New comment by hra0031 on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306704759|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496818643.913575",
        "date": 1496818643913
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306704350|#724: urlparse is buggy in Python 2.6>",
                "text": "@vsoch We are using Centos 6.7 and 6.9 with Python 2.6.6 on our cluster. I know this is a really old implementation of Python but Centos 6 is pretty common in HPC centers.\nYou reproduce it right in the second post. Next time I will try to describe the problem in more detail.",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306704350|#724: urlparse is buggy in Python 2.6>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496818516.893470",
        "date": 1496818516893
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306569015|#725: urlparse bug in Python 2.6>",
                "text": "haha, I am a doop, I missed this earlier! The funny thing about it is that I used re in a much earlier version, and someone else insisted on urlparse. It looks like we are back to re!\n\nI think PRs to master are reserved for releases, and we need to do this to development. @gmkurtzer is that correct?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/725#issuecomment-306569015|#725: urlparse bug in Python 2.6>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496772238.689564",
        "date": 1496772238689
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#726 SINGULARITY_DOCKER_USERNAME not export in bootstrap' https://github.com/singularityware/singularity/issues/726 by vsoch",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nUsing bootstrap to create a container should find the environment variable for `SINGULARITY_DOCKER_USERNAME` akin to how import does.\n\n*Actual behavior*\n\nIt is not found. Likely the export of the variable is not done in the bootstrap flow as it is done for import.\n\n*Steps to reproduce behavior*\n\nThis is from one of our users in the list\n\n```\nexport SINGULARITY_DOCKER_USERNAME=toto\nwget <https://raw.githubusercontent.com/singularityware/singularity/master/examples/docker/Singularity>\nsingularity create --force --size 2048 busybox.img\nsudo -E singularity -vvv bootstrap busybox.img Singularity\n\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#726 SINGULARITY_DOCKER_USERNAME not export in bootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/726",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496771867.545638",
        "date": 1496771867545
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306484502|#724: urlparse is buggy in Python 2.6>",
                "text": "I just had another idea and ran that part of the function manually - is this what you are seeing?\n\n```from urlparse import urlparse\n&gt; &gt; &gt; url='registry.io:4000/api/manifest/tags'\n&gt; &gt; &gt; parsed=urlparse(url)\n&gt; &gt; &gt; parsed\n&gt; &gt; &gt; ParseResult(scheme='registry.io', netloc='', path='4000/api/manifest/tags', params='', query='', fragment='')\n&gt; &gt; &gt; scheme='https'    \n&gt; &gt; &gt; \"%s%s\" %(scheme,\"\".join(parsed[1:]).rstrip('/'))\n&gt; &gt; &gt; 'https4000/api/manifest/tags'\n&gt; &gt; &gt; ```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306484502|#724: urlparse is buggy in Python 2.6>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496755385.157139",
        "date": 1496755385157
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306483465|#724: urlparse is buggy in Python 2.6>",
                "text": "Ok I did the following to try and reproduce the error:\n\n• working in an older Ubuntu (12.04) Docker image\n• downloaded and install Python 2.6.0 (it needed first zlib binaries)\n• installed Singularity 2.3\n• ran the command provided to reproduce\n\nThe first bug I hit is \"no module named datetime\" (did you get this as well? What version of 2.6.* were you running?). I'm having trouble reproducing the error beyond that, I keep seeing (at least what looks to be) correct:\n\n```*** STARTING DOCKER IMPORT PYTHON  ****\nDEBUG Docker layers and (env,labels,runscript) will be written to: /tmp/.singularity-layers.TIGJABZ9\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\nDEBUG Starting Docker IMPORT, includes environment, runscript, and metadata.\nVERBOSE Docker image: testdomain.cz:5000/centos/test\nVERBOSE2 Specified Docker ENTRYPOINT as %runscript.\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: testdomain.cz:5000\nVERBOSE Namespace: centos\nVERBOSE Repo Name: test\nVERBOSE Repo Tag: latest\nVERBOSE Version: None\nVERBOSE Obtaining tags: https://testdomain.cz:5000/v2/centos/test/tags/list\nDEBUG GET https://testdomain.cz:5000/v2/centos/test/tags/list\n```\n\nCould you either give me a Dockerfile /other steps to set up the host as you have it, or give me the `--debug` location where the url is wrong? We do use urlparse once in the dinky function to add https, and it would be trivial to remove it. Testing (Without actually having a registry at some non standard port) with python 2.7.6 the first part to get the image at least look ok to me:\n\n```DEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: testdomain.cz:5000\nVERBOSE Namespace: centos\nVERBOSE Repo Name: test\nVERBOSE Repo Tag: latest\nVERBOSE Version: None\nVERBOSE Obtaining tags: https://testdomain.cz:5000/v2/centos/test/tags/list\nDEBUG GET https://testdomain.cz:5000/v2/centos/test/tags/list\n```\n\nAgain the above is with python 2.7.6, so that might be it. If you know the debug line that is wrong I can try to tweak that part of the code to not use urlparse, otherwise I can try to find an actual non standard registry to test. But I definitely need to know how to install your environment with 2.6 because I had quite a bit of trouble, haha. Let me know!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306483465|#724: urlparse is buggy in Python 2.6>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496755150.079156",
        "date": 1496755150079
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306458330|#454: arch definition needs to be updated?>",
                "text": "&gt; As I've stated, I can't test any other aspects of the Arch bootstrap\nI didn't ask for that. This is is moot in the context here.\n\n&gt; And since I don't like being accused of skewing facts\nFacts:\n• In my PRs I provided everything needed for both the legacy and the actual Arch bootstrap setup as of few months ago.  \n• You merged my PRs. All was fine.\n• You made some other merges on your own to the files I provided, not initiated by me, which broke the Arch bootstrap setup.\n• For the following few months you did not acknowledge and did not fix your merge error even though I described it in detail twice at least.\n• You (and/or vsoch) claimed it was fixed, when it wasn't, and closed the related tickets. \n\nThe latter 2 points are the skew I referred to. Please accept that I'm not accusing, but stating facts.\n\n&gt; your last commit to this project was 8 months, 22 days ago\nI can read Git log alright ;).",
                "pretext": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306458330|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496748538.472791",
        "date": 1496748538472
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306447798|#724: urlparse is buggy in Python 2.6>",
                "text": "Bug: <https://bugs.python.org/issue754016>",
                "pretext": "[singularityware/singularity] New comment by hra0031 on issue <https://github.com/singularityware/singularity/issues/724#issuecomment-306447798|#724: urlparse is buggy in Python 2.6>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496745459.871972",
        "date": 1496745459871
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#725 urlparse bug in Python 2.6' https://github.com/singularityware/singularity/pull/725 by hra0031",
                "text": "*Description of the Pull Request (PR):*\n\nFunction urlparse is buggy in Python 2.6 <https://bugs.python.org/issue754016>. If a Docker Image is on repository with nondefault port e.g. docker://testdomain.cz:5000/ this function return \"testdomain.cz\" as scheme.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #724\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [ ] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/hra0031|hra0031>",
                "title": "#725 urlparse bug in Python 2.6",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/725",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496745396.859035",
        "date": 1496745396859
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#724 urlparse is buggy in Python 2.6' https://github.com/singularityware/singularity/issues/724 by hra0031",
                "text": "*Version of Singularity:*\n\nSingularity 2.3\n\n*Expected behavior*\n\nDocker repository on nonstandart port should work: `docker://testdomain.cz:5000/centos/test`\n\n*Actual behavior*\n\nIf a Docker Image is on repository with nondefault port e.g. docker://testdomain.cz:5000/ this function return \"testdomain.cz\" as scheme.\n\n*Steps to reproduce behavior*\n\nUse Docker repository with nonstandard port e.g.  `singularity --debug shell docker://testdomain.cz:5000/centos/test`",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/hra0031|hra0031>",
                "title": "#724 urlparse is buggy in Python 2.6",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/724",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496745374.854672",
        "date": 1496745374854
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306363572|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "you did good!!!\nI would only add in the leading paragraph something about NeuroDebian, since otherwise it comes out out of the blue later on (like a winner though ;-)). Smth along \"For recent releases of singularity and backports for older Debian and Ubuntu releases, use NeuroDebian repository.\"",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306363572|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496715953.273431",
        "date": 1496715953273
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306357790|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "How did I do?\n\n<http://singularity.lbl.gov/install-linux#debianubuntu-package>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306357790|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496713443.979441",
        "date": 1496713443979
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306354193|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "i.e. if you use neurodebian docker image, should come with most recent:\n```$&gt; docker run -it --rm neurodebian\nroot@bbf0f5c4da38:/# apt-get update -qqq\nroot@bbf0f5c4da38:/# apt-cache policy singularity-container\nsingularity-container:\n  Installed: (none)\n  Candidate: 2.3-1~nd80+1\n  Version table:\n     2.3-1~nd80+1 0\n        500 http://neuro.debian.net/debian/ jessie/main amd64 Packages\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306354193|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496711900.792865",
        "date": 1496711900792
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306354064|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "\"released\" debian and ubuntus would have the version which came out with the release.  backport builds would need to be used from neurodebian.  See <http://neuro.debian.net/pkgs/singularity-container.html> about which version available from which offical release of debian/ubuntu or neurodebian",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306354064|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496711843.786168",
        "date": 1496711843786
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306351266|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "ok I added to the docs, but mentioned that the version is 2.2.1. Let me know when 2.3 is ready and I'll update! <http://singularity.lbl.gov/install-linux#debianubuntu-flavor-install>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306351266|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496710617.627808",
        "date": 1496710617627
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306349498|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "cool! I don't have that version of Ubuntu but tested on a Docker image. Is there going to be an update for this for the 2.3 release? eg:\n\n```Preparing to unpack .../singularity-container_2.1.2-1_amd64.deb ...\nUnpacking singularity-container (2.1.2-1) ...\nSetting up singularity-container (2.1.2-1) ...\nroot@8b1fd08d182d:/# which singularity\n/usr/bin/singularity\nroot@8b1fd08d182d:/# singularity --version\n2.1\n```\n\nIt looks like it installs 2.1. Should I install differently?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306349498|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496709842.529684",
        "date": 1496709842529
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306348742|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "wicked! Let me add to the docs and you can yell at me when (I mean if) I get something wrong :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306348742|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496709502.486133",
        "date": 1496709502486
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306348104|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Filled up on #87 . It is now a part of standard Debian and Ubuntu releases",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306348104|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496709196.445887",
        "date": 1496709196445
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306327584|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "hey @yarikoptic where was your build located again? If you are going to reliably be building for each new release, I'd like to put instructions for using your build in the singularity docs proper.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-306327584|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496701428.161240",
        "date": 1496701428161
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#723 Allow mount point to have SETGID/SETUID bits set' https://github.com/singularityware/singularity/pull/723 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\n\nAllow `mount_point` in `singularity_image_mount()` to mount in locations with 2755, 4755, and 6755 permissions, instead of just 0755 permissions. If there is a better way to do this than the dumb way I've implemented it here, I'm all ears. Perhaps a better solution would be to have `chk_mode()` instead have arguments `int chk_mode(char *path, mode_t *mode)` where mode is instead an array of modes, however I believe that this isn't really necessary.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #707 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] This PR is NOT against the project's master branch\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#723 Allow mount point to have SETGID/SETUID bits set",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/723",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496690611.916635",
        "date": 1496690611916
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-306274188|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "I see the same behavior on an EL6 host as well.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-306274188|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496689222.421828",
        "date": 1496689222421
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-306273839|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "No, the behavior is the same without --containall.  Can you reproduce it?",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-306273839|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496689142.391321",
        "date": 1496689142391
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/707#issuecomment-306249811|#707: Error if container directory is setgid>",
                "text": "Fine by me. If there's no specific reason to make sure that this directory is _not_ SETUID/SETGID, then yes, checking for 755 should be sufficient.",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/707#issuecomment-306249811|#707: Error if container directory is setgid>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496683425.301406",
        "date": 1496683425301
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-306249102|#611: Nvidia GPU support with different driver versions?>",
                "text": "Hi Greg, \n\nNope, it's dynamically linked:\n```$ ldd `which nvidia-smi`\n        linux-vdso.so.1 =&gt;  (0x00007ffd32fae000)\n        libpthread.so.0 =&gt; /usr/lib64/libpthread.so.0 (0x00007f84af507000)\n        libdl.so.2 =&gt; /usr/lib64/libdl.so.2 (0x00007f84af302000)\n        libc.so.6 =&gt; /usr/lib64/libc.so.6 (0x00007f84aef41000)\n        librt.so.1 =&gt; /usr/lib64/librt.so.1 (0x00007f84aed39000)\n        /lib64/ld-linux-x86-64.so.2 (0x00007f84af730000)\n$ objdump -T `which nvidia-smi` | grep GLIBC_ | sed -e 's/^.*\\(GLIBC_[^ ]*\\).*$/\\1/' | sort | uniq\nGLIBC_2.2.5\n```\nSo yes, portability may not be great, but as you said, it's already the case for libraries.\n\nAnd binding the binary with -B does work:\n```$ singularity exec -B /usr/bin/nvidia-smi --nv cuda.img nvidia-smi -L\nGPU 0: Tesla P40 (UUID: GPU-0e07a660-2201-322e-1456-18a213fc2983)\nGPU 1: Tesla P40 (UUID: GPU-42b925fd-0dee-ec3c-627e-3024d9376024)\n```",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-306249102|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496683269.246532",
        "date": 1496683269246
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306226934|#721: Could not mount Singularity overlay: No such device>",
                "text": "Yeah, that was it—disabling overlay in `/etc/singularity/singularity.conf` for debian build makes it work again.",
                "pretext": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306226934|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496678320.508704",
        "date": 1496678320508
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306204738|#721: Could not mount Singularity overlay: No such device>",
                "text": "and the 2nd part of the mystery is that on that stretch box, with 3.16.0 kernel there is no overlayfs.ko, i.e. there is no overlay support\n```mvdoc@euclid ~/singularity/hauntedhouse $ find /lib/modules -iname '*overlay*'\nmvdoc@euclid ~/singularity/hauntedhouse $ lsmod | grep overlay\n```\nso you would either need to install some backported kernel or just tune singularity.conf to not use overlays on that box... \nin my case on smaug server I have newer kernel and overlayfs.ko is available and loaded, that is why it worked just fine\n\non singularity side it would be nice if error message in this case was a bit more descriptive -- e.g. if it could say \"failed to mount OverlayFS file system.  Your kernel seems to lack support for it\" or alike",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306204738|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496673593.795763",
        "date": 1496673593795
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306202523|#721: Could not mount Singularity overlay: No such device>",
                "text": "ok -- at least the mystery of diverging behavior is now clear:\n\n```mvdoc@euclid ~/singularity/hauntedhouse $ grep 'OverlayFS.*host.*build' debian-d.log compiled-d.log \ndebian-d.log:DEBUG   [U=1000,P=71887]   singularity_runtime_overlayfs()           OverlayFS enabled by host build\ncompiled-d.log:VERBOSE [U=1000,P=71877]   singularity_runtime_overlayfs()           OverlayFS not supported by host build\n```\nso the pre-compiled one has no OverlayFS, thus it didn't \"fail\" since it didn't try (silently, even though .conf was instructing to \"use\" it). ",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306202523|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496673082.617503",
        "date": 1496673082617
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-306196788|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "<http://www.openwall.com/lists/musl/2017/01/20/4> from IRC discussion on #alpine-devel",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-306196788|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496671745.164220",
        "date": 1496671745164
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-306176546|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "text": "<https://bugs.alpinelinux.org/issues/5078> provide a workaround for i3. What is the best course of action ?",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/722#issuecomment-306176546|#722: GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496666021.660243",
        "date": 1496666021660
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#722 GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet' https://github.com/singularityware/singularity/issues/722 by truatpasteurdotfr",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\n*Actual behavior*\n\n```\n/bin/bash ../../../libtool  --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../../../src  -DSYSCONFDIR=\\\"/etc\\\" -DLOCALSTATEDIR=\\\"/var\\\" -DLIBEXECDIR=\\\"/usr/libexec\\\" -DNS_CLONE_NEWPID -DNS_CLONE_FS -DNS_CLONE_NEWNS -DNS_CLONE_NEWUSER -DNS_CLONE_NEWIPC -DSINGULARITY_NO_NEW_PRIVS -DSINGULARITY_MS_SLAVE -DSINGULARITY_OVERLAYFS  -Os -fomit-frame-pointer -Wall -fpie -fPIC  -Os -fomit-frame-pointer -MT ../../util/libinternal_la-config_parser.lo -MD -MP -MF ../../util/.deps/libinternal_la-config_parser.Tpo -c -o ../../util/libinternal_la-config_parser.lo `test -f '../../util/config_parser.c' || echo './'`../../util/config_parser.c\nlibtool: compile:  gcc -DHAVE_CONFIG_H -I. -I../../../src -DSYSCONFDIR=\\\"/etc\\\" -DLOCALSTATEDIR=\\\"/var\\\" -DLIBEXECDIR=\\\"/usr/libexec\\\" -DNS_CLONE_NEWPID -DNS_CLONE_FS -DNS_CLONE_NEWNS -DNS_CLONE_NEWUSER -DNS_CLONE_NEWIPC -DSINGULARITY_NO_NEW_PRIVS -DSINGULARITY_MS_SLAVE -DSINGULARITY_OVERLAYFS -Os -fomit-frame-pointer -Wall -fPIC -Os -fomit-frame-pointer -MT ../../util/libinternal_la-config_parser.lo -MD -MP -MF ../../util/.deps/libinternal_la-config_parser.Tpo -c ../../util/config_parser.c  -fPIC -DPIC -o ../../util/.libs/libinternal_la-config_parser.o\n../../util/config_parser.c: In function 'singularity_config_parse':\n../../util/config_parser.c:145:44: error: 'GLOB_TILDE' undeclared (first use in this function)\n                 int err = glob(fname_glob, GLOB_TILDE, log_glob_error, &amp;glob_results);\n                                            ^~~~~~~~~~\n../../util/config_parser.c:145:44: note: each undeclared identifier is reported only once for each function it appears in\nmake[5]: *** [Makefile:588: ../../util/libinternal_la-config_parser.lo] Error 1\nmake[5]: Leaving directory '/home/tru/singularity-build/2.3/src/singularity-2.3/src/lib/runtime'\nmake[4]: *** [Makefile:650: all-recursive] Error 1\nmake[4]: Leaving directory '/home/tru/singularity-build/2.3/src/singularity-2.3/src/lib/runtime'\nmake[3]: *** [Makefile:376: all-recursive] Error 1\nmake[3]: Leaving directory '/home/tru/singularity-build/2.3/src/singularity-2.3/src/lib'\nmake[2]: *** [Makefile:2866: all-recursive] Error 1\nmake[2]: Leaving directory '/home/tru/singularity-build/2.3/src/singularity-2.3/src'\nmake[1]: *** [Makefile:591: all] Error 2\nmake[1]: Leaving directory '/home/tru/singularity-build/2.3/src/singularity-2.3/src'\nmake: *** [Makefile:390: all-recursive] Error 1\n\n```\n\n*Steps to reproduce behavior*\n\nalpine linux 3.6 x86_64:\n\n<https://github.com/singularityware/singularity/files/1051954/APKBUILD.txt|APKBUILD.txt>\n$ abuild -r\n\nref: alpine upstream musl <http://www.openwall.com/lists/musl/2017/01/17/3>",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/truatpasteurdotfr|truatpasteurdotfr>",
                "title": "#722 GLOB_TILDE (glibc) required from released 2.3 version: non musl compatible yet",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/722",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496664538.399841",
        "date": 1496664538399
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306092468|#454: arch definition needs to be updated?>",
                "text": "The deffile has been updated to what you have current in your branch. Sorry this got missed and thanks for the pointer.\n\nAs I've stated, I can't test any other aspects of the Arch bootstrap code because I'm not running Arch, and `pacstrap` is not packaged for Debian/Ubuntu. Please test and if you find that anything else is broken, open a new issue or better yet, submit a PR.\n\nAnd since I don't like being accused of skewing facts, your last commit to this project was 8 months, 22 days ago and as I mentioned, the underlying bootstrap code has changed considerably since then.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306092468|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496631764.924636",
        "date": 1496631764924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/454|#454 arch definition needs to be updated?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/454|#454 arch definition needs to be updated?> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496631764.924631",
        "date": 1496631764924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/720|#720 Does anyone use run-singularity?> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/720|#720 Does anyone use run-singularity?> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496628954.663124",
        "date": 1496628954663
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306087412|#720: Does anyone use run-singularity?>",
                "text": "This was fun, I'm glad I asked! Closing issue.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306087412|#720: Does anyone use run-singularity?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496628954.663123",
        "date": 1496628954663
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306086565|#720: Does anyone use run-singularity?>",
                "text": "Yep, exactly. I wish there was better magic to it, and one day there might be if we populate the image with an ELF binary header... But for now this method works fine. :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306086565|#720: Does anyone use run-singularity?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496628462.617850",
        "date": 1496628462617
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306084340|#720: Does anyone use run-singularity?>",
                "text": "ahh look at that! It is!\n\n```\nstrace ./container.img \nexecve(\"./container.img\", [\"./container.img\"], [/* 65 vars */]) = 0\n\n...\n\nexecve(\"/home/vanessa/Packages/google-cloud-sdk/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/* 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/.rbenv/plugins/ruby-build/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/.rbenv/shims/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/.rbenv/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/anaconda3/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/home/vanessa/.local/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/usr/local/sbin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars _/]) = -1 ENOENT (No such file or directory)\nexecve(\"/usr/local/bin/run-singularity\", [\"run-singularity\", \"./container.img\"], [/_ 65 vars */]) = 0\nbrk(NULL)                               = 0x55b794664000\n```\n\nI wonder how that works - does it find some header indicating the right executable (eg, like `!#/bin/bash`) and then it literally just looks across all folders on the path for it (until it finds it).",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306084340|#720: Does anyone use run-singularity?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496627164.497537",
        "date": 1496627164497
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306080277|#720: Does anyone use run-singularity?>",
                "text": "the `run-singularity` wrapper is necessary for direct execution of images. :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/720#issuecomment-306080277|#720: Does anyone use run-singularity?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496624566.274918",
        "date": 1496624566274
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306078459|#721: Could not mount Singularity overlay: No such device>",
                "text": "grr.. the beast works ok on my box with debian version of the package:\n```smaug:~/repronim/singularity\n$&gt; /usr/bin/singularity exec hauntedhouse.img echo \"Hello world\\!\" \nHello world!\n1 11554.....................................:Sun 04 Jun 2017 08:35:40 PM EDT:.\nsmaug:~/repronim/singularity\n$&gt; singularity --version                                             \n2.3-dist\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306078459|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496622960.155782",
        "date": 1496622960155
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306071327|#721: Could not mount Singularity overlay: No such device>",
                "text": "I'm the student, hello! :-) \nso there were some old libraries hanging around. I removed them, and performed a clean install from neurodebian package. Then I re-created the image, just to be sure, but it still gives the same error. If  I build from source it works fine. \n\ndebian:\n```mvdoc@euclid ~/singularity/hauntedhouse $ /usr/bin/singularity exec hauntedhouse2.img echo \"Hello world\\!\"\nERROR  : Could not mount Singularity overlay: No such device\nABORT  : Retval = 255\n```\n\nCompiled:\n```mvdoc@euclid ~/singularity/hauntedhouse $ /usr/local/bin/singularity exec hauntedhouse2.img echo \"Hello world\\!\"\nHello world!\n```",
                "pretext": "[singularityware/singularity] New comment by mvdoc on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306071327|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496615042.706686",
        "date": 1496615042706
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306069919|#721: Could not mount Singularity overlay: No such device>",
                "text": "is there any chance of old libraries still hanging around?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/721#issuecomment-306069919|#721: Could not mount Singularity overlay: No such device>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496613400.622884",
        "date": 1496613400622
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#721 Could not mount Singularity overlay: No such device' https://github.com/singularityware/singularity/issues/721 by yarikoptic",
                "text": "*Version of Singularity:*\n\nNeuroDebian backport build of 2.3 for jessie\n\nOne of the students reported that image fails to run using my (Neuro)Debian build but works using \"upstream\" build (installed under /usr/local)... local installation is N/A ATM so can't verify but here is the trail of output from singularity.  I wonder if any clue what could lead to such failure?\n```mvdoc@euclid ~/singularity/hauntedhouse $ singularity -d run hauntedhouse.img\n...\nDEBUG   [U=1000,P=34675]   singularity_registry_get()                Returning NULL on 'DISABLE_OVERLAYFS'\nDEBUG   [U=1000,P=34675]   singularity_registry_get()                Returning NULL on 'WRITABLE'\nDEBUG   [U=1000,P=34675]   singularity_runtime_overlayfs()           OverlayFS enabled by host build\nDEBUG   [U=1000,P=34675]   singularity_runtime_overlayfs()           Setting up overlay mount options\nDEBUG   [U=1000,P=34675]   singularity_runtime_overlayfs()           Checking for existance of overlay directory: /var/lib/singularity/mnt/overlay\nDEBUG   [U=1000,P=34675]   singularity_priv_escalate()               Temporarily escalating privileges (U=1000)\nDEBUG   [U=0,P=34675]      singularity_priv_escalate()               Clearing supplementary GIDs.\nDEBUG   [U=0,P=34675]      singularity_runtime_overlayfs()           Mounting overlay tmpfs: /var/lib/singularity/mnt/overlay\nDEBUG   [U=0,P=34675]      singularity_runtime_overlayfs()           Creating upper overlay directory: /var/lib/singularity/mnt/overlay/upper\nDEBUG   [U=0,P=34675]      s_mkpath()                                Creating directory: /var/lib/singularity/mnt/overlay/upper\nDEBUG   [U=0,P=34675]      singularity_runtime_overlayfs()           Creating overlay work directory: /var/lib/singularity/mnt/overlay/work\nDEBUG   [U=0,P=34675]      s_mkpath()                                Creating directory: /var/lib/singularity/mnt/overlay/work\nDEBUG   [U=0,P=34675]      singularity_runtime_overlayfs()           Creating overlay_final directory: /var/lib/singularity/mnt/overlay/final\nDEBUG   [U=0,P=34675]      s_mkpath()                                Creating directory: /var/lib/singularity/mnt/overlay/final\nVERBOSE [U=0,P=34675]      singularity_runtime_overlayfs()           Mounting overlay with options: lowerdir=/var/lib/singularity/mnt/container,upperdir=/var/lib/singularity/mnt/overlay/upper,workdir=/var/lib/singularity/mnt/overlay/work\nERROR   [U=0,P=34675]      singularity_runtime_overlayfs()           Could not mount Singularity overlay: No such device\nABORT   [U=0,P=34675]      singularity_runtime_overlayfs()           Retval = 255\n```\noverlay is enabled:\n```\nmvdoc@euclid ~/singularity/hauntedhouse $ grep overlay /etc/singularity/singularity.conf \nenable overlay = yes\n``",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#721 Could not mount Singularity overlay: No such device",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/721",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496613084.607863",
        "date": 1496613084607
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#720 Does anyone use run-singularity?' https://github.com/singularityware/singularity/issues/720 by vsoch",
                "text": "Just wondering... it's a lonely little executable still produced in the install \"bin\":\n\n```/usr/local/bin\n├── run-singularity\n└── singularity\n```\n\nI had forgotten that it existed entirely :)",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#720 Does anyone use run-singularity?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/720",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496611536.530306",
        "date": 1496611536530
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064897|#719: bad variable name with singularity import>",
                "text": "Maybe we could try double quotes for the Dockerfile?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064897|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496608208.347551",
        "date": 1496608208347
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064885|#719: bad variable name with singularity import>",
                "text": "I found this in the docs, although it is for exec:\n\n&gt; &gt; Note: The exec form is parsed as a JSON array, which means that you must use double-quotes (“) around words not single-quotes (‘).\nIt looks like the section with the ENV variables (History) might also be parsed as a json array? --&gt; <https://github.com/docker/distribution/blob/master/manifest/schema1/config_builder.go#L82>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064885|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496608194.346545",
        "date": 1496608194346
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064535|#719: bad variable name with singularity import>",
                "text": "@satra it's actually on Docker's end - the variable that is provided in the manifest does not have any quotes!\n\n```\n\n   u'MATLABCMD=/opt/mcr/v85/toolbox/matlab',\n   u'SPMMCRCMD=/opt/spm12/run_spm12.sh /opt/mcr/v85/ script',\n\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306064535|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496607828.325864",
        "date": 1496607828325
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by satra on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060275|#719: bad variable name with singularity import>",
                "text": "in the docker shell those are completely valid environment variables because they are in \"quotes\"",
                "pretext": "[singularityware/singularity] New comment by satra on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060275|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496603264.069067",
        "date": 1496603264069
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by satra on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060246|#719: bad variable name with singularity import>",
                "text": "@vsoch and @gmkurtzer - it seems like the environment variable extractor doesn't respect spaces in the string.",
                "pretext": "[singularityware/singularity] New comment by satra on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060246|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496603230.067190",
        "date": 1496603230067
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jokedurnez on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060239|#719: bad variable name with singularity import>",
                "text": "Thanks for figuring this out Vanessa !\nAlthough in the original docker file, it's a command with \".\n```ENV MATLABCMD=\"/opt/mcr/v85/toolbox/matlab\" \\\n    SPMMCRCMD=\"/opt/spm12/run_spm12.sh /opt/mcr/v85/ script\" \\\n    FORCE_SPMMCR=1\n```\n\nAnd it's the fatty nipype image :-p .  I don't know what to do with this, I linked it to an issue with nipype.",
                "pretext": "[singularityware/singularity] New comment by jokedurnez on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306060239|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496603222.066665",
        "date": 1496603222066
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306057550|#454: arch definition needs to be updated?>",
                "text": "I'm not blaming but stating a fact. Please don't take it personal, don't skew the facts and please don't lecture me. That's not encouraging.",
                "pretext": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306057550|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496600605.916490",
        "date": 1496600605916
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306055877|#454: arch definition needs to be updated?>",
                "text": "It does not help to continuously blame me for a merging error, what does help is a PR. Since your last commit (8'ish months ago), we have had significant changes to the underlying bootstrap architecture, and neither @vsoch nor myself have the means or necessity to test or debug running Arch Linux on the host side, so until we get help, it will remain untested and broken.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306055877|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496598909.819997",
        "date": 1496598909819
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306051804|#454: arch definition needs to be updated?>",
                "text": "@gmkurtzer No, it was just a merge error on your side. I explained it twice at least. Sure I don't think it was intentional. But I expected you would finally fix it. That did not happen. Too bad.",
                "pretext": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306051804|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496594837.589697",
        "date": 1496594837589
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> The branch \"2.x\" was deleted by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> The branch \"2.x\" was deleted by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496593687.524155",
        "date": 1496593687524
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049865|#454: arch definition needs to be updated?>",
                "text": "@czka I can not promise that I, or anyone else, won't break pieces of this code with updates or reorganizations, that is why we need help to move forward! But it won't happen intentionally.\n\nAgain, I think the cause of much of this was that you had it fixed in the 'master' branch, but the master branch was an unfortunate dead end. It is fixed now, but nobody should be submitting PR's against master anyway.\n\nThanks and I look forward to having this fixed!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049865|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496592922.480287",
        "date": 1496592922480
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/454|#454 arch definition needs to be updated?> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/454|#454 arch definition needs to be updated?> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496592827.474779",
        "date": 1496592827474
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049777|#454: arch definition needs to be updated?>",
                "text": "will (or won't :P) do! Reopening issue.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049777|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496592827.474764",
        "date": 1496592827474
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049042|#454: arch definition needs to be updated?>",
                "text": "@vsoch \nArch example is still broken, both on <https://github.com/singularityware/singularity/blob/master/examples/arch/Singularity|master> and the latest <https://github.com/singularityware/singularity/blob/2.3/examples/arch/Singularity|2.3 release>. Still a mix of the old and the new format, which originates from @gmkurtzer merge error months ago, as explained above. This ticket should be re-opened.\n\nI will fix this and update it for the current Arch Linux install process. Next weekend or the following, maybe. Just please promise you won't break my balls again ;).",
                "pretext": "[singularityware/singularity] New comment by czka on issue <https://github.com/singularityware/singularity/issues/454#issuecomment-306049042|#454: arch definition needs to be updated?>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496592090.432351",
        "date": 1496592090432
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306037465|#718: AWESOME JOB!>",
                "text": "@singularityware/singularity-maintainers  alarm alarm\nThat was a test ;-)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306037465|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496579760.790960",
        "date": 1496579760790
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306017290|#718: AWESOME JOB!>",
                "text": "okay I added both of you, let me know who else (or just add them at willy nilly!)\n\n...if only everything in the world were as awesome as Github :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306017290|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496550086.685100",
        "date": 1496550086685
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306015733|#718: AWESOME JOB!>",
                "text": "Yep! Those are the only kind of ideas @yarikoptic has. ;)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306015733|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496547228.576735",
        "date": 1496547228576
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306014956|#718: AWESOME JOB!>",
                "text": "oh that's a great idea!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306014956|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496545903.528779",
        "date": 1496545903528
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013964|#718: AWESOME JOB!>",
                "text": "we did something like that for fail2ban, further segmenting into OSes etc: <https://github.com/orgs/fail2ban/teams> , comes handy at times to address specific ppl",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013964|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496544110.461562",
        "date": 1496544110461
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013939|#718: AWESOME JOB!>",
                "text": "just add a team \"Maintainers\" here, and then post a new issue prior to release addressing the team -- here would be your \"mailing list\" ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013939|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496544057.459630",
        "date": 1496544057459
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013788|#719: bad variable name with singularity import>",
                "text": "Sorry, I'm on an issue closing rampage! ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013788|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543793.450230",
        "date": 1496543793450
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013758|#719: bad variable name with singularity import>",
                "text": "OK, as you wish! :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013758|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543756.449055",
        "date": 1496543756449
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013723|#718: AWESOME JOB!>",
                "text": "Yeah, groups.io I think was also free, but that one didn't seem perfect either. Maybe I'm just so old school that I compare everything to the awesomeness that was Mailman. ;)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013723|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543706.447176",
        "date": 1496543706447
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/719|#719 bad variable name with singularity import> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/719|#719 bad variable name with singularity import> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543699.446805",
        "date": 1496543699446
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013721|#719: bad variable name with singularity import>",
                "text": "Heeeey @gmkurtzer you can't close an issue until @jokedurnez has been resolved! The lines that are written to generate that file live in our python code, so there could be something we need to fix here. I'll just reopen this :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013721|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543699.446793",
        "date": 1496543699446
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/705|#705 mount network home directory> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/705|#705 mount network home directory> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543645.445102",
        "date": 1496543645445
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-306013685|#705: mount network home directory>",
                "text": "Our pleasure! Closing the issue. Let us know (by commenting) if any additional attention is required.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-306013685|#705: mount network home directory>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543645.445085",
        "date": 1496543645445
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013675|#718: AWESOME JOB!>",
                "text": "They are out there, you just gotta pay for them! Or use the one that I found that is free... but I don't think you liked it. :/",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013675|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543623.444407",
        "date": 1496543623444
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/719|#719 bad variable name with singularity import> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/719|#719 bad variable name with singularity import> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543590.443314",
        "date": 1496543590443
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013651|#719: bad variable name with singularity import>",
                "text": "This doesn't sound like a bug with Singularity. :)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013651|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543589.443310",
        "date": 1496543589443
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/704#issuecomment-306013518|#704: SESSIONDIR_PREFIX in 2.3>",
                "text": "Heyas.\n\nThe reason for this change was to remove the necessity for a cleanup process/daemon with every run. Now the session directory is a volatile mounted tmpfs at the defined location. Once the mount namespace goes away via the foreground process, this location magically goes away. Also, because it is within the mount namespace, multiple Singularity processes, each within their own namespaces, will not collide with a shared location.\n\nNow, where this does end up being an issue is because items being within the `/var` file system as you pointed out (`localstatedir`) should always be local. So when Singularity is built, it should be managed such that this location is local. Will it work if over NFS, yes, as long as `root_squash` is not enabled via NFS options.\n\nHope that helps!\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/704#issuecomment-306013518|#704: SESSIONDIR_PREFIX in 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543333.433867",
        "date": 1496543333433
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013406|#719: bad variable name with singularity import>",
                "text": "ok, I found the issue. In one of your Docker environment files you have this:\n\n```cat .singularity.d/env/10-docker.sh \nexport PATH=/usr/local/miniconda/bin:/usr/lib/ruby/gems/2.3/bin:/bin::/usr/lib/fsl/5.0:/usr/lib/afni/bin:/opt/freesurfer/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nexport DEBIAN_FRONTEND=noninteractive\nexport FS_OVERRIDE=0\nexport OS=Linux\nexport FSF_OUTPUT_FORMAT=nii.gz\nexport FIX_VERTEX_AREA=\nexport FREESURFER_HOME=/opt/freesurfer\nexport MNI_DIR=/opt/freesurfer/mni\nexport SUBJECTS_DIR=/opt/freesurfer/subjects\nexport PERL5LIB=/opt/freesurfer/mni/share/perl5\nexport MNI_PERL5LIB=/opt/freesurfer/mni/share/perl5\nexport MINC_BIN_DIR=/opt/freesurfer/mni/bin\nexport MINC_LIB_DIR=/opt/freesurfer/mni/lib\nexport MNI_DATAPATH=/opt/freesurfer/mni/data\nexport FSL_DIR=/usr/share/fsl/5.0\nexport FSLDIR=/usr/share/fsl/5.0\nexport FSLOUTPUTTYPE=NIFTI_GZ\nexport FSLMULTIFILEQUIT=TRUE\nexport POSSUMDIR=/usr/share/fsl/5.0\nexport LD_LIBRARY_PATH=/usr/lib/fsl/5.0:\nexport FSLTCLSH=/usr/bin/tclsh\nexport FSLWISH=/usr/bin/wish\nexport AFNI_MODELPATH=/usr/lib/afni/models\nexport AFNI_IMSAVE_WARNINGS=NO\nexport AFNI_TTATLAS_DATASET=/usr/share/afni/atlases\nexport AFNI_PLUGINPATH=/usr/lib/afni/plugins\nexport ANTSPATH=/opt/ants\nexport C3DPATH=/opt/c3d/\nexport GEM_HOME=/usr/lib/ruby/gems/2.3\nexport BUNDLE_PATH=/usr/lib/ruby/gems/2.3\nexport BUNDLE_BIN=/usr/lib/ruby/gems/2.3/bin\nexport BUNDLE_SILENCE_ROOT_WARNING=1\nexport BUNDLE_APP_CONFIG=/usr/lib/ruby/gems/2.3\nexport MATLABCMD=/opt/mcr/v85/toolbox/matlab\nexport SPMMCRCMD=/opt/spm12/run_spm12.sh /opt/mcr/v85/ script\nexport FORCE_SPMMCR=1\nexport LANG=C.UTF-8\nexport LC_ALL=C.UTF-8\nexport ACCEPT_INTEL_PYTHON_EULA=yes\nexport MKL_NUM_THREADS=1\nexport OMP_NUM_THREADS=1\n```\n\nand specifically, this line is the bug:\n\n```export SPMMCRCMD=/opt/spm12/run_spm12.sh /opt/mcr/v85/ script\n```\n\nHaving the export on the same line, and that entire thing without any \" I think is tripping it up.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306013406|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496543125.426814",
        "date": 1496543125426
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/699|#699 latest release 2.3 FTBS when building deb> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/699|#699 latest release 2.3 FTBS when building deb> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496542891.418503",
        "date": 1496542891418
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-306013268|#699: latest release 2.3 FTBS when building deb>",
                "text": "Excellent. Closing the issue, but feel free to comment to let me know if I missed something.\n\n(I love closing issues!) lol",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-306013268|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496542890.418500",
        "date": 1496542890418
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013218|#718: AWESOME JOB!>",
                "text": "Yes. I think we should have a 'devel' or a 'prerelease' email list, where we give everyone the heads up and emphasis the coming release such that distribution packagers can all be notified and releases can be coordinated.\n\nI really wish we had a great email list solution... :(",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-306013218|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496542806.415331",
        "date": 1496542806415
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-306013040|#712: Fix debian package>",
                "text": "FWIW -- current state of the \"official\" Debian packaging could be found in this repository <https://anonscm.debian.org/git/collab-maint/singularity-container.git>\n\nCheers,",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-306013040|#712: Fix debian package>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496542480.403448",
        "date": 1496542480403
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-306011173|#705: mount network home directory>",
                "text": "@bauerm97 @gmkurtzer Thank you for all of your supports.  Have a wonderful day.\n\n-Tam",
                "pretext": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-306011173|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496538995.267755",
        "date": 1496538995267
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306006066|#719: bad variable name with singularity import>",
                "text": "I've been trying for a few hours to download the layers (albeit my internet is awful). How big of an image is this? I can go to campus later (with a better connection) to test. Based on the error message, here are my first gut feelings about what might be going on. 1) is that somewhere in the environment you might have something that looks like this:\n\n```export PATH=/bla/bla:$PATH\n```\nYou aren't technically supposed to put the export and variable definition on the same line (I think that is called a \"bashism\") and it can lead to that \"bad variable name\" error. I would look in the container's `/singularity.d/env/*` (which are combined to be `/environment` so look there too). And look for statements like that. If you find any, try doing something more like this:\n\n```PATH=/bla/bla:$PATH\nexport PATH\n```\n(two lines)\n\nThe second thing that comes to mind is the `SHELL` itself. I would see what shell is being called when you shell in, and then try setting `SINGULARITY_SHELL` to be explicitly `/bin/bash`. Actually, if you have one of said \"bashisms\" and the error is happening because the shell is `/bin/sh` that might fix it.\n\nThen the third thing that comes to mind (related to the above too) is the top part of any of those files, I've seen that kind of error when I call a script but the top has this bit:\n\n```#!/bin/sh\n```\nshabang, whatever it's called, wrong. And again, the shell that you use going in might have influence here. The reason I bring these things up is because if we look at the `actions/shell` we see that all that it does is figure out the shell to use, and source a bunch of files. I'll split this up and add some commentary:\n\nso here we see the default it's using is `/bin/sh`, and this makes sense for older systems support maybe:\n```#!/bin/sh\n```\n\nhere we see why we want to check the environment files - it just loop de loops through them and sources. So if a shebang / export / is weird, it could cause that error. I would look specifically for the path it mentioned - something about opt?\n\n```\nfor script in /.singularity.d/env/*.sh; do\n    if [ -f \"$script\" ]; then\n        . $script\n    fi\ndone\n\n```\nhere is why I recommended setting `SINGULARITY_SHELL` - if it's set then we use it, and exit this script\n\n```if test -n \"$SINGULARITY_SHELL\" -a -x \"$SINGULARITY_SHELL\"; then\n    exec $SINGULARITY_SHELL \"$@\"\n```echo \"ERROR: Failed running shell as defined by '\\$SINGULARITY_SHELL'\" 1&gt;&amp;2\nexit 1```\n```\n\notherwise, we try to do our best to guess, based on what we sniff and find:\n\n```elif test -x /bin/bash; then\n    SHELL=/bin/bash\n    PS1=\"Singularity $SINGULARITY_CONTAINER:\\\\w&gt; \"\n    export SHELL PS1\n    exec /bin/bash --norc \"$@\"\nelif test -x /bin/sh; then\n    SHELL=/bin/sh\n    export SHELL\n    exec /bin/sh \"$@\"\nelse\n    echo \"ERROR: /bin/sh does not exist in container\" 1&gt;&amp;2\nfi\nexit 1\n```\nAnyhoo - I would look at those specific things:\n• variables in environment files\n• declarations in environment files\n• selected and used shell given those things\n\nIf you can't figure it out from that, then run with `--debug` and see if you can figure out where in the action/shell script the error is happening. If you can't figure it out then, then I'll try to reproduce the error when I can download that monstrous image later. I'm not even looking at it, but I'm almost certain based on the number of layers and time that the base is that fatty mriqc :P ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/719#issuecomment-306006066|#719: bad variable name with singularity import>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496530176.884391",
        "date": 1496530176884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#719 bad variable name with singularity import' https://github.com/singularityware/singularity/issues/719 by jokedurnez",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nI'm trying to create a singularity image from a docker container:\n```[jdurnez@sh-101-58]$ singularity import $SINGULARITY docker://joke/cnp_task_analysis\nDocker image path: index.docker.io/joke/cnp_task_analysis:latest\nCache folder set to /home/users/jdurnez/.singularity/docker\n[32/32] |===================================| 100.0%\nImporting: base Singularity environment\n...\nImporting: /home/users/jdurnez/.singularity/metadata/sha256:dbda4988c86376f77fb0ebfc4aadf6f5087acc58bf920df723ea935a197bfd21.tar.gz\n```\n\n*Actual behavior*\n\nIt seems like the singularity container is generated, but when I try to access it:\n```\n[jdurnez@sh-101-58]$ singularity shell $SINGULARITY\nSingularity: Invoking an interactive shell within container...\n\n/.singularity.d/actions/shell: 35: export: /opt/mcr/v85/: bad variable name\n```\n\nHowever, with docker2singularity, it works.\n```[ec2-user@ip-172-31-3-3 CNP_task_analysis]$ docker run -v /var/run/docker.sock:/var/run/docker.sock -v /home/ec2-user/singularity:/output --privileged -t --rm singularityware/docker2singularity joke/cnp_task_analysis\n...\n(9/9) Moving the image to the output folder...\n 11,954,815,008 100%   61.77MB/s    0:03:04 (xfr#1, to-chk=0/1)\n[ec2-user@ip-172-31-3-3 singularity]$ singularity shell joke_cnp_task_analysis-2017-06-03-1246c19080c1.img\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/jokedurnez|jokedurnez>",
                "title": "#719 bad variable name with singularity import",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/719",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496523573.565972",
        "date": 1496523573565
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-306001028|#706: problems with multiple Includes in bootstrap definition>",
                "text": "In order of personnal choice:\n1) a error message if multiple include: are listed (KISS)\n2) +include: to add to the include list? but why would we need that feature? \n3) warning message, using only the 1st include: and ignoring the subsequent one(s)\n4) include: concatenation (avoid delay the possible conflicts to the later process)",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-306001028|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496523519.563409",
        "date": 1496523519563
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305989688|#706: problems with multiple Includes in bootstrap definition>",
                "text": "The nice thing is, if you really want multiple `Include:` lines, you can turn the subsequent `Include:` lines into either `apt-get install` or `yum install` lines, and get exactly the same effect.\n\nAnd similarly, if you want to start with `ubuntu:14.04` and end up at `ubuntu:latest`, you can do that through manipulation of sources files and invocations of `apt-get`.\n\nI did consider pushing for allowing multiple `MirrorURL`, `UpdateURL`, and `GPG` lines, but I decided not to: You can easily do the same thing in the rest of the bootstrap",
                "pretext": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305989688|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496511146.888428",
        "date": 1496511146888
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305989623|#696: busybox replace ash by bash, it's possible ?>",
                "text": "my bad sorry for the confusion, use @vsoch alpine container as:\nalpine.def\n```Bootstrap: docker\nFrom: alpine:latest\n```\n\nthen\n```sudo singularity create alpine.img \nsudo singularity bootstrap alpine.img apline.def\nsudo singularity exec -w alpine.img sh -c 'apk update &amp;&amp; apk upgrade &amp;&amp; apk add bash bash-doc bash-completion ' \n```",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305989623|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496511067.883803",
        "date": 1496511067883
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/704#issuecomment-305984800|#704: SESSIONDIR_PREFIX in 2.3>",
                "text": "I am intersted in knowing more about this change as well.",
                "pretext": "[singularityware/singularity] New comment by AdamSimpson on issue <https://github.com/singularityware/singularity/issues/704#issuecomment-305984800|#704: SESSIONDIR_PREFIX in 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496506430.612893",
        "date": 1496506430612
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305963656|#699: latest release 2.3 FTBS when building deb>",
                "text": "Yes that sounds reasonable then to not perform tests in the builder.",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305963656|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496482056.456282",
        "date": 1496482056456
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305950260|#706: problems with multiple Includes in bootstrap definition>",
                "text": "I don't think we should have multiple include lines - it would be inconsistent with our current approach which has one header per field or section. Being able to define multiple of the same thing is more akin to a Dockerfile, and so to have BOTH in our standard would just be confusing. If the `include: yum bzip2` is a workable solution, we should do that. If we allow for multiple Include: then we should talk about which other tags warrant multiple. Eg:\n\n```Bootstrap: docker\nFrom: ubuntu:latest\nFrom: ubuntu:14.04\n```\n\nI say... don't go there :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305950260|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496464124.739390",
        "date": 1496464124739
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/707#issuecomment-305950232|#707: Error if container directory is setgid>",
                "text": "I am thinking that a reasonable behavior would be just to check if the permissions are at least 755, such that 2755 would still be allowed. Do you concur?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/707#issuecomment-305950232|#707: Error if container directory is setgid>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496464081.737681",
        "date": 1496464081737
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/708|#708 Fix silly minor type in CONTRIBUTING.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/708|#708 Fix silly minor type in CONTRIBUTING.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496463957.732453",
        "date": 1496463957732
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-305950118|#611: Nvidia GPU support with different driver versions?>",
                "text": "Hi @kcgthb,\n\nIs `nvidia-smi` a statically compiled binary? If not, can you run the following commands for me:\n\n```$ ldd `which nvidia-smi`\n$ objdump -T `which nvidia-smi` | grep GLIBC_ | sed -e 's/^.*\\(GLIBC_[^ ]*\\).*$/\\1/' | sort | uniq\n```\n\nMy concern is that mounting a binary as such to the host system breaks portability... But on the other hand, we are doing it with libraries already! If you did a bind of `nvidia-smi` at Singularity runtime does that work? e.g.:\n\n```$ singularity shell -B /usr/bin/nvidia-smi --nv ......\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-305950118|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496463918.730742",
        "date": 1496463918730
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305949624|#706: problems with multiple Includes in bootstrap definition>",
                "text": "I would assume it would work if it was all in a single line, but this should not cause an error condition. The second Include should either be used as one would expect, ignored, or warned. I haven't considered which is the correct behavior for this scenario yet. Does anyone care to voice an opinion or desire?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305949624|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496463158.694147",
        "date": 1496463158694
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-305949493|#714: Singularity not preventing unmounts of mounted image directory>",
                "text": "Does omitting the `--containall` flag change the behavior?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/714#issuecomment-305949493|#714: Singularity not preventing unmounts of mounted image directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496462950.683681",
        "date": 1496462950683
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/715#issuecomment-305949416|#715: ENH: mailmap entries for Vanessa and Rémy>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/715#issuecomment-305949416|#715: ENH: mailmap entries for Vanessa and Rémy>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496462824.677124",
        "date": 1496462824677
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/715|#715 ENH: mailmap entries for Vanessa and Rémy> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/715|#715 ENH: mailmap entries for Vanessa and Rémy> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496462820.676923",
        "date": 1496462820676
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305949286|#713: singularity mpi multinode error>",
                "text": "Hi,\n\n@kma, Singularity should support MPICH and the other MPIs just fine in hybrid mode as long as versions are compatible inside and outside the container. Actually OpenMPI ended up being the hardest to get working properly and is a bit temperamental.\n\n@huitre39, can you check the `/etc/hosts` file from within the container and confirm that there is an appropriate entry for the IP addresses of the hosts in your multi-node job. By default this file should be shared from the host into the container.\n\nHope that helps!\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305949286|#713: singularity mpi multinode error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496462618.667160",
        "date": 1496462618667
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305948995|#705: mount network home directory>",
                "text": "All of the runtime options can also be set via environmant variables. For example, in this case you can export `SINGULARITY_HOME=...` in `~/.singularity-init`.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305948995|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496462122.643056",
        "date": 1496462122643
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305948795|#718: AWESOME JOB!>",
                "text": " is this reminder something that we need to do for every release? If so I can possibly help with this :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305948795|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496461831.629753",
        "date": 1496461831629
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305948392|#705: mount network home directory>",
                "text": "@tamn2017 I don't believe that right now it is possible to specify a config option to provide a custom default home directory. @gmkurtzer is this a config option that we should allow?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305948392|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496461311.605709",
        "date": 1496461311605
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305947892|#718: AWESOME JOB!>",
                "text": "WAHOOOO! Thanks @yarikoptic! BTW, apologies for forgetting (yet again) for forgetting to let you know about the upcoming release. But, at least I did annotate the tag! ;)\n\n&lt;baby steps&gt; lol",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305947892|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496460753.579830",
        "date": 1496460753579
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-305947835|#712: Fix debian package>",
                "text": "Can this PR be resubmitted to the development branch please?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/712#issuecomment-305947835|#712: Fix debian package>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496460674.576153",
        "date": 1496460674576
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305947440|#705: mount network home directory>",
                "text": "... in 15 months? Just kidding :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305947440|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496460163.552068",
        "date": 1496460163552
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305946686|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "ok, for consistency and to maintain status quo I will sacrifice a new `~/.` directory on each user's box.  reverting my change and will upload to (Neuro)Debian(s).  Cheers",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305946686|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496459179.504505",
        "date": 1496459179504
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305938210|#699: latest release 2.3 FTBS when building deb>",
                "text": "I would personally not do the test automatically from the builder (I don't do it in the RPM SPEC). This is because the `make test` command currently calls Singularity from the installed path, and the Singularity internals will fail on many levels as due to the SUID nature of the program (among other things), various paths are hard coded in the binaries. This means that an install to `DESTDIR`, and a test from there, or even the compiled source tree itself, won't work.\n\nDoes that make sense?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305938210|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496450525.002098",
        "date": 1496450525002
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305937660|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Orrrrr, we can use the OSX standard and put it in `~/Librarry/Application\\ Support/Singularity/`. &lt;ducks&gt;\n\nIn all seriousness, I don't have a strong opinion either way on this, and I think it is just as likely that `~/.cache` will also tend to get garbaged up as well, but the benefit is at least the garbage is in a common cesspool of both trash and non-trash.\n\nSince I'm not strongly leaning in either particular direction, and can find benefits and cons to each, I am happy to take consensus.\n\nBut I do feel strongly is that the packaged versions shouldn't do anything that would diverge from standard documented behavior.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305937660|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496450049.967642",
        "date": 1496450049967
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305936848|#705: mount network home directory>",
                "text": "Thanks guys. The associated PR has been merged to the development branch and will thus be available in the next release!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305936848|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496449484.923652",
        "date": 1496449484923
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/711|#711 Allow @ sign to be included in path names> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/711|#711 Allow @ sign to be included in path names> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496449020.885400",
        "date": 1496449020885
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/711#issuecomment-305936079|#711: Allow @ sign to be included in path names>",
                "text": "Looks good to me, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/711#issuecomment-305936079|#711: Allow @ sign to be included in path names>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496449017.885063",
        "date": 1496449017885
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305923116|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "@bbockelm just placed a grave stone on top of not yet conceived awesome singularity X app!!! :-)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305923116|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496442372.084730",
        "date": 1496442372084
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305922882|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "And IMHO even if it were to stay `~/singularity`, cashe should reside under `~/singularity/cache` to avoid conflicts with whatever might come about and help poor souls in their cleansing endeavours ;-) ",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305922882|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496442276.069213",
        "date": 1496442276069
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305906635|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Yeah... pip does:\n`path = os.getenv(\"XDG_CACHE_HOME\", expanduser(\"~/.cache\"))`\n\nIt honestly doesn't surprise me that pip uses it...  Firefox will still use `~/.mozilla`, and I have a bunch of `${HOME}/.[appname]` dirs ... but I'm Slackware, and it's strict however upstream sends it in 90%+ of the cases.",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305906635|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496436830.924433",
        "date": 1496436830924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305903017|#699: latest release 2.3 FTBS when building deb>",
                "text": "thanks @yarikoptic !",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305903017|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496435829.659153",
        "date": 1496435829659
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305902177|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Oh certainly - there is no hard requirements.\n\nBut if this helps singularity be a \"good citizen\" for the larger community - doesn't seem like it would hurt!\n\n(Note - on my personal home directory, nothing in `~/.cache` is actually a graphical application.  It's things like `abrtd` and `pip`)",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305902177|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496435605.598367",
        "date": 1496435605598
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305901721|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "&gt; And well, could be argued that singularity has nothing to do with the desktop apps, \n&gt; so why should it care about XDG ;)\nHonestly... this is my take on it.\n\nSingularity itself isn't an X app, so... why worry about following the \"X Desktop Group\" (freedesktop.org) standard for a non-X app? If some GUI Singularity image manager comes along, then sure, follow the standard it in that application at that point, it's a GUI app then.\n\nBut as @yarikoptic did mention there. Singularity itself doesn't have anything to do with desktop apps at this point, so... =)",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305901721|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496435477.563180",
        "date": 1496435477563
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/710|#710 building erlang fails> by <https://github.com/ityonemo|ityonemo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/710|#710 building erlang fails> by <https://github.com/ityonemo|ityonemo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496434786.371460",
        "date": 1496434786371
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ityonemo on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305899047|#710: building erlang fails>",
                "text": "switching to the current master makes it work!  Thanks.  I didn't notice the change in master",
                "pretext": "[singularityware/singularity] New comment by ityonemo on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305899047|#710: building erlang fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496434742.358955",
        "date": 1496434742358
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305896889|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "re `there are plenty of applications that use a .[name] approach, and don't follow the guidelines`\n\nas far as I see -- there is more that follow \n```$&gt; /bin/ls -l .cache  | nl | tail -n -1\n    97  -rw-r--r-- 1 yoh yoh       11 May 27 19:07 zeitgeist-vacuum.stamp\n```\nand those which don't are most of the time either small projects not aware of XDG or elderlies which did it for decades already and find it hard to switch ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305896889|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496434123.185034",
        "date": 1496434123185
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305895468|#718: AWESOME JOB!>",
                "text": "I think I want to leave this open just a little longer, to feel the warm sunshine from all those :+1: ! I'll add in some snacks:\n\n:taco: :taco: :ice_cream: :ice_cream: :shallow_pan_of_food: :shallow_pan_of_food: :cookie: :cookie: :ramen: :ramen: :rice: :rice: :rice_ball: :rice_ball: :rice_cracker: :rice_cracker: :candy: :candy: :milk_glass: :milk_glass: :cake: :cake: :fish_cake: :fish_cake: :hamburger: :hamburger: :avocado: :avocado: :avocado: :avocado: :avocado: :avocado: :avocado: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/718#issuecomment-305895468|#718: AWESOME JOB!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496433735.073100",
        "date": 1496433735073
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305894805|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "ok -- I will wait for @gmkurtzer feedback as well before I upload or unpatch debian package",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305894805|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496433556.017236",
        "date": 1496433556017
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#718 AWESOME JOB!' https://github.com/singularityware/singularity/issues/718 by yarikoptic",
                "text": "was about to whine a lot while by mistake trying to use apparently an outdated devel build... so many fixes got into 2.3 -- just great! thank you everyone, please close at your will\n\n:+1: \n:+1: \n:+1: \n:+1: \n:+1: ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#718 AWESOME JOB!",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/718",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496432699.769827",
        "date": 1496432699769
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/717|#717 I did it! I got here!> by <https://github.com/yarikoptic|yarikoptic>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/717|#717 I did it! I got here!> by <https://github.com/yarikoptic|yarikoptic>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496432399.686369",
        "date": 1496432399686
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305890548|#717: I did it! I got here!>",
                "text": "ok -- it is sensible actually! sorry for the noise!\n```hopa:/tmp\n$&gt; singularity pull neurodebian\nERROR: pull is only supported for docker and shub URIs\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305890548|#717: I did it! I got here!>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496432398.686319",
        "date": 1496432398686
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305890116|#717: I did it! I got here!>",
                "text": "oh oh oh \nno\n```$&gt; which singularity        \n/usr/local/bin/singularity\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305890116|#717: I did it! I got here!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496432271.651165",
        "date": 1496432271651
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305888650|#717: I did it! I got here!>",
                "text": "version glitch is interesting... I fetched tarball from github earlier today ... may be release tag was \"updated\" interim or smth",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/717#issuecomment-305888650|#717: I did it! I got here!>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431851.528391",
        "date": 1496431851528
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305888501|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "someone's future is often our (developers) past! ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305888501|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431811.516041",
        "date": 1496431811516
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305888425|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "I think we could, but I also think that there are plenty of applications that use a `.[name]` approach, and don't follow the guidelines.  I'll leave it up to @gmkurtzer to decide if this is big enough to warrant changing the entire storage scheme. I sort of like that you can intuitively find `.singularity` and `.singularity.d` is similar in the image. What we can do better is tell users how it works, so they can find the cache, and for that <http://singularity.lbl.gov/user-control|your wish is granted> :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305888425|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431794.510571",
        "date": 1496431794510
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#717 I did it! I got here!' https://github.com/singularityware/singularity/issues/717 by yarikoptic",
                "text": "*Version of Singularity:*\n\n2.3-1 (perspective debian build)\n(although btw singularity since claims 2.2.99 -- I guess a loose release tail)\n\n*Expected behavior*\n\ndo something useful (like fetch an image) or give me some reasonable error message\n\n*Actual behavior*\n\n```shell\n$&gt; singularity pull neurodebian\nERROR: Beep boop, we should never get here!\n\n$&gt; singularity --version       \n2.2.99\n```\n\n*Steps to reproduce behavior*\n\nSee above",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#717 I did it! I got here!",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/717",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431302.367372",
        "date": 1496431302367
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305886427|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Seems like a solid idea to follow the XDG guidelines, but also sounds like it's perhaps a feature improvement for the next release?",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305886427|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431283.361916",
        "date": 1496431283361
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885851|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "BTW -- one of the rationales behind having all caches under ~/.cache (besides minimizing pollution of $HOME) is that if I am short of space I could just `rm -rf ~/.cache/*` in a moment of need.  Hunting around $HOME for caches for app X and then Y and then... could be a bit tedious even using cool `ncdu` ;)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885851|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496431121.314678",
        "date": 1496431121314
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885393|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "according to the code `SINGULARITY_DISABLE_CACHE` doesn't really \"disable it\" -- it still creates/uses?  some temporary directory as far as I see from the code:\n\n```shell\nif DISABLE_CACHE == True:\n    SINGULARITY_CACHE = tempfile.mkdtemp()\nelse:\n    userhome = pwd.getpwuid(os.getuid())[5]\n    _cache = os.path.join(userhome,\".singularity\") \n    SINGULARITY_CACHE = getenv(\"SINGULARITY_CACHEDIR\", default=_cache)\n\nif not os.path.exists(SINGULARITY_CACHE):\n    os.mkdir(SINGULARITY_CACHE)\n```",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885393|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496430991.277456",
        "date": 1496430991277
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885027|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": ";-) not that dumb one, since I just took it for granted and forgot details (I also hate having a blooming number of hidden directories and files in my home)... \nAnd well, could be argued that singularity has nothing to do with the desktop apps, so why should it care about XDG ;) \n<https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html>  More info on Debian point of view on it:\n<https://wiki.debian.org/XDGBaseDirectorySpecification>  which encourages upstreams to conform it but actually suggests maintainers to not patch... oh well -- I have just committed the \"crime\" -- I did patch singularity debian package to use `~/.cache/singularity` :-/ ;-)",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885027|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496430897.248954",
        "date": 1496430897248
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885018|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "what do you mean canonical?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305885018|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496430889.246780",
        "date": 1496430889246
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305884954|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "If you don't want the cache to be created (and tmp will be used), set `SINGULARITY_DISABLE_CACHE` to True/yes, or if you want to move it elsewhere, set `SINGULARITY_CACHEDIR`. The hierarchy is always the following, by default:\n\n```$HOME/.singularity\n$HOME/.singularity/docker\n$HOME/.singularity/shub\n$HOME/.singularity/metadata\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305884954|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496430869.240930",
        "date": 1496430869240
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305882726|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "text": "Dumb question - what makes `~/.cache` canonical?  Not necessarily opposed, I just see pure chaos in my personal home directory and would like to have some, well, canonical written document to point folks at when questions are asked.",
                "pretext": "[singularityware/singularity] New comment by bbockelm on issue <https://github.com/singularityware/singularity/issues/716#issuecomment-305882726|#716: do not breed ~/.singularity but adhere to standard hierarchy>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496430278.061846",
        "date": 1496430278061
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#716 do not breed ~/.singularity but adhere to standard hierarchy' https://github.com/singularityware/singularity/issues/716 by yarikoptic",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nnot create `~/.singularity`\n\nshould use appropriate and canonically located directory under `~/.cache`\n\n```$&gt; python -c 'from appdirs import AppDirs; dirs = AppDirs(\"singularity\", \"singularityware.org\"); print(dirs.user_cache_dir)'   \n/home/yoh/.cache/singularity\n```\n\n*Actual behavior*\n\ncreates (tries at least ;-) ) to create `~/.singularity` even for root\n\n*Steps to reproduce behavior*\n\nSee #699 ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#716 do not breed ~/.singularity but adhere to standard hierarchy",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/716",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496429954.953738",
        "date": 1496429954953
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kma on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305880331|#713: singularity mpi multinode error>",
                "text": "Hi,\n\nI guess this is mpich implementation of MPI. I think singularity supports only OpenMPI 2.1.x version.  ",
                "pretext": "[singularityware/singularity] New comment by kma on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305880331|#713: singularity mpi multinode error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496429671.862093",
        "date": 1496429671862
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305878676|#699: latest release 2.3 FTBS when building deb>",
                "text": "ah -- great to see activity/contributions in updating debian packaging!  note that \"official\" packaging repository was setup separately from the \"upstream\" (this) repository to facilitate contributions/maintenance by other debian developers/maintainers.   I just ran into this CACHE mkdir behavior (imho nothing should mkdir while purely importing a module), and indeed running tests should be disabled since they require full sudo access, and package should build fine through fakeroot as well.  I hope to push out new package within few hours",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305878676|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496429256.728237",
        "date": 1496429256728
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/702#issuecomment-305877581|#702: Old version on debian package>",
                "text": "well -- I am maintaining debian packaging \"outside\" of this repo... \n<http://git.debian.org/?p=collab-maint/singularity-container.git>  is the repo... and 2.3-1 is about to come out (yet to resolve few leftovers ;) )",
                "pretext": "[singularityware/singularity] New comment by yarikoptic on issue <https://github.com/singularityware/singularity/issues/702#issuecomment-305877581|#702: Old version on debian package>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496429025.652098",
        "date": 1496429025652
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ityonemo on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305851206|#710: building erlang fails>",
                "text": "the license statement is a holdover from the .def file I cloned to make this, I am not sure that it will make a difference, but I will try to do the same without the license section.",
                "pretext": "[singularityware/singularity] New comment by ityonemo on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305851206|#710: building erlang fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496422681.531224",
        "date": 1496422681531
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#715 ENH: mailmap entries for Vanessa and Rémy' https://github.com/singularityware/singularity/pull/715 by yarikoptic",
                "text": "Just added their multiple \"identities\" for a nicer \"git shortlog -sn\" ;)\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/yarikoptic|yarikoptic>",
                "title": "#715 ENH: mailmap entries for Vanessa and Rémy",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/715",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496422562.491290",
        "date": 1496422562491
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#714 Singularity not preventing unmounts of mounted image directory' https://github.com/singularityware/singularity/issues/714 by DrDaveD",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nIf the image that singularity runs is a directory, I expect to not be able to unmount the filesystem that the directory is in while singularity is running (without some kind of forcing option)\n\n*Actual behavior*\n\nSingularity does not hold any references to the filesystem, so the filesystem can be unmounted.  The only references are inside the container, and at least on el7.3 that is not enough to be noticed outside the container.  I had reported this earlier in pr #626, but when I tested the development branch at the time there was a file descriptor left open, but now in the singularity-2.3 release the behavior is back the way it was in singularity-2.2.1.\n\n*Steps to reproduce behavior*\n\nOn EL7.3, assuming an existing singularity image file I call 'centos7.img', make a loopback filesystem, mount it, and use it:\n```dd if=/dev/zero of=centos7.ext3 bs=1G count=1\nsudo losetup /dev/loop0 centos7.ext3\nsudo mkfs -t ext3 -m 1 -v /dev/loop0\nsudo mkdir -p /mnt/loop0\nsudo mount /dev/loop0 /mnt/loop0\nsingularity export centos7.img | (cd /mnt/loop0 &amp;&amp; sudo tar xf -)\nsingularity exec --containall /mnt/loop0 bash\n```\nThen in another window while singularity is running, umount /mnt/loop0.\n\nIt can be worked around by first doing 'cd /mnt/loop0' before running singularity exec (or inside singularity), or by having singularity open a file descriptor to the image directory and leaving it open.\n\nThis example of course is for reproducing, but in reality we experience the problem with automounted cvmfs; the automounter doesn't realize the filesystem is still in use, and unmounts it.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DrDaveD|DrDaveD>",
                "title": "#714 Singularity not preventing unmounts of mounted image directory",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/714",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496418940.275290",
        "date": 1496418940275
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305825541|#699: latest release 2.3 FTBS when building deb>",
                "text": "in short:\n• uncomment the ```override_dh_auto_test``` in ```debian\\rules```\n• try to rebuild the package with ```pbuilder```\n• in the chrooted pbuilder environment change the path to ```singularity``` and ```etc``` directory in ```test.sh```\n• run ```make test.sh```",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305825541|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496418218.011311",
        "date": 1496418218011
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305824563|#699: latest release 2.3 FTBS when building deb>",
                "text": "In debian/rules you just have to comment out the only ```override_dh_auto_test```.\nIf you try to build the package with pbuilder, first create a pbuilder image (see <https://wiki.ubuntu.com/PbuilderHowto#Troubleshooting_.22pbuilder_create.22|this guide> if you are not familiar with that) in my case I use Debian/stretch.\n\nThen you can simply generate the package with ```DIST=stretch pdebuild```\nIt actually try to build the package in a chroot env.\n\nAt this point the package will FTBS when running the test  (in ```make -j1 test``` actually)\n\nTo understand what was going wrong I patched test.sh:\n```\n\n*Index: singularity-container-2.3/test.sh.in*\n\n--- singularity-container-2.3.orig/test.sh.in\n+++ singularity-container-2.3/test.sh.in\n@@ -22,11 +22,11 @@\n # \n\n-prefix=\"@prefix@\"\n+prefix=\"${destdir}/@prefix@\"\n exec_prefix=\"@exec_prefix@\"\n libexecdir=\"@libexecdir@\"\n-sysconfdir=\"@sysconfdir@\"\n-localstatedir=\"@localstatedir@\"\n+sysconfdir=\"${destdir}/@sysconfdir@\"\n+localstatedir=\"${destdir}/@localstatedir@\"\n bindir=\"@bindir@\"\n\n SINGULARITY_OVERLAY_FS=\"@OVERLAY_FS@\"\n@@ -41,12 +41,14 @@ export SINGULARITY_libexecdir SINGULARIT\n\n-if [ -z \"$CLEAN_SHELL\" ]; then\n• /bin/echo \"Building/Installing Singularity to temporary directory\"\n• /bin/echo \"Reinvoking in a clean shell\"\n• sleep 1\n• exec env -i CLEAN_SHELL=1 PATH=\"$SINGULARITY_PATH:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin\" bash \"$0\" \"$@\"\n     -fi\n     +# if [ -z \"$CLEAN_SHELL\" ]; then\n     +#     /bin/echo \"Building/Installing Singularity to temporary directory\"\n     +#     /bin/echo \"Reinvoking in a clean shell\"\n     +#     sleep 1\n     +#     exec env -i CLEAN_SHELL=1 PATH=\"$SINGULARITY_PATH:/bin:/usr/bin:/sbin:/usr/sbin:/usr/local/bin:/usr/local/sbin\" bash \"$0\" \"$@\"\n     +# fi\n• +export PATH=$SINGULARITY_PATH:$PATH\n\n     if [ ! -f \"autogen.sh\" ]; then\n      /bin/echo \"ERROR: Run this from the singularity source root\"\n     ```\n\nand still in the chroot env I relaunch ```destdir=$(PWD)/Debian/singularity-conainer make test```\n\nTried to be clear but may be it's not...\nTell me if you need more details",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305824563|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496418014.936893",
        "date": 1496418014936
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305820626|#699: latest release 2.3 FTBS when building deb>",
                "text": "could you tell me the steps for how to reproduce this (eg using the debian install?) it looks like it works ok on circle (tests pass) so if I can debug it locally I can see why the return code is 1 (indicating error) and not 0.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305820626|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496417184.625380",
        "date": 1496417184625
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305819671|#699: latest release 2.3 FTBS when building deb>",
                "text": "```\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /root/.singularity\nVERBOSE2 SINGULARITY_ENVIRONMENT found as None/.singularity.d/environment\nVERBOSE2 SINGULARITY_RUNSCRIPT found as None/singularity\nVERBOSE2 SINGULARITY_TESTFILE found as None/.singularity.d/test\nVERBOSE2 SINGULARITY_DEFFILE found as None/.singularity.d/Singularity\nVERBOSE2 SINGULARITY_ENVBASE found as None/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as None/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /build/singularity-container-2.3/libexec/python\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as None/.singularity.d/.layers\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\n\n*FF*\n\nFAIL: test_docker_size (tests.test_helpers.TestJson)\n\n*test the function to return Docker size*\n\nTraceback (most recent call last):\n  File \"tests/test_helpers.py\", line 77, in test_docker_size\n    self.assertEqual(result['return_code'],0)\nAssertionError: 1 != 0\n\n======================================================================\nFAIL: test_shub_size (tests.test_helpers.TestJson)\n\n*test the function to return Singularity Hub Image Size*\n\nTraceback (most recent call last):\n  File \"tests/test_helpers.py\", line 101, in test_shub_size\n    self.assertEqual(result['return_code'],0)\nAssertionError: 1 != 0\n\n-------------------------\n\nRan 2 tests in 0.713s\n\n```",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305819671|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496416978.549306",
        "date": 1496416978549
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305816027|#713: singularity mpi multinode error>",
                "text": "hey @huitre39 are you able to try this with 2.3?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/713#issuecomment-305816027|#713: singularity mpi multinode error>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496416194.254992",
        "date": 1496416194254
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305815408|#699: latest release 2.3 FTBS when building deb>",
                "text": "what is the full output for the test error?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305815408|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496416056.203105",
        "date": 1496416056203
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#713 singularity mpi multinode error' https://github.com/singularityware/singularity/issues/713 by huitre39",
                "text": "*Version of Singularity:*\n\n2.2.1\n\n*Expected behavior*\n\nRun my program without error\n\n*Actual behavior*\n\nHost of my machine is not found, if i run mpirun in singularity image. Without it's work\n\n*Steps to reproduce behavior*\n\nmpirun -np 20 -v singularity exec --writable /root/singularity/myimage.img /root/app/myprogram\n\nFatal error in MPI_Init: Other MPI error, error stack:\nMPIR_Init_thread(805)...................: fail failed\nMPID_Init(1831).........................: channel initialization failed\nMPIDI_CH3_Init(147).....................: fail failed\nMPID_nem_tcp_post_init(645).............: fail failed\nMPID_nem_tcp_connect(1122)..............: fail failed\nMPID_nem_tcp_get_addr_port_from_bc(1346): Missing ifname or invalid host/port description in business card\n\nif i run mpirun (or mpiexec) in my contenair i have this error, without singularity :\nmpirun -np 20 -v /root/app/myprogram\n\nit's work perfectly in my cluster.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/huitre39|huitre39>",
                "title": "#713 singularity mpi multinode error",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/713",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496405052.787875",
        "date": 1496405052787
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#712 Fix debian package' https://github.com/singularityware/singularity/pull/712 by Trophime",
                "text": "*Description of the Pull Request (PR):*\n\nUpdate debian files for 2.3 release\nThe test still cannot be performed when building the package\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #699\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [ ] I have tested this PR locally with a `make test`\n• [ ] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/Trophime|Trophime>",
                "title": "#712 Fix debian package",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/712",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496394993.800881",
        "date": 1496394993800
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305715496|#699: latest release 2.3 FTBS when building deb>",
                "text": "I tried to follow my idea of changing paths in ```test.sh```\nNow I get:\n```\nsh ./test.sh\nBuilding/Installing Singularity to temporary directory\nReinvoking in a clean shell\n\n################################################################################\nChecking environment (script: 01-sanity.sh, testdir: /tmp/stest.yeDeki)\n\n• sudo true                                                                                     (retval=0) OK\n• sudo false                                                                                    (retval=1) OK\n• which singularity                                                                             (retval=0) OK\n• test -f /tmp/buildd/singularity-container-2.3/debian/singularity-container/etc/singularity    (retval=0) OK\n\n################################################################################\nRunning Flawfinder (script: 02-flawfinder.sh, testdir: /tmp/stest.pv8HaV)\n\n• which flawfinder                                                                              (retval=0) OK\n• sh -c flawfinder -SQ --minlevel=3 ../src &gt; '/tmp/stest.pv8HaV/ff.out'                         (retval=0) OK\n\n################################################################################\nChecking Python unit tests (script: 05-python-units.sh, testdir: /tmp/stest.xOk31f)\n\n• python2 -m unittest tests.test_json                                                           (retval=0) OK\n• python2 -m unittest tests.test_helpers                                                        (retval=1) ERROR\n     VERBOSE2 SINGULARITY_COMMAND_ASIS found as False\n     VERBOSE2 SINGULARITY_ROOTFS not defined (None)\n     VERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\n     VERBOSE2 SINGULARITY_FIX_PERMS found as False\n     VERBOSE2 SINGULARITY_COLORIZE not defined (None)\n     VERBOSE2 SINGULARITY_DISABLE_CACHE found as False\n     VERBOSE2 SINGULARITY_CACHEDIR found as /root/.singularity\n     VERBOSE2 SINGULARITY_ENVIRONMENT found as None/.singularity.d/environment\n     VERBOSE2 SINGULARITY_RUNSCRIPT found as None/singularity\n     VERBOSE2 SINGULARITY_TESTFILE found as None/.singularity.d/test\n     VERBOSE2 SINGULARITY_DEFFILE found as None/.singularity.d/Singularity\n     VERBOSE2 SINGULARITY_ENVBASE found as None/.singularity.d/env\n     VERBOSE2 SINGULARITY_LABELFILE found as None/.singularity.d/labels.json\n     VERBOSE2 SINGULARITY_INCLUDECMD found as False\n     VERBOSE2 SINGULARITY_PULLFOLDER found as /build/singularity-container-2.3/libexec/python\n     VERBOSE2 SHUB_NAMEBYHASH not defined (None)\n     VERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\n     VERBOSE2 SHUB_CONTAINERNAME not defined (None)\n     VERBOSE2 SINGULARITY_CONTENTS found as None/.singularity.d/.layers\n     VERBOSE2 SINGULARITY_PYTHREADS found as 9\n\n*FF*\n\nFAIL: test_docker_size (tests.test_helpers.TestJson)\n\n*test the function to return Docker size*\n\nTraceback (most recent call last):\n  File \"tests/test_helpers.py\", line 77, in test_docker_size\n    self.assertEqual(result['return_code'],0)\nAssertionError: 1 != 0\n\n======================================================================\nFAIL: test_shub_size (tests.test_helpers.TestJson)\n\n*test the function to return Singularity Hub Image Size*\n\nTraceback (most recent call last):\n  File \"tests/test_helpers.py\", line 101, in test_shub_size\n    self.assertEqual(result['return_code'],0)\nAssertionError: 1 != 0\n\n-------------------------\n\nRan 2 tests in 1.150s\n\nFAILED (failures=2)\n*** PYTHON VERSION 2 UTIL HELPERS TESTING START ***\n\n---START----------------------------------------\nTesting Docker Size\nSINGULARITY_CACHE=/root/.singularity\n---END------------------------------------------\n\n---START----------------------------------------\nTesting Singularity Hub Size\n---END------------------------------------------\nFull output in: /tmp/stest.xOk31f\nERROR: Failed running test: 05-python-units.sh\nMakefile:828: recipe for target 'test' failed\nmake: *** [test] Error 1\n```",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305715496|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496389681.626696",
        "date": 1496389681626
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305708267|#699: latest release 2.3 FTBS when building deb>",
                "text": "ahh sorry now I'm looking farther back in time at the original error message - in terms of disabling the tests I think that could definitely work. What we could do to address this:\n\n```VERBOSE2 SINGULARITY_CACHEDIR found as /nonexistent/.singularity\nTraceback (most recent call last):\n  File \"./configure_transform.py\", line 30, in &lt;module&gt;\n    from sutils import (\n  File \"../libexec/python/sutils.py\", line 25, in &lt;module&gt;\n    from defaults import (\n  File \"../libexec/python/defaults.py\", line 110, in &lt;module&gt;\n    os.mkdir(SINGULARITY_CACHE)\nOSError: [Errno 2] No such file or directory: '/nonexistent/.singularity'\n```\nis to simply have some other flag to indicate that the import from defaults is doing some kind of test (and thus not try to create the cache. If you set `SINGULARITY_DISABLE_CACHE` to True then it will set it to be tmp, but again we still wouldn't want any directory to be created. Let's ask @gmkurtzer if we can just disable this entirely, I'm not sure.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305708267|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496387441.220594",
        "date": 1496387441220
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305707177|#699: latest release 2.3 FTBS when building deb>",
                "text": "Here is the exact error you get when building debian package:\n```dh_auto_test\n    make -j1 test VERBOSE=1\nmake[2]: Entering directory '/build/singularity-container-2.3'\nsh ./test.sh\nBuilding/Installing Singularity to temporary directory\nReinvoking in a clean shell\nERROR: Could not locate singularity program at: /usr/bin/singularity\nMakefile:828: recipe for target 'test' failed\n```\n\nA quick work-around could be the change the ```PATH``` in ```test.sh.in```\nif there is no \"side effects\" on the \"installed\" singularity",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305707177|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496387058.158017",
        "date": 1496387058158
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305702875|#699: latest release 2.3 FTBS when building deb>",
                "text": "That's not what I was talking about.\nI meant in debian now when you building a package it tries to run some tests.\n\nIn the case of singularity it tries to run: ```sh ./test.sh``` (```test.sh``` is created from ```test.sh.in``` during the build step ```make```) .\n\nHope I was more clear",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305702875|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496385477.920307",
        "date": 1496385477920
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305700691|#699: latest release 2.3 FTBS when building deb>",
                "text": "See <http://singularity.lbl.gov/bootstrap-image#test>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305700691|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496384666.812481",
        "date": 1496384666812
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305700594|#699: latest release 2.3 FTBS when building deb>",
                "text": "Yes, if you write a %test section in your bootstrap spec you can run some tests during the build. Is this what you are looking to do?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305700594|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496384627.807627",
        "date": 1496384627807
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305699336|#699: latest release 2.3 FTBS when building deb>",
                "text": "Yes I can but I still have trouble.\nI need to export ```SINGULARITY_CACHEDIR=$(PKGDIR)/var/singularity/cache``` in ```debian/rules``` and comment out the tests which are now run automatically when building the package. \nThe tests fail because the script is not able to find ```singularity``` in the path (defined in the script) which only looks for the \"usual\" directories and not in the \"prefixed\" directory (I mean sometihng like ``../debian/singularity-container/usr/bin``` and so on) \n\nWould there be a way to run the tests during the building of the package?",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305699336|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496384112.742480",
        "date": 1496384112742
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305691717|#706: problems with multiple Includes in bootstrap definition>",
                "text": "@akkornel your a debian/rhel/yum/all-the-linux-things badass!! :D",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305691717|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496380552.354405",
        "date": 1496380552354
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677681|#659: Using development branch on Singularity Hub>",
                "text": "Yes it is!! =) ",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677681|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496373027.573275",
        "date": 1496373027573
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677606|#659: Using development branch on Singularity Hub>",
                "text": "Thanks! And hey, we got that \"overly long string\" issue fixed! That's progress, if you ask me, haha.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677606|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496372996.569916",
        "date": 1496372996569
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/659|#659 Using development branch on Singularity Hub> by <https://github.com/belledon|belledon>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/659|#659 Using development branch on Singularity Hub> by <https://github.com/belledon|belledon>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496372917.562109",
        "date": 1496372917562
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677443|#659: Using development branch on Singularity Hub>",
                "text": "Will do! ",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677443|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496372916.562093",
        "date": 1496372916562
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677206|#659: Using development branch on Singularity Hub>",
                "text": "would you mind closing the issue here, and opening again with the error above on the singularityhub issues board? <https://github.com/singularityhub/singularityhub.github.io/issues> This is actually an issue with singularity-python, but used via the hub :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677206|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496372816.551053",
        "date": 1496372816551
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677067|#659: Using development branch on Singularity Hub>",
                "text": "ah interesting, I know the reason for this. The old method created a tar in a sort of hacky way, and this new way is more elegant (it does it in memory) but it looks to be not a good solution given that your container is massive. I unfortunately won't have a quick solution for this soon, but let me poke around and see what I can do. I think this would be a good one for me to test manually, but probably tomorrow. Sorry for the delay - just too much to do!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305677067|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496372749.543787",
        "date": 1496372749543
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305674888|#659: Using development branch on Singularity Hub>",
                "text": "I think it makes sense from a backend  point of view. \n\nUnfortunately I ran into this error. \n\n```Running test scriptlet\nFinalizing Singularity container\n/tmp/tmpw95c4ays/image\nDEBUG:shub_builder:Built image: /tmp/tmpw95c4ays/b340d5cb482e863b562e3999a975c4c5\nINFO:shub_builder:Final time of build 195 seconds.\nINFO:shub_builder:Singularity 2.3-master.gf737013 being used.\nTraceback (most recent call last):\nFile \"\", line 1, in \nFile \"/usr/local/lib/python3.5/dist-packages/singularity/build/google.py\", line 245, in run_build\nparams=params)\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/build/main.py\", line 191, in run_build\nold_version=old_version)\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/package.py\", line 160, in package\nfile_obj,tar = get_memory_tar(image_path)\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/reproduce.py\", line 513, in get_memory_tar\nbyte_array = cli.export(image_path)\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/cli.py\", line 220, in export\noutput = self.run_command(cmd,sudo=sudo)\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/cli.py\", line 81, in run_command\noutput = run_command(cmd,suppress=suppress) # suppress doesn't make difference here\nFile \"/usr/local/lib/python3.5/dist-packages/singularity/utils.py\", line 113, in run_command\noutput, err = process.communicate()\nFile \"/usr/lib/python3.5/subprocess.py\", line 1072, in communicate\nstdout, stderr = self._communicate(input, endtime, timeout)\nFile \"/usr/lib/python3.5/subprocess.py\", line 1745, in _communicate\nstdout = b''.join(stdout)\nMemoryError\n```\n\nID is 1056",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305674888|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496371686.423712",
        "date": 1496371686423
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305671298|#659: Using development branch on Singularity Hub>",
                "text": "I haven't added any sort of \"push to rebuild\" button because I want each one to be associated with a unique commit - so for now your only option is to make a trivial change and commit again. I realize this is silly, so I'm definitely thinking about a reasonable solution. It would mean cleaning up the first (and not messing that up) so I need to think it over.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305671298|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496370004.231699",
        "date": 1496370004231
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305670632|#659: Using development branch on Singularity Hub>",
                "text": "Hey @vsoch ,\n\nThanks for the response! I ran into a memory error but that was my bad. Quick question, is there anyway to tell the build to remake a branch? I've been just commiting some null change on the def file each time. ",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305670632|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496369685.194389",
        "date": 1496369685194
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305667389|#659: Using development branch on Singularity Hub>",
                "image_url": "https://cloud.githubusercontent.com/assets/814322/26707652/4f695bac-4714-11e7-8bcf-ff3d4fe073d8.png",
                "image_width": 1360,
                "image_height": 439,
                "image_bytes": 39432,
                "text": "hey @belledon ! The builders are now updated. It looks like your collection builder is still set to singularity 2.2.1:\n\n```&gt; &gt; &gt; builder.spec\n&gt; &gt; &gt; { 'builder_name': 'singularity-builder-2-2-1-50gb',\n&gt; &gt; &gt;   'bucket_name': 'singularity-hub-regional',\n&gt; &gt; &gt;   'environment': 'gce'}\n&gt; &gt; &gt; ```\n&gt; &gt; &gt; I am hesitant about changing user preferences for builders, but you can do this on your own by clicking on the EDIT BUILDER button in your collection:\n```![image](https://cloud.githubusercontent.com/assets/814322/26707615/13a3e4ac-4714-11e7-9c83-fe41378c7eba.png)\n```\nand then selecting the 2-3-50gb builder:\n\n<https://cloud.githubusercontent.com/assets/814322/26707652/4f695bac-4714-11e7-8bcf-ff3d4fe073d8.png|image>\n\nActually, I probably need to make very clear instructions to do this - people will assume (with older collections, that is) that it would be changed automatically (and it's not). Do you want to test changing it, and then push again to redo the build? There were bugs in the builders and I had to just redo them, so it will be a good test. We can close the issue only after confirming the entire process goes smoothly (without the overly long string error!) And I will get on making the \"how to change your builder\" docs asap!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305667389|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496368294.022949",
        "date": 1496368294022
    },
    {
        "user": "eduardoarango",
        "text": "<@U3E99RUG1|eduardoarango> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1496368208.011637",
        "date": 1496368208011
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305666126|#710: building erlang fails>",
                "text": "Also note that files are copied after %post, so if you want to add them before %post you need to do that in %setup, eg:\n\n```%setup \ncp /path/on/host/LICENSE $SINGULARITY_ROOTFS/LICENSE\n```\nThis uses the copy (cp) command, so the same wild cards / `man cp` rules apply.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305666126|#710: building erlang fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496367732.953772",
        "date": 1496367732953
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305666010|#710: building erlang fails>",
                "text": "hey @ityonemo do you get this error with the current master (which is now the old development?) I notice in your gist that there is a reference to do something with a /LICENSE, but do you put that file there? You would need a %files section with something like\n\n```%files\n/path/on/host/LICENSE /LICENSE\n```\nbut it looks like you are removing it, so maybe you do not :) \n\nI would guess mot of your issues revolve around not putting files in the image that you think are there - could you \n\n• test this with files correctly added,\n• use the current master\n• include the entire build spec in the gist?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/710#issuecomment-305666010|#710: building erlang fails>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496367672.946522",
        "date": 1496367672946
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#711 Allow @ sign to be included in path names' https://github.com/singularityware/singularity/pull/711 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\n\nAllow `@` to be included in path names via calls to `envar_path()`. As long as @gmkurtzer doesn't see any reason to exclude the `@` symbol from path names this is safe to merge.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #705 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin ",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#711 Allow @ sign to be included in path names",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/711",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496366101.754898",
        "date": 1496366101754
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/709|#709 Allow @ sign to be included in path names> by <https://github.com/bauerm97|bauerm97>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/709|#709 Allow @ sign to be included in path names> by <https://github.com/bauerm97|bauerm97>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496365871.726824",
        "date": 1496365871726
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#710 building erlang fails' https://github.com/singularityware/singularity/issues/710 by ityonemo",
                "text": "*Version of Singularity:*\n\n2.2.99 (development branch)\n\n*Expected behavior*\n\nErlang should build.  Works fine if you comment out the make command and execute make when in shell --writable\n\n*Actual behavior*\n\nThere seems to be a failure where it fails to identify the build directory, makefile errors out, and terminates the build process.\n\n*Steps to reproduce behavior*\n\ndef file:\n<https://gist.github.com/ityonemo/2b50d3297e499f16ef5e9cdfd7e75386>\n\ncd /var/buildzone/otp\nmake \n\nBuilds correctly.\n\nuncomment the make command, and it fails.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ityonemo|ityonemo>",
                "title": "#710 building erlang fails",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/710",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496365150.631621",
        "date": 1496365150631
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305659701|#705: mount network home directory>",
                "text": "@bauerm97 Assume @ is fixed to be included in path names, how do I update singularity.conf so I don't have to run \" -C -H /home-4/userxyz@test.edu ..\" every time?\n\nThanks\nTam",
                "pretext": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305659701|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496364817.589927",
        "date": 1496364817589
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#709 Allow @ sign to be included in path names' https://github.com/singularityware/singularity/pull/709 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\n\nAllow `@` to be included in path names via calls to `envar_path()`. As long as @gmkurtzer doesn't see any reason to exclude the `@` symbol from path names this is safe to merge.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #705 \n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#709 Allow @ sign to be included in path names",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/709",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496364438.542614",
        "date": 1496364438542
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305657674|#705: mount network home directory>",
                "text": "@tamn2017 so it appears that `@` is not currently an allowed character in path names as determined by the call to `envar_path()` (which in turn calls `envar_get()`). @gmkurtzer is there any reason not to include `@` in `envar_path()`'s call to `envar_get()`?\n\nThe new code would be:\n\n`\nchar *envar_path(char *name) {\n    singularity_message(DEBUG, \"Checking environment variable is valid path: '%s'\\n\", name);\n    return(envar_get(name, \"/._+-=,:@\", PATH_MAX));\n}\n`",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305657674|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496363869.472932",
        "date": 1496363869472
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305656410|#705: mount network home directory>",
                "text": "Hi Michael,\nthank you for looking into this.  Below is my debug output. \n\n-Tam\n\nEnabling debugging\nEnding argument loop\nSingularity version: 2.3-master.gadf5259\nExec'ing: /cm/shared/apps/singularity/libexec/singularity/cli/shell.exec\nEvaluating args: '-C -H /home-4/userxyz@test.edu contain1.img'\nVERBOSE [U=0,P=122534]     message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Initialize configuration file: /cm/shared/apps/singularity/etc/singularity/singularity.conf\nDEBUG   [U=0,P=122534]     singularity_config_parse()                Starting parse of configuration file /cm/shared/apps/singularity/etc/singularity/singularity.conf\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key max loop devices = '256'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key allow pid ns = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key config passwd = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount home = 'no'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key bind path = '/etc/localtime'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key enable overlay = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=122534]     singularity_config_parse()                Got config key sessiondir max size = '16'\nDEBUG   [U=0,P=122534]     singularity_config_parse()                Finished parsing configuration file '/cm/shared/apps/singularity/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=122534]     singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'CONTAIN' = '1'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(CONTAIN, 1) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/cm/shared/apps/singularity/libexec'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(libexecdir, /cm/shared/apps/singularity/libexec) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'COMMAND' = 'shell'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(COMMAND, shell) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'MESSAGELEVEL' = '5'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(MESSAGELEVEL, 5) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'VERSION' = '2.3-master.gadf5259'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(version, 2.3-master.gadf5259) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'LOCALSTATEDIR' = '/cm/shared/apps/singularity/var'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(localstatedir, /cm/shared/apps/singularity/var) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'HOME' = '/home-4/userxyz@test.edu'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(HOME, /home-4/userxyz@test.edu) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'CLEANENV' = '1'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(CLEANENV, 1) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'DIR' = '/cm/shared/apps/singularity'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(DIR, /cm/shared/apps/singularity) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'SYSCONFDIR' = '/cm/shared/apps/singularity/etc'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(sysconfdir, /cm/shared/apps/singularity/etc) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'UNSHARE_PID' = '1'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(UNSHARE_PID, 1) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'BINDIR' = '/cm/shared/apps/singularity/bin'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(bindir, /cm/shared/apps/singularity/bin) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'UNSHARE_IPC' = '1'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(UNSHARE_IPC, 1) = 0\nVERBOSE [U=0,P=122534]     singularity_registry_set()                Adding value to registry: 'IMAGE' = 'contain1.img'\nDEBUG   [U=0,P=122534]     singularity_registry_set()                Returning singularity_registry_set(IMAGE, contain1.img) = 0\nDEBUG   [U=0,P=122534]     singularity_registry_get()                Returning value from registry: 'HOME' = '/home-4/userxyz@test.edu'\nDEBUG   [U=0,P=122534]     singularity_registry_get()                Returning NULL on 'TARGET_UID'\nDEBUG   [U=0,P=122534]     singularity_registry_get()                Returning NULL on 'TARGET_GID'\nDEBUG   [U=0,P=122534]     singularity_priv_init()                   Initializing user info\nDEBUG   [U=0,P=122534]     singularity_priv_init()                   Set the calling user's username to: userxyz@test.edu\nDEBUG   [U=0,P=122534]     singularity_priv_init()                   Marking uinfo structure as ready\nDEBUG   [U=0,P=122534]     singularity_priv_init()                   Obtaining home directory\nVERBOSE [U=0,P=122534]     singularity_priv_init()                   Set home and homedir (via SINGULARITY_HOME) to: /home-4/userxyz@test.edu\nVERBOSE [U=0,P=122534]     singularity_suid_init()                   Running SUID program workflow\nVERBOSE [U=0,P=122534]     singularity_suid_init()                   Checking program has appropriate permissions\nVERBOSE [U=0,P=122534]     singularity_suid_init()                   Checking configuration file is properly owned by root\nVERBOSE [U=0,P=122534]     singularity_suid_init()                   Checking if singularity.conf allows us to run as suid\nDEBUG   [U=0,P=122534]     singularity_config_get_bool_char_impl()   Called s…",
                "pretext": "[singularityware/singularity] New comment by tamn2017 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305656410|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496363280.397519",
        "date": 1496363280397
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305647221|#659: Using development branch on Singularity Hub>",
                "text": "Hey @vsoch ,\n\nJust tried it with 2.3 and received a similar error. This was during some variable exports when preparing to install nvidia drivers. \n\n```DEBUG [U=0,P=2186] bootdef_parser.c:202:singularity_bootdef_section_get(): Reading line: PATH=$NV_DRIVER_PATH:\\$PATH\nERROR [U=0,P=2186] util/util.c:159:strjoin() : Overly-long string encountered.\nABORT [U=0,P=2186] util/util.c:160:strjoin() : Retval = 255\n```\n\nFrom the def file in <https://github.com/belledon/chainer_sing/blob/master/Singularity>\nThe container has ID 1050\n\nThe build succeeds on my local system with version `2.2.99-development.g0ea6d4e`",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-305647221|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496359336.808302",
        "date": 1496359336808
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-305643698|#611: Nvidia GPU support with different driver versions?>",
                "text": "That seems close enough indeed, but I think there may additional bits missing. For instance, the NVML-related tools, such as `nvidia-smi`, which heavily depend on the driver, are not available within the container.\n`nvidia-docker` mounts them at runtime, as mentionned in <https://github.com/NVIDIA/nvidia-docker/issues/274>",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-305643698|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496357958.575383",
        "date": 1496357958575
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#708 Fix silly minor type in CONTRIBUTING.md' https://github.com/singularityware/singularity/pull/708 by bauerm97",
                "text": "*Description of the Pull Request (PR):*\n\nJust a minor typo fix\n\n*Checkoff for all PRs:*\n\n• [x] I have read the <https://github.com/singularityware/singularity/blob/master/CONTRIBUTING.md|Guidelines for Contributing>, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] I have added myself as a contributor to the <https://github.com/singularityware/singularity/blob/master/AUTHORS.md|Author's file>\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/bauerm97|bauerm97>",
                "title": "#708 Fix silly minor type in CONTRIBUTING.md",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/708",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496357387.471855",
        "date": 1496357387471
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305620634|#705: mount network home directory>",
                "text": "Hi, could you run singularity in debug mode with `singularity -d shell -C -H /home-4/userxyz@test.edu contain1.img` and posting the debug output here so I can see what's going on?",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/705#issuecomment-305620634|#705: mount network home directory>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496351222.993224",
        "date": 1496351222993
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305617741|#706: problems with multiple Includes in bootstrap definition>",
                "text": "@myourshaw As @akkornel has said, if you change `Include: yum` into `Include: yum bzip2` your def file should work as expected. Could you try this out and see if that solves your issue?\n\nThis arises because of how the code in <https://github.com/singularityware/singularity/blob/master/src/bootstrap-lib/keyval.c|the keyval parser> parses the `Include:` lines, where it looks one line at a time through the bootdef file and unfortunately overwrites the environment variable at each pass (when there are multiple lines present).",
                "pretext": "[singularityware/singularity] New comment by bauerm97 on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305617741|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496350541.768448",
        "date": 1496350541768
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305614050|#706: problems with multiple Includes in bootstrap definition>",
                "text": "Hi @myourshaw, what happens if you put `yum` and `bzip2` on the same `Include:` line, at the top of the file?",
                "pretext": "[singularityware/singularity] New comment by akkornel on issue <https://github.com/singularityware/singularity/issues/706#issuecomment-305614050|#706: problems with multiple Includes in bootstrap definition>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496349683.486704",
        "date": 1496349683486
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#707 Error if container directory is setgid' https://github.com/singularityware/singularity/issues/707 by kcgthb",
                "text": "*Description*\n\nWhen Singularity is installed in a SETGID directory, permissions check fail in `singularity_image_mount()` and attempt to fix the permission fail too. \n\n*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nNo error :)\n\n*Actual behavior*\n\n`Bad permission mode (should be 0755) on: &lt;install_dir&gt;/var/singularity/mnt/container`\n\n*Steps to reproduce behavior*\n\nInstall Singularity in a SETGID directory:\n```$ chmod g+s /share/singularity\n$ configure --prefix=/share/singularity\n$ sudo make install\n$ stat -c \"%a %n\" /share/singularityvar/singularity/mnt/container\n2755 /share/singularityvar/singularity/mnt/container\n```\nRun:\n```$ singularity --debug shell container.img\n[...]\nVERBOSE [U=215845,P=76501] singularity_runtime_rootfs()              Set container directory to: /share/software/user/open/singularity/2.3/var/singularity/mnt/container\nDEBUG   [U=215845,P=76501] singularity_runtime_rootfs()              Checking for container directory\nDEBUG   [U=215845,P=76501] singularity_runtime_rootfs()              Returning container_directory: /share/software/user/open/singularity/2.3/var/singularity/mnt/container\nDEBUG   [U=215845,P=76501] chk_mode()                                Checking exact mode (40755) on: /share/software/user/open/singularity/2.3/var/singularity/mnt/container\nVERBOSE [U=215845,P=76501] chk_mode()                                Found wrong permission on file /share/software/user/open/singularity/2.3/var/singularity/mnt/container: 40755 != 42755\nDEBUG   [U=215845,P=76501] singularity_image_mount()                 fixing bad permissions on /share/software/user/open/singularity/2.3/var/singularity/mnt/container\nDEBUG   [U=215845,P=76501] singularity_priv_escalate()               Temporarily escalating privileges (U=215845)\nDEBUG   [U=0,P=76501]      singularity_priv_escalate()               Clearing supplementary GIDs.\nDEBUG   [U=0,P=76501]      singularity_priv_drop()                   Dropping privileges to UID=215845, GID=32264 (11 supplementary GIDs)\nDEBUG   [U=0,P=76501]      singularity_priv_drop()                   Restoring supplementary groups\nDEBUG   [U=215845,P=76501] singularity_priv_drop()                   Confirming we have correct UID/GID\nERROR   [U=215845,P=76501] singularity_image_mount()                 Bad permission mode (should be 0755) on: /share/software/user/open/singularity/2.3/var/singularity/mnt/container\nABORT   [U=215845,P=76501] singularity_image_mount()                 Retval = 255\n```\n`chk_mode()` returns an error because of the SETGID bit. I'm not sure what's required here, security-wise. Is it necessary that this directory has the SETUID and SETGID bits not set? Or could the permissions check be relaxed to ignore those bits? \n\nIf it's important that they are not set, then the mechanism to fix the permissions in `singularity_image_mount()` should be improved. Currently, it does a <https://github.com/singularityware/singularity/blob/master/src/lib/image/mount/mount.c#L61|`chmod 0755`> on the directory, which will _not_ clear the SETUID/SETGID bits.\n\nFrom `man 1 chmod`:\n&gt; SETUID AND SETGID BITS\n&gt; [...]\n&gt;        you can set (but not clear) the bits with a numeric mode\nIt looks like if they actually need to be cleared, the SETUID/SETGID bits need to be explicitely unset.\n\n*Summary*\n\nDo SETUID/SETGID need to be absent from the container directory (`var/singularity/mnt/container`)?\n1. if not, the `chk_mode()` check should be less strict and ignore them,\n2. if so, they should be explicitly unset in `singularity_image_mount()` or possibly even better in the `install` target of the Makefile (the directory is created with `install -d -m 0755`, which also does _not_ unset SETUID/SETGID bits).",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/kcgthb|kcgthb>",
                "title": "#707 Error if container directory is setgid",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/707",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496349444.409223",
        "date": 1496349444409
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#706 problems with multiple Includes in bootstrap definition' https://github.com/singularityware/singularity/issues/706 by myourshaw",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\ndef file that has multiple includes will build correctly, e.g.\n\n```\nBootStrap: yum\nOSVersion: 7\nMirrorURL: <http://mirror.centos.org/centos-%>{OSVERSION}/%{OSVERSION}/os/$basearch/\nInclude: yum\n\nUpdateURL: <http://mirror.centos.org/centos-%>{OSVERSION}/%{OSVERSION}/updates/$basearch/\n\n*additional packages*\n\nInclude: bzip2\n\n%post\n  echo \"Installing EPEL\"\n  yum -y install epel-release\n```\n\n*Actual behavior*\n\ndef file that has multiple includes fails.\n\n```\n...\nComplete!\nRunning post scriptlet\n• echo 'Installing EPEL'\n     Installing EPEL\n• yum -y install epel-release\n     /bin/sh: line 3: yum: command not found\n     ABORT: Aborting with RETVAL=255\n     ```\n\n*Steps to reproduce behavior*\n\nrun singularity bootstrap with the above def file",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/myourshaw|myourshaw>",
                "title": "#706 problems with multiple Includes in bootstrap definition",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/706",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496347129.602412",
        "date": 1496347129602
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/703|#703 Update Debian changelog to 2.3> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/703|#703 Update Debian changelog to 2.3> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496346102.249891",
        "date": 1496346102249
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/703#issuecomment-305599504|#703: Update Debian changelog to 2.3>",
                "text": "Looks good to me, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/703#issuecomment-305599504|#703: Update Debian changelog to 2.3>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496346096.247776",
        "date": 1496346096247
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305599136|#701: Slurm plugin missing header>",
                "text": "I can take a stab at this, but the SLURM plugin does need to be updated and @bbockelm (who \"owns\" that component), has been focused on other things. If anyone wants to try and get to this before I can, it would be greatly appreciated!\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305599136|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496346000.216240",
        "date": 1496346000216
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/700|#700 PULL_REQUEST_TEMPLATE.md links fixed> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/700|#700 PULL_REQUEST_TEMPLATE.md links fixed> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496345693.112867",
        "date": 1496345693112
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/700#issuecomment-305597328|#700: PULL_REQUEST_TEMPLATE.md links fixed>",
                "text": "Looks good, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/700#issuecomment-305597328|#700: PULL_REQUEST_TEMPLATE.md links fixed>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496345685.110258",
        "date": 1496345685110
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305597001|#699: latest release 2.3 FTBS when building deb>",
                "text": "Looks good, thank you! Can you send a PR with these changes?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305597001|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496345605.083424",
        "date": 1496345605083
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/698#issuecomment-305596620|#698: convert img to tar.gz archive>",
                "text": "Yes, you can use tar.gz files that contain a root file system, but it is not very efficient as it must be splat out to the file system before it can be used. But to answer your question, yes, you can convert a disk image to a tarball by using a command like:\n\n```$ singularity export container.img &gt; container.tar\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/698#issuecomment-305596620|#698: convert img to tar.gz archive>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496345511.051566",
        "date": 1496345511051
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/698|#698 convert img to tar.gz archive> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/698|#698 convert img to tar.gz archive> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496345511.051518",
        "date": 1496345511051
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#705 mount network home directory' https://github.com/singularityware/singularity/issues/705 by tamn2017",
                "text": "*Version of Singularity:*\n\nVersion 2.3\n\n*Expected behavior*\n\nHoping it would mount network /home-4/userxyz@test.edu \n\n*Actual behavior*\n\nWARNING: Could not chdir to home: /home-4/userzyz@test.edu\n\n*Steps to reproduce behavior*\n\nsingularity shell container1.img\nsingularity shell docker://centos\nsingularity shell -C -H /home-4/userxyz\\@test.edu contain1.img ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/tamn2017|tamn2017>",
                "title": "#705 mount network home directory",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/705",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496344046.552253",
        "date": 1496344046552
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#704 SESSIONDIR_PREFIX in 2.3' https://github.com/singularityware/singularity/issues/704 by kcgthb",
                "text": "Hi!\n\nIt looks like the `SESSIONDIR_PREFIX` configuration directive disappeared from `etc/singularity.conf` in 2.3, and I'm curious about the rationale.\n\nAs far as I can see, the session directory is now set to `&lt;singularity_install_dir&gt;/var/singularity/mnt/session`. I understand that this comes from the `localstatedir` option of the `configure` script.\n\nWe're typically installing Singularity on a shared NFS directory, alongside other applications, and in that case, the `localstatedir`, as well as the session directory, will end up on NFS. I recall from previous versions that those needed to be local to each machine. Is that not the case anymore?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/kcgthb|kcgthb>",
                "title": "#704 SESSIONDIR_PREFIX in 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/704",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496343420.323291",
        "date": 1496343420323
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/702#issuecomment-305578855|#702: Old version on debian package>",
                "text": "This is largely my fault for having 2.3 represented in the docs - I took the assumption / hope that someone would update the package and then it would be correct :) I think with a PR for the debian distribution this will be fixed?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/702#issuecomment-305578855|#702: Old version on debian package>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496341583.648641",
        "date": 1496341583648
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/703#issuecomment-305577100|#703: Update Debian changelog to 2.3>",
                "text": "This seems ok to me, @gmkurtzer do you want your email in there ?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/703#issuecomment-305577100|#703: Update Debian changelog to 2.3>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496341199.508520",
        "date": 1496341199508
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#703 Update Debian changelog to 2.3' https://github.com/singularityware/singularity/pull/703 by dexter2cz",
                "text": "*Description of the Pull Request (PR):*\n\nUpdated Debian changelog.\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #702\n\n*Checkoff for all PRs:*\n\n• [X] I have read the &lt;CONTRIBUTING.md|Guidelines for Contributing&gt;, and this PR conforms to the stated requirements.\n• [X] I have tested this PR locally with a `make test`\n• [ ] I have added myself as a contributor to the &lt;AUTHORS.md|Author's file&gt;\n• [X] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/dexter2cz|dexter2cz>",
                "title": "#703 Update Debian changelog to 2.3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/703",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496340341.202541",
        "date": 1496340341202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-305565269|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "I was testing this same issue a few days ago after posting about it on slack and at that time 2.9.99 didn't have this problem. I just re-checked with the newly released singularity-2.3.0 and the 2.2 problem is still absent.",
                "pretext": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-305565269|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496338516.529894",
        "date": 1496338516529
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305564462|#701: Slurm plugin missing header>",
                "text": "Same here, full error:\n\nMaking all in slurm\nmake[3]: Entering directory `singularity-2.3/src/slurm'\ndepbase=`echo singularity.lo | sed 's|[^/]*$|.deps/&amp;|;s|.lo$||'`;\\\n        /bin/sh ../../libtool --tag=CC   --mode=compile gcc -DHAVE_CONFIG_H -I. -I../../src     -I/opt/slurm/include -MT singularity.lo -MD -MP -MF $depbase.Tpo -c -o singularity.lo singularity.c &amp;&amp;\\\n        mv -f $depbase.Tpo $depbase.Plo\nlibtool: compile:  gcc -DHAVE_CONFIG_H -I. -I../../src -I/opt/slurm/include -MT singularity.lo -MD -MP -MF .deps/singularity.Tpo -c singularity.c  -fPIC -DPIC -o .libs/singularity.o\nsingularity.c:32:29: error: lib/singularity.h: No such file or directory\nsingularity.c: In function ‘setup_container_environment’:\nsingularity.c:66: warning: incompatible implicit declaration of built-in function ‘snprintf’\nsingularity.c: In function ‘setup_container_cwd’:\nsingularity.c:130: warning: initialization makes pointer from integer without a cast\nsingularity.c: In function ‘setup_container’:\nsingularity.c:148: warning: incompatible implicit declaration of built-in function ‘printf’\nsingularity.c:172: error: redeclaration of ‘image’ with no linkage\nsingularity.c:145: note: previous declaration of ‘image’ was here\nsingularity.c:173: warning: assignment makes pointer from integer without a cast\nmake[3]: *** [singularity.lo] Error 1\nmake[3]: Leaving directory `singularity-2.3/src/slurm'\nmake[2]: *** [all-recursive] Error 1\nmake[2]: Leaving directory `singularity-2.3/src'\nmake[1]: *** [all] Error 2\nmake[1]: Leaving directory `singularity-2.3/src'\nmake: *** [all-recursive] Error 1\n\nHowever, just patching those includes out is not sufficient as it doesn't address re-declaration of image.\n\nsingularity.c: In function ‘setup_container_environment’:\nsingularity.c:65: warning: incompatible implicit declaration of built-in function ‘snprintf’\nsingularity.c: In function ‘setup_container_cwd’:\nsingularity.c:129: warning: initialization makes pointer from integer without a cast\nsingularity.c: In function ‘setup_container’:\nsingularity.c:147: warning: incompatible implicit declaration of built-in function ‘printf’\nsingularity.c:171: error: redeclaration of ‘image’ with no linkage\nsingularity.c:144: note: previous declaration of ‘image’ was here\nsingularity.c:172: warning: assignment makes pointer from integer without a cast",
                "pretext": "[singularityware/singularity] New comment by moskalenko on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305564462|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496338326.461925",
        "date": 1496338326461
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#702 Old version on debian package' https://github.com/singularityware/singularity/issues/702 by BaronPampa",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\ndeb package with name: singularity-container_2.3_amd64.deb\n\n*Actual behavior*\n\nsingularity-container_2.2-1_amd64.deb\n\n*Steps to reproduce behavior*\n\n$&gt;tar xfv singularity-2.3.tar.gz\n$&gt; cd singularity-2.3/\n$&gt; fakeroot dpkg-buildpackage -b -us -uc",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/BaronPampa|BaronPampa>",
                "title": "#702 Old version on debian package",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/702",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496333076.566684",
        "date": 1496333076566
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> The branch \"2.3\" was deleted by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> The branch \"2.3\" was deleted by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496331278.830053",
        "date": 1496331278830
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity/tree/2.3|[singularity:2.3]> was branched from \"master\" and pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity/tree/2.3|[singularity:2.3]> was branched from \"master\" and pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496330811.638058",
        "date": 1496330811638
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kav2k on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305498111|#701: Slurm plugin missing header>",
                "text": "To clarify: this only happens when trying to compile Slurm integration plugin.",
                "pretext": "[singularityware/singularity] New comment by kav2k on issue <https://github.com/singularityware/singularity/issues/701#issuecomment-305498111|#701: Slurm plugin missing header>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496324830.186858",
        "date": 1496324830186
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#701 Slurm plugin missing header' https://github.com/singularityware/singularity/issues/701 by gdolle",
                "text": "singularity.c:32:29: fatal error: lib/singularity.h: No such file or directory  #include \"lib/singularity.h\"\n\nMaybe this include should be removed ? (like here <https://github.com/singularityware/singularity/commit/e699be95cdb7c2352f22dfa844c2cec301e0adfe>)\n\n*Version of Singularity:*\n\nRelease 2.3.0",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/gdolle|gdolle>",
                "title": "#701 Slurm plugin missing header",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/701",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496323281.645757",
        "date": 1496323281645
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#700 PULL_REQUEST_TEMPLATE.md links fixed' https://github.com/singularityware/singularity/pull/700 by ArangoGutierrez",
                "text": "*Description of the Pull Request (PR):*\n\nLinks on PULL_REQUEST_TEMPLATE.md are broken (Error 404)\n\n*This fixes or addresses the following GitHub issues:*\n\n• Ref: #\n\n*Checkoff for all PRs:*\n\n• [x] I have read the &lt;CONTRIBUTING.md|Guidelines for Contributing&gt;, and this PR conforms to the stated requirements.\n• [x] I have tested this PR locally with a `make test`\n• [x] I have added myself as a contributor to the &lt;AUTHORS.md|Author's file&gt;\n• [x] This PR is ready for review and/or merge\n\nAttn: @singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "title": "#700 PULL_REQUEST_TEMPLATE.md links fixed",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/700",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496322504.400040",
        "date": 1496322504400
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305487813|#699: latest release 2.3 FTBS when building deb>",
                "text": "Here is the ```debian/control``` file I use (from Debian archive):\n```\nSource: singularity-container\nSection: admin\nPriority: optional\nMaintainer: NeuroDebian Team <mailto:team@neuro.debian.net|team@neuro.debian.net>\nUploaders:\n Dave Love <mailto:fx@gnu.org|fx@gnu.org>,\n Mehdi Dogguy <mailto:mehdi@debian.org|mehdi@debian.org>,\n Yaroslav Halchenko <mailto:debian@onerussian.com|debian@onerussian.com>,\nBuild-Depends:\n debhelper (&gt;= 9),\n dh-autoreconf,\n help2man,\n python-dev (&gt;= 2.6.6-3~)\n\n*python3.5-dev*\n\nStandards-Version: 3.9.8\nX-Python-Version: current\n#X-Python3-Version: &gt;= 3.5\nHomepage: <http://gmkurtzer.github.io/singularity>\nVcs-Git: <https://anonscm.debian.org/git/collab-maint/singularity-container.git>\nVcs-Browser: <https://anonscm.debian.org/git/collab-maint/singularity-container.git>\n\n*\"singularity\" is a packaged game (but the contents don't clash)*\n\nPackage: singularity-container\nArchitecture: any\nDepends: ${misc:Depends}, ${shlibs:Depends}, python\nDescription: container platform focused on supporting \"Mobility of Compute\"\n Mobility of Compute encapsulates the development to compute model\n where developers can work in an environment of their choosing and\n creation and when the developer needs additional compute resources,\n this environment can easily be copied and executed on other platforms.\n Additionally as the primary use case for Singularity is targeted\n towards computational portability, many of the barriers to entry of\n other container solutions do not apply to Singularity making it an\n ideal solution for users (both computational and non-computational)\n and HPC centers.\n```",
                "pretext": "[singularityware/singularity] New comment by Trophime on issue <https://github.com/singularityware/singularity/issues/699#issuecomment-305487813|#699: latest release 2.3 FTBS when building deb>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496322500.398972",
        "date": 1496322500398
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#699 latest release 2.3 FTBS when building deb ' https://github.com/singularityware/singularity/issues/699 by Trophime",
                "text": "*Version of Singularity:*\n\n2.3\n\n*Expected behavior*\n\nbuild debian package\n\n*Actual behavior*\n\nThe build crashes first in the configure step because of missing ```python```\nAfter adding ```python-dev``` to ```Build-Depends``` in ```debian/control``` (see attached)\nit crashes again:\n```Making all in etc\nmake[2]: Entering directory '/build/singularity-container-2.3/etc'\n./configure_transform.py --defaults ../src/util/config_defaults.h --infile singularity.conf.in --outfile singularity.conf\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /nonexistent/.singularity\nTraceback (most recent call last):\n  File \"./configure_transform.py\", line 30, in &lt;module&gt;\n    from sutils import (\n  File \"../libexec/python/sutils.py\", line 25, in &lt;module&gt;\n    from defaults import (\n  File \"../libexec/python/defaults.py\", line 110, in &lt;module&gt;\n    os.mkdir(SINGULARITY_CACHE)\nOSError: [Errno 2] No such file or directory: '/nonexistent/.singularity'\n```\n\n*Steps to reproduce behavior*\n\nI use pdebuild to rebuild the package to make the build in a \"proper\" way with a clean and minimal debian dist.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/Trophime|Trophime>",
                "title": "#699 latest release 2.3 FTBS when building deb ",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/699",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496322419.374821",
        "date": 1496322419374
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#698 convert img to tar.gz archive' https://github.com/singularityware/singularity/issues/698 by huitre39",
                "text": "Hello, last week i view that i can use singularity with tar.gz who contains root file system.\nMy question is, can i convert img disk image to tar.gz archive ?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/huitre39|huitre39>",
                "title": "#698 convert img to tar.gz archive",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/698",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496319921.704855",
        "date": 1496319921704
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New tag <https://github.com/singularityware/singularity/compare/2.3|2.3> was pushed by gmkurtzer",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New tag <https://github.com/singularityware/singularity/compare/2.3|2.3> was pushed by gmkurtzer",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496278404.867195",
        "date": 1496278404867
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/681|#681 singularity supported uris discussion> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/681|#681 singularity supported uris discussion> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496278331.857491",
        "date": 1496278331857
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305358470|#681: singularity supported uris discussion>",
                "text": "okay, I think we are good then. Thanks everyone!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305358470|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496278331.857489",
        "date": 1496278331857
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305351742|#681: singularity supported uris discussion>",
                "text": "Nope, we don't have to support import'ing an image into an image. It is messy, but it can be done pretty easily by exporting and then importing.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305351742|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496275425.454001",
        "date": 1496275425454
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305324178|#681: singularity supported uris discussion>",
                "text": "Not for import I don't think - @gmkurtzer that is correct? We currently don't have support to import an image into another image. That sounds messy.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305324178|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496266410.163152",
        "date": 1496266410163
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305314162|#681: singularity supported uris discussion>",
                "text": "Right now it only lists docker as a supported URI.  shub should work too right?",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305314162|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496264025.436599",
        "date": 1496264025436
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305313191|#681: singularity supported uris discussion>",
                "text": "ok, let's just double check the import docs then provided via the singularity --help.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305313191|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496263793.358263",
        "date": 1496263793358
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305312020|#681: singularity supported uris discussion>",
                "text": "Well, the format is supported for all of the action commands, but import specifically takes a strict format to convert it to the container image format (e.g. it also can't take a directory or a cpio in that it only supports tar).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305312020|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496263543.273703",
        "date": 1496263543273
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305310532|#696: busybox replace ash by bash, it's possible ?>",
                "text": "and please use development branch:\n\n```git clone -b https://www.github.com/singularityware/singularity.git\ncd singularity\n./autogen.sh\n./configure --prefix=/usr/local\nmake\nsudo make install\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305310532|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496263212.162281",
        "date": 1496263212162
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305310306|#696: busybox replace ash by bash, it's possible ?>",
                "text": "@sazearte did you try my suggestion?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305310306|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496263157.144029",
        "date": 1496263157144
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305309727|#681: singularity supported uris discussion>",
                "image_url": "https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Yoyo.gif/200px-Yoyo.gif",
                "image_width": 200,
                "image_height": 287,
                "image_bytes": 21153,
                "is_animated": true,
                "text": "...yo <https://upload.wikimedia.org/wikipedia/commons/thumb/c/ca/Yoyo.gif/200px-Yoyo.gif>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305309727|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496263025.100830",
        "date": 1496263025100
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305309566|#681: singularity supported uris discussion>",
                "text": "The table for the paper above is for the supported container formats. So I think it follows that we should be able to have containers in that format. But for this particular issue, what we also need to clarify is which of the above are supported for import. We can't have in our docs (and singularity --help) that a format is supported that isn't /. no longer is, yo! :P",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305309566|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496262992.089776",
        "date": 1496262992089
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305278743|#681: singularity supported uris discussion>",
                "text": "Are these for imports, or direct container actions (run, shell, test, exec, etc..)?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-305278743|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496255917.674915",
        "date": 1496255917674
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270594|#697: Added missing .img to import.help>",
                "text": "Yep, I am on testing that now.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270594|#697: Added missing .img to import.help>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496254151.028593",
        "date": 1496254151028
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270314|#697: Added missing .img to import.help>",
                "text": "Haha thanks this looks ok to me. I think @gmkurtzer we need to resolve the functionalities (still) provided by import, per the message on the list this morning.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270314|#697: Added missing .img to import.help>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496254089.007090",
        "date": 1496254089007
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270197|#697: Added missing .img to import.help>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/697#issuecomment-305270197|#697: Added missing .img to import.help>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496254064.998480",
        "date": 1496254064998
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/697|#697 Added missing .img to import.help> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/697|#697 Added missing .img to import.help> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496254059.996712",
        "date": 1496254059996
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/695#issuecomment-305215739|#695: Small tweaks to inspect help>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/695#issuecomment-305215739|#695: Small tweaks to inspect help>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496243084.824445",
        "date": 1496243084824
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/695|#695 Small tweaks to inspect help> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/695|#695 Small tweaks to inspect help> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496243078.821746",
        "date": 1496243078821
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#697 Added missing .img to import.help' https://github.com/singularityware/singularity/pull/697 by dexter2cz",
                "text": "Just minor fix.",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/dexter2cz|dexter2cz>",
                "title": "#697 Added missing .img to import.help",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/697",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496221321.456125",
        "date": 1496221321456
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sazearte on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305108217|#696: busybox replace ash by bash, it's possible ?>",
                "text": "truatpasteurdotfr, thanks for your help but in my busybox image, apk (or yum) is not installed, i have this error :\nsh: apk: not found",
                "pretext": "[singularityware/singularity] New comment by sazearte on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305108217|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496215645.165507",
        "date": 1496215645165
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305008491|#696: busybox replace ash by bash, it's possible ?>",
                "text": "@sazearte you are using singularity 2.2 ? just apply this workaround\nreduce the bootstrap file to:\n```#bb.def\nBootStrap: busybox\nMirrorURL: file:///home/robert/busybox/busybox-x86_64\n```\nthen:\n```\nsudo singularity create bb.img \nsudo singularity bootstrap bb.img bb.def\nsudo singularity exec -w bb.img sh -c 'apk update &amp;&amp; apk upgrade &amp;&amp; apk add bash bash-doc bash-completion ' ",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-305008491|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496178441.732168",
        "date": 1496178441732
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304954480|#696: busybox replace ash by bash, it's possible ?>",
                "text": "Can you install development branch? We don't even have cli.py in the python bits anymore. Then please try again.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304954480|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496166229.640817",
        "date": 1496166229640
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by sazearte on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304883032|#696: busybox replace ash by bash, it's possible ?>",
                "text": "it's not work for me :\n```Bootstrap initialization\nChecking bootstrap definition\nExecuting Prebootstrap module\nExecuting Bootstrap 'docker' module\nFrom: alpine:latest\nlibrary/alpine:latest\nTraceback (most recent call last):\n  File \"/usr/local/libexec/singularity/python/cli.py\", line 198, in &lt;module&gt;\n    main()\n  File \"/usr/local/libexec/singularity/python/cli.py\", line 146, in main\n    auth=doauth)\n  File \"/usr/local/libexec/singularity/python/docker/api.py\", line 156, in get_manifest\n    permission=\"pull\")\n  File \"/usr/local/libexec/singularity/python/docker/api.py\", line 63, in get_token\n    response = api_get(base,default_header=False)\n  File \"/usr/local/libexec/singularity/python/utils.py\", line 143, in api_get\n    response = urlopen(request)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 154, in urlopen\n    return opener.open(url, data, timeout)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 431, in open\n    response = self._open(req, data)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 449, in _open\n    '_open', req)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 409, in _call_chain\n    result = func(*args)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 1258, in https_open\n    context=self._context, check_hostname=self._check_hostname)\n  File \"/usr/lib64/python2.7/urllib2.py\", line 1214, in do_open\n    raise URLError(err)\nurllib2.URLError: &lt;urlopen error [Errno -2] Name or service not known&gt;\nExecuting Postbootstrap module\nERROR: Container does not contain the valid minimum requirement of /bin/sh\n```\n\ni use bootstrap busybox :\n\n```\nBootStrap: busybox\nMirrorURL: file:///home/robert/busybox/busybox-x86_64\n\n%post\n    echo \"Hello from inside the container\"\n\n```\n\nbut i have ash shell not bash",
                "pretext": "[singularityware/singularity] New comment by sazearte on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304883032|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496151972.270316",
        "date": 1496151972270
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304877852|#696: busybox replace ash by bash, it's possible ?>",
                "text": "This may not be exactly what you want, but if you use alpine you get busybox and bash both. Here is my SIngularity build file:\n\n```\nBootstrap: docker\nFrom: alpine:latest\n\n%post\napk update\napk add bash\napk add bash-doc\napk add bash-completion\n```and then to create\n```\nsingularity create alpine.img\nsudo singularity bootstrap alpine.img Singularity\n```\n\nand then you have both!\n\n```\nvanessa@vanessa-ThinkPad-T450s:~/Desktop$ singularity shell alpine.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity alpine.img:~/Desktop&gt; which bash\n/bin/bash\nSingularity alpine.img:~/Desktop&gt; which busybox\n/bin/busybox\nSingularity alpine.img:~/Desktop&gt; \n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/696#issuecomment-304877852|#696: busybox replace ash by bash, it's possible ?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496150894.899809",
        "date": 1496150894899
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#696 busybox replace ash by bash, it's possible ?' https://github.com/singularityware/singularity/issues/696 by sazearte",
                "text": "Hello, i create small image with busybox.\n\nbut my image have ash shell, can i install bash ?\ni try to copy binnary of bash in my image, but when i run /bin/bash command i have this error\n`/bin/sh: /bin/bash: not found`",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/sazearte|sazearte>",
                "title": "#696 busybox replace ash by bash, it's possible ?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/696",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496140924.560888",
        "date": 1496140924560
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304836209|#674: (How to) Access local file during bootstrap?>",
                "text": "I use the container to run a bunch of scripts that execute statistical simulations, create graphs and tables and then build a paper with the results included. All this is managed by the `makefile`, so in principle the results are reproducible without the singularity container. But some dependencies are not necessarily available at my local HPC cluster and taking care of the computing environment adds another layer of reproducibility (which I guess I don't need to tell you about...), so singularity is great for that. \n\nI thought just having `make` and letting all the computations happen from within the container would be sufficient. I suppose that could be called an on demand compiler. After having managed to install the local package, it now also works like a charm :)\n\nThe separate `makefile` also has the nice effect that simulations that haven't changed don't need to be rerun when building the paper. ",
                "pretext": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304836209|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496139539.285282",
        "date": 1496139539285
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304765668|#674: (How to) Access local file during bootstrap?>",
                "text": "hey @nielsaka- why are you running make for the runscript as opposed to handling it during the build? Is the container itself intended to be an on demand compiler or is the make for the packages you are providing within it? If you can give me a sense of what you want the final thing to do, I can try to help with the Singularity file above.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304765668|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496114421.305832",
        "date": 1496114421305
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#695 Small tweaks to inspect help' https://github.com/singularityware/singularity/pull/695 by vsoch",
                "text": "Fixes #\n\nChanges proposed in this pull request\n\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#695 Small tweaks to inspect help",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/695",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496075889.582155",
        "date": 1496075889582
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/inspect-tweaks|inspect-tweaks>\" was pushed by vsoch",
                "text": "<https://github.com/singularityware/singularity|[singularity]> New branch \"<https://github.com/singularityware/singularity/tree/inspect-tweaks|inspect-tweaks>\" was pushed by vsoch",
                "id": 1,
                "color": "4183C4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496075837.575353",
        "date": 1496075837575
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304657434|#674: (How to) Access local file during bootstrap?>",
                "text": "I like the discussion above. Something like `%files-pre`, `%install`, `%files-post` would make sense to me.",
                "pretext": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304657434|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496063322.250033",
        "date": 1496063322250
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304657184|#674: (How to) Access local file during bootstrap?>",
                "text": "Hey, thanks, no, I haven't got any more questions at the moment. \n\nTo answer @gmkurtzer from 19th May, what I now do ist the following. The bootstrap def file looks like this (more or less)\n\n```\nBootStrap: debootstrap\nOSVersion: jessie\nMirrorURL: <http://ftp.de.debian.org/debian/>\n\n%setup\n    cp -R code/package /tmp/\n\n%runscript\n    make\n\n%files\n    # will only be copied after %post is run\n\n%post\n    export LC_ALL=C\n    ...\n    Rscript -e 'install.packages(\"/tmp/package/\", repos = NULL)'\n```\nDuring `%setup` a local package that lies in my local project folder under `code/package/` is copied to `/tmp/`. I like the ability to copy the whole directory using `cp -R`. My understanding is that in sections like `%file`, I would have to zip/tar it first(?) Using `/tmp/` as a location to transfer files to the container seemed the easiest way out. Finally, the very last line installs the package which is written in R. ",
                "pretext": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-304657184|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496063247.234981",
        "date": 1496063247234
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-304546961|#681: singularity supported uris discussion>",
                "image_url": "https://cloud.githubusercontent.com/assets/814322/26532884/3fe22dd0-43c2-11e7-8cda-4e85afc556c3.png",
                "image_width": 1573,
                "image_height": 620,
                "image_bytes": 94747,
                "text": "I'm not sure anymore which types are supported - our publication lists the following:\n\n<https://cloud.githubusercontent.com/assets/814322/26532884/3fe22dd0-43c2-11e7-8cda-4e85afc556c3.png|image>\n\nI think we need to be consistent and support these. @gmkurtzer can you review your plan for which are / will continue to be supported?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-304546961|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496013966.919112",
        "date": 1496013966919
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-304543732|#681: singularity supported uris discussion>",
                "text": "Looks like the help doc is now aligned with the function.  Is there a burning need to support html for `import`?  If not, I would just suggest closing this. ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-304543732|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496009621.717530",
        "date": 1496009621717
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/680|#680 bc is a dependency of pull.exe (when pulling from Docker Hub)> by <https://github.com/GodloveD|GodloveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/680|#680 bc is a dependency of pull.exe (when pulling from Docker Hub)> by <https://github.com/GodloveD|GodloveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496008409.660012",
        "date": 1496008409660
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-304542786|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "So this is totally fixed now!  Awesome!",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-304542786|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1496008409.659996",
        "date": 1496008409659
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304355923|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "see my comments at the end of this thread <https://github.com/singularityware/singularity/issues/693> I don't think the docker config file should be first checked, because it's not/*can't* be on most environments where this command would be run. The only other option that I wanted to run by as an addition would be to allow the user to specify the token as an environment variable instead of the docker username and password. You could still decode it, but it might make users more comfortable not having the username/password easily in plain sight.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304355923|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495823270.932392",
        "date": 1495823270932
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304352998|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "Heya, is this ready for merge, or should we wait until after the 2.3 release?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304352998|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495822490.744294",
        "date": 1495822490744
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304328571|#693: Registry authentication with .docker/config>",
                "text": "I disagree about use of the docker config - I've been using Docker since 2015 and this is the first time I used `docker login` to generate one. I advocate for the environment variable approach because you have to be specific about setting it, and importantly, it doesn't require the Docker daemon. A user on a shared resource would have to arbitrarily create one or copy from a host, and that's a lot more work than just exporting the environment variable. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304328571|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495816425.280440",
        "date": 1495816425280
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by rbrthogan on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304224542|#694: Adding ability to read docker credentials from .docker/config.json>",
                "text": "It seems to me that a much more elegant solution would be to just rely on the existence of user credentials in `.docker/config.json`. Right now, for Basic authentication, you have a 2 stage process, with the first simply reproducing data that would be contained in `.docker/config.json` if it exists followed by using this data to get access, and separately have a fall back to read this file anyway. I think that if `.docker/config.json` exists it should be first thing used, otherwise perhaps you could look for env variables, construct the first token, etc. This way, the api will execute entirely the same code, independent of registry Auth, as long as the correct credentials are present.\n\nI personally don't love the env variable solution because it requires me to stored my password as plain text which is irksome. Perhaps you don't want to rely on the existence of `.docker/config.json` because it is generated by the docker daemon. I do think, however, that most users who often use private docker registries (either with Basic Authentication or OAuth) likely use the docker daemon to handle credentials for them. In any case, the env variable solution can always be there as fall back if `.docker/config.json` doesn't exist.\n\nI hope this isn't just my personal bias speaking, I would be interested to hear community feedback.",
                "pretext": "[singularityware/singularity] New comment by rbrthogan on pull request <https://github.com/singularityware/singularity/pull/694#issuecomment-304224542|#694: Adding ability to read docker credentials from .docker/config.json>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495787557.644644",
        "date": 1495787557644
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304224498|#693: Registry authentication with .docker/config>",
                "text": "thanks for the quick work @vsoch !\n\nI'm not sure I understand your concern about hard coding the `.docker/config.json` stuff though. For sure, singularity is more than just a container on top of Docker, but the changes we are proposing are specifically related the docker api client which is already in the project. \n\nI have some comments about the solution which I will repost on the PR to continue discussion there:\n\nIt seems to me that a much more elegant solution would be to just rely on the existence of user credentials in `.docker/config.json`. Right now, for Basic authentication, you have a 2 stage process, with the first simply reproducing data that would be contained in `.docker/config.json` if it exists followed by using this data to get access, and separately have a fall back to read this file anyway. I think that if `.docker/config.json` exists it should be first thing used, otherwise perhaps you could look for env variables, construct the first token, etc. This way, the api will execute entirely the same code, independent of registry Auth, as long as the correct credentials are present.\n\nI personally don't love the env variable solution because it requires me to stored my password as plain text which is irksome. Perhaps you don't want to rely on the existence of `.docker/config.json` because it is generated by the docker daemon. I do think, however, that most users who often use private docker registries (either with Basic Authentication or OAuth) likely use the docker daemon to handle credentials for them. In any case, the env variable solution can always be there as fall back if `.docker/config.json` doesn't exist.\n\nI hope this isn't just my personal bias speaking, I would be interested to hear community feedback.",
                "pretext": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304224498|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495787546.643069",
        "date": 1495787546643
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304173968|#670: Problem building RPM from Git source>",
                "text": "Ahh, good thinking!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304173968|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495765490.474758",
        "date": 1495765490474
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#694 Adding ability to read docker credentials from .docker/config.json' https://github.com/singularityware/singularity/pull/694 by vsoch",
                "text": "Fixes #693 \n\nChanges proposed in this pull request\n\n• This PR adds a function to the docker api client that can read in the config token from the user's config.json, which is located in `/.docker/config.json`, and generated when a user does docker login. I was first against adding this additional use case, but I think it's reasonable to minimally look for this as an option given that the authentication has failed, and the user has not provided a credential - for the subset of users that also use Docker, it will mean not having to export environment variables.\n     • I also wrote a function to get the registry an actual function (since we use it many times), and with this more properly defined the `USERHOME` variable in defaults.py\n     • Adding a test for this.\n\nThe config.json seems to store a base64 credential that is indexed by the registry version, and as far as I know, it works to use a version 1 credential for version 2 registry (this is how I tested). We should keep our eye on this in case there are situations when one credential doesn't work for the other. However, given that the user has gotten to the point, they would have just hit a sys.exit(1) anyway, so it doesn't hurt to try!\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#694 Adding ability to read docker credentials from .docker/config.json",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/694",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495758385.805658",
        "date": 1495758385805
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304158293|#693: Registry authentication with .docker/config>",
                "text": "okay, I just figured out a way to do it as a \"last call resort\" and will link the PR soon.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304158293|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495757994.766212",
        "date": 1495757994766
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304155361|#693: Registry authentication with .docker/config>",
                "text": "I thought more about this - I don't like the idea of automatically using any docker config found in the user's home - I think since Singularity is not just a container to carry around Docker, having this essentially hard coded in the software's functionality isn't a direction I like. The ability to specify a `--token` would also coincide with hard coding something docker in. Is it really a hassle to export the environment variables? That gives support for Docker, it's something you do intentionally, but it doesn't add extra variables/options to the core user interface/interaction of Singularity. Let me know your thoughts - and definitely if you have idea for implementation give it a go and we can discuss!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304155361|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495756653.619559",
        "date": 1495756653619
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304111220|#693: Registry authentication with .docker/config>",
                "text": "hey @rbrthogan  - I just tested this out (comparing the value in the `.docker/config.json` with the one we are generating) and they are totally the same! What I can do is have this be a fallback for a user credential. Something like:\n\n• upon init, if username and password are provided via environment, use that\n• if no username and password, check for docker/config.json, and use that instead\n\nThis is a reasonable addition, and I think worth adding if it benefits a ton of users (that prefer using docker login instead of exporting things to the environment). Let me give it some tests and I'll put in a PR for us to look over.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304111220|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495743107.165725",
        "date": 1495743107165
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304108165|#693: Registry authentication with .docker/config>",
                "text": "Ah ok, cool. In that case, maybe we can just extend the current approach to\nallow the user to pass the fully formed token explicitly, i.e., add a\n'--token' field to env variable that overrides the token creation you are\ndoing and just gets passed directly.\n\nDoes that make sense? I can fork and test it out when I'm back in work in\nthe morning and make a PR if it works.\n\nOn May 25, 2017 8:06 PM, \"Vanessa Sochat\" <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; hey @rbrthogan <https://github.com/rbrthogan> ! We start with the\n&gt; username and password (likely from the environment as\n&gt; SINGULARITY_DOCKER_USERNAME and SINGULARITY_DOCKER_PASSWORD and then put\n&gt; them together with a : and encode with base64 to turn into the initial\n&gt; token, eg:\n&gt; \n&gt; def basic_auth_header(username, password):\n&gt;     '''basic_auth_header will return a base64 encoded header object to\n&gt;     generate a token\n&gt;     :param username: the username\n&gt;     :param password: the password\n&gt;     '''\n&gt;     s = \"%s:%s\" % (username, password)\n&gt;     if sys.version_info[0] &gt;= 3:\n&gt;         s = bytes(s, 'utf-8')\n&gt;         credentials = base64.b64encode(s).decode('utf-8')\n&gt;     else:\n&gt;         credentials = base64.b64encode(s)\n&gt;     auth = {\"Authorization\": \"Basic %s\" % credentials}\n&gt;     return auth\n&gt; \n&gt; This auth object, which is part of the header, is then handed to our\n&gt; client that makes all the requests for docker manifests (eg, metadata,\n&gt; layers, etc.) Given that no authentication is needed, it just works! If\n&gt; authentication is needed then the server will respond with a 401, and then\n&gt; we look at the Www-Authenticate header to get the specific scope,\n&gt; registry, and repo that we need to ask permissions for. Then we update that\n&gt; in the header, and issue the request again, eg:\n&gt; \n&gt; self.token_url = \"%s?service=%s&amp;expires_in=9000&amp;scope=%s\" %(realm,service,scope)\n&gt; \n&gt; and if all goes well, this responds with a much (longer) token that will\n&gt; do the authentication, and we update the client headers with it:\n&gt; \n&gt; token = json.loads(response)[\"token\"]\n&gt; token = {\"Authorization\": \"Bearer %s\" %(token) }\n&gt; \n&gt; It looks like the ~/.docker/config.json file is specifically when you log\n&gt; into the docker daemon with \"docker login\" - funny enough I've been using\n&gt; Docker for years (meaning having the daemon locally) and never actually\n&gt; logged in. I'm not sure I see the dire need to add a \"sniff\" for this\n&gt; config, because we have taken an approach that doesn't have any dependency\n&gt; or integration with their daemon (just using the back end APIs in the same\n&gt; way) @gmkurtzer <https://github.com/gmkurtzer> do you have thoughts on\n&gt; this? @rbrthogan <https://github.com/rbrthogan> what would be the\n&gt; pros/benefits of supporting this specific config over just using the\n&gt; environment variables?\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/693#issuecomment-304096260>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AIyaz-aIssLv3ewqBLCLGGS9OvJL_WiSks5r9dFDgaJpZM4Nmf47>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304108165|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495742369.969598",
        "date": 1495742369969
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304096260|#693: Registry authentication with .docker/config>",
                "text": "hey @rbrthogan ! We start with the username and password (likely from the environment as `SINGULARITY_DOCKER_USERNAME` and `SINGULARITY_DOCKER_PASSWORD` and then put them together with a `:` and encode with base64 to turn into the initial token, eg:\n\n```def basic_auth_header(username, password):\n    '''basic_auth_header will return a base64 encoded header object to\n    generate a token\n    :param username: the username\n    :param password: the password\n    '''\n    s = \"%s:%s\" % (username, password)\n    if sys.version_info[0] &gt;= 3:\n        s = bytes(s, 'utf-8')\n        credentials = base64.b64encode(s).decode('utf-8')\n    else:\n        credentials = base64.b64encode(s)\n    auth = {\"Authorization\": \"Basic %s\" % credentials}\n    return auth\n```\n\nThis auth object, which is part of the header, is then handed to our client that makes all the requests for docker manifests (eg, metadata, layers, etc.) Given that no authentication is needed, it just works! If authentication is needed then the server will respond with a 401, and then we look at the `Www-Authenticate` header to get the specific scope, registry, and repo that we need to ask permissions for. Then we update that in the header, and issue the request again, eg:\n\n```self.token_url = \"%s?service=%s&amp;expires_in=9000&amp;scope=%s\" %(realm,service,scope)\n```\n\nand if all goes well, this responds with a much (longer) token that will do the authentication, and we update the client headers with it:\n\n```token = json.loads(response)[\"token\"]\ntoken = {\"Authorization\": \"Bearer %s\" %(token) }\n```\nIt looks like the ~/.docker/config.json file is specifically when you log into the docker daemon with \"docker login\" - funny enough I've been using Docker for years (meaning having the daemon locally) and never actually logged in. I'm not sure I see the dire need to add a \"sniff\" for this config, because we have taken an approach that doesn't have any dependency or integration with their daemon (just using the back end APIs in the same way) @gmkurtzer do you have thoughts on this? @rbrthogan what would be the pros/benefits of supporting this specific config over just using the environment variables?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304096260|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495739200.168395",
        "date": 1495739200168
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304080820|#693: Registry authentication with .docker/config>",
                "text": ".docker/config.json simply stores your credentials (\n<https://docs.docker.com/engine/reference/commandline/login/>)\n\nSome registries us OAuth so they require you send an authorisation header\nwith the request. <https://docs.docker.com/registry/spec/auth/token/>\n\nAs far as I'm aware docker pull handles all that as long as your registry\nis configured correctly and it just looks in .docker/config.json for\ncredentials. For a user point of view docker pull works just the same.\n\nI'm not sure exactly how you are handling this right now with the\nenvironment variables, so it might be more complicated than I'm aware.\n\nFYI: I'm using the stups framework <https://github.com/zalando-stups,> so\npierone is the registry I'm talking about and has functionality for\nrefreshing my tokens. I don't think that this issue is specific to Pierone\nhowever, should apply to any registry with OAuth flow, but just letting you\nknow for some context.\n\nSorry I can't be more helpful, hopefully someone more knowledgeable will\nchime in.\n\nOn May 25, 2017 6:15 PM, \"Vanessa Sochat\" <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; OAuth is a bit of a different flow, so I'm not sure how it would fit in\n&gt; nicely. Can you point me to more info on the docker config? That definitely\n&gt; seems reasonable to try!\n&gt; \n&gt; —\n&gt; You are receiving this because you authored the thread.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/693#issuecomment-304067226>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AIyaz__GQTEDWRTJ_RfbZXNbIx3H7pFkks5r9bcTgaJpZM4Nmf47>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by rbrthogan on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304080820|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495735617.179289",
        "date": 1495735617179
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304067226|#693: Registry authentication with .docker/config>",
                "text": "OAuth is a bit of a different flow, so I'm not sure how it would fit in nicely. Can you point me to more info on the docker config? That definitely seems reasonable to try!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/693#issuecomment-304067226|#693: Registry authentication with .docker/config>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495732499.318287",
        "date": 1495732499318
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#693 Registry authentication with .docker/config' https://github.com/singularityware/singularity/issues/693 by rbrthogan",
                "text": "As far as I am aware it is currently not possible to authenticate with docker registry that use OAuth authentication, with only basic authentication being supported. Is this correct?\n\nIs it possible to read authorisation tokens from .docker/config file ?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/rbrthogan|rbrthogan>",
                "title": "#693 Registry authentication with .docker/config",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/693",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495724909.192422",
        "date": 1495724909192
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304032071|#670: Problem building RPM from Git source>",
                "text": "It's GPFS.\n\nI can try on the local filesystem, yes.",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304032071|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495724347.021645",
        "date": 1495724347021
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304030533|#670: Problem building RPM from Git source>",
                "text": "```[tru@hpe840g1-1 ~]$ sudo useradd -u 160000000 bigui\n[tru@hpe840g1-1 ~]$ sudo su - biguid\nAttempting to create directory /home/biguid/perl5\n[biguid@hpe840g1-1 ~]$ touch testfile\n[biguid@hpe840g1-1 ~]$ tar --posix -cf test.tar testfile\n[biguid@hpe840g1-1 ~]$ echo $?\n0\n[biguid@hpe840g1-1 ~]$ id\nuid=160000000(biguid) gid=2768(biguid) groups=2768(biguid) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n[biguid@hpe840g1-1 ~]$ rpm -q tar\ntar-1.26-31.el7.x86_64\n```\n\nmaybe not a tar issue, what is the underneath filesystem? Can you work on a local filesystem ie /tmp (etx4|xfs) or /dev/shm (tmpfs)",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-304030533|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495724016.924297",
        "date": 1495724016924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303874050|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "Haha. You know, if the earth were flat we wouldn't have these problems! Oh wait, maybe we would (<http://theflatearthsociety.org/home/>).... But I too digress.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303874050|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495666239.370613",
        "date": 1495666239370
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303872858|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "Timezone? Time? My computer thinks it's 3 hours in the future in one browser but not the other, and I'm ok with this. ;) Non productive comment, yes, but couldn't help myself :wink: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303872858|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665863.315403",
        "date": 1495665863315
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/260#issuecomment-303871020|#260: Implemented ability for config file to specify allowable bind directories>",
                "text": "This won't make it into 2.3, and if we end up rebasing this to 2.4, then we are going to need to rebase and then reimplement. Closing (for now). ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/260#issuecomment-303871020|#260: Implemented ability for config file to specify allowable bind directories>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665259.226190",
        "date": 1495665259226
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/260|#260 Implemented ability for config file to specify allowable bind directories> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/260|#260 Implemented ability for config file to specify allowable bind directories> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665258.226064",
        "date": 1495665258226
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/424|#424 Support for overriding variables inside the container at runtime> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/424|#424 Support for overriding variables inside the container at runtime> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665105.202661",
        "date": 1495665105202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/424#issuecomment-303870566|#424: Support for overriding variables inside the container at runtime>",
                "text": "This has been implemented in the development branch by using the environment variable syntax `SINGULARITYENV_` where everything post string will be transposed into the container. To unset a variable simply make it equal a zero length string.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/424#issuecomment-303870566|#424: Support for overriding variables inside the container at runtime>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665105.202613",
        "date": 1495665105202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/475|#475 Add/opensuse> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/475|#475 Add/opensuse> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665016.187561",
        "date": 1495665016187
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/475#issuecomment-303870270|#475: Add/opensuse>",
                "text": "This has been implemented via #688. Closing.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/475#issuecomment-303870270|#475: Add/opensuse>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495665015.187512",
        "date": 1495665015187
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303864433|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "It really shouldn't but I thought maybe if the timezone files were of different formats that might explain it... But alas, nope. I'm confused and I can't seem to replicate.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303864433|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495663353.902939",
        "date": 1495663353902
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/690|#690 `--contain` help is not very clear> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/690|#690 `--contain` help is not very clear> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495663262.884731",
        "date": 1495663262884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/690#issuecomment-303864077|#690: `--contain` help is not very clear>",
                "text": "This has been merged, thank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/690#issuecomment-303864077|#690: `--contain` help is not very clear>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495663259.884044",
        "date": 1495663259884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/692#issuecomment-303864007|#692: Development - change `--contain` help message>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/692#issuecomment-303864007|#692: Development - change `--contain` help message>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495663239.879778",
        "date": 1495663239879
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/692|#692 Development - change `--contain` help message> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/692|#692 Development - change `--contain` help message> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495663234.878767",
        "date": 1495663234878
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-303860040|#670: Problem building RPM from Git source>",
                "text": "```\n\n*type tar &amp;&amp; rpm -q tar*\n\ntar is /bin/tar\ntar-1.26-29.el7.x86_64\n```",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-303860040|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495662133.655375",
        "date": 1495662133655
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303855552|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "Yes. I am running centos 7.3 in both the host and the container. Does this makes any difference?",
                "pretext": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303855552|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495660936.394477",
        "date": 1495660936394
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303855266|#687: Overlay error with SUSE>",
                "text": "Haha, nice try @crbaird, but those are just the defaults and are configurables! lol\n\nGlad it sounds like it is working out! WAHOO!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303855266|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495660862.377932",
        "date": 1495660862377
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303854451|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "@pescobar I am just curious, are you running the same distribution within the container as on the host? If not, what happens if you do? Is it the same?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303854451|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495660673.334606",
        "date": 1495660673334
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/689#issuecomment-303853644|#689: adding changes to inspect.py>",
                "text": "Looks good, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/689#issuecomment-303853644|#689: adding changes to inspect.py>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495660472.287502",
        "date": 1495660472287
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/689|#689 adding changes to inspect.py> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/689|#689 adding changes to inspect.py> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495660464.285715",
        "date": 1495660464285
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#692 Development' https://github.com/singularityware/singularity/pull/692 by remyd1",
                "text": "Fixes #690 \n\nChanges proposed in this pull request\n\nIt changes the `--contain` help message to:\n```    -c/--contain        This option disables the sharing of filesystems on\n                        your host (e.g. /dev, $HOME and /tmp).\n```\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/remyd1|remyd1>",
                "title": "#692 Development",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/692",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495657320.478215",
        "date": 1495657320478
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/691#issuecomment-303839988|#691: Merge pull request #1 from singularityware/master>",
                "text": "Bad branchs, sorry...",
                "pretext": "[singularityware/singularity] New comment by remyd1 on pull request <https://github.com/singularityware/singularity/pull/691#issuecomment-303839988|#691: Merge pull request #1 from singularityware/master>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495657217.450774",
        "date": 1495657217450
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/691|#691 Merge pull request #1 from singularityware/master> by <https://github.com/remyd1|remyd1>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/691|#691 Merge pull request #1 from singularityware/master> by <https://github.com/remyd1|remyd1>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495657195.444734",
        "date": 1495657195444
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#691 Merge pull request #1 from singularityware/master' https://github.com/singularityware/singularity/pull/691 by remyd1",
                "text": "Merging master\n\nFixes #690 \n\nChanges proposed in this pull request\n\nA new help message for `--contain`\n\n```    -c/--contain        This option disables the sharing of filesystems on\n                        your host (e.g. /dev, $HOME and /tmp).\n```\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/remyd1|remyd1>",
                "title": "#691 Merge pull request #1 from singularityware/master",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/691",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495657171.438388",
        "date": 1495657171438
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#690 `--contain` help is not very clear' https://github.com/singularityware/singularity/issues/690 by remyd1",
                "text": "The help message for `--contain` message is:\n\n```    -c/--contain        This option disables the automatic sharing of writable\n                        filesystems on your host (e.g. $HOME and /tmp).\n```\n\nAlthough _/dev_ and _/proc_ for example are also not shared.\n\nPR will follow.\n\nRémy",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/remyd1|remyd1>",
                "title": "#690 `--contain` help is not very clear",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/690",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495656930.375681",
        "date": 1495656930375
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303827327|#660: compiling singularity on RHEL 5>",
                "text": "on the bright side you still can run CentOS-6 container on CentOS-5",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303827327|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495654184.654781",
        "date": 1495654184654
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303825243|#660: compiling singularity on RHEL 5>",
                "text": "and you can't run a Singularity 2.2 CentOS-7 container created on CentOS-7 on CentOS-5 using singularity 2.1.2 (although you can run the singularity busybox toy model created on Singularity 2.2 on CentOS-7 on the CentOS-5 with singularity 2.1.2)",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303825243|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495653679.523423",
        "date": 1495653679523
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-303818153|#670: Problem building RPM from Git source>",
                "text": "@verdurin can you check where your \"tar\" is from?\n```type tar &amp;&amp; rpm -q tar\n```\nCentOS-7 version is tar-1.26-31.el7.x86_64 with the following changelog from 7.2:\n```\n• Mon Jun 20 2016 Pavel Raiskup <mailto:praiskup@redhat.com|praiskup@redhat.com> - 1.26-31\n• avoid double free in selinux code (rhbz#1347396)\n• Thu Jun 04 2015 Pavel Raiskup <mailto:praiskup@redhat.com|praiskup@redhat.com> - 1.26-30\n• don't mistakenly set default ACLs (#1220890)\n• Fri Jan 24 2014 Daniel Mach <mailto:dmach@redhat.com|dmach@redhat.com> - 2:1.26-29\n• Mass rebuild 2014-01-24\n     ```",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-303818153|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495652023.072102",
        "date": 1495652023072
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303814364|#660: compiling singularity on RHEL 5>",
                "text": "• CentOS-5 is now EOL'ed, as you know.\n• CentOS-5 rpm can not handle CentOS-7 rpms.\n• Even if you could bootstrap a CentOS-7 container, you would faild trying to run it on CentOS-5...\n     ```[tru@sillage singularity]$ ./Centos-7+yum.img\n     WARNING: No Singularity runscript found, launching 'shell'\n     FATAL: kernel too old\n     ```\n• CentOS-5 can only run singularity 2.1.2 afaik (so no docker import etc...)",
                "pretext": "[singularityware/singularity] New comment by truatpasteurdotfr on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-303814364|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495651179.831760",
        "date": 1495651179831
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by crbaird on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303736098|#687: Overlay error with SUSE>",
                "text": "Thanks for looking, @craiggardner. We're building Leap 42.2 containers under SLE SP2 hosts. The issue seems to be related to the fact that our hosts are themselves running stateless warewulf images. Adding overlay to warewulf's bootstrap.conf seems to be getting us further. So we may be able to blame @gmkurtzer after all.",
                "pretext": "[singularityware/singularity] New comment by crbaird on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303736098|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495635144.981812",
        "date": 1495635144981
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303643492|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "```\n[root@login20 pipeline2]# hwclock\nWed 24 May 2017 09:36:41 AM CEST  -0.457992 seconds\n\n[root@login20 pipeline2]# hwclock --localtime\nWed 24 May 2017 07:36:53 AM CEST  -0.391080 seconds\n\n[root@login20 pipeline2]# date\nWed May 24 09:37:06 CEST 2017\n```",
                "pretext": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303643492|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495611483.321253",
        "date": 1495611483321
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#689 adding changes to inspect.py' https://github.com/singularityware/singularity/pull/689 by vsoch",
                "image_url": "https://asciinema.org/a/122013.png",
                "image_width": 423,
                "image_height": 250,
                "image_bytes": 35724,
                "text": "This PR will add more robust parsing of the different environment, labels, and definition files using the new `--inspect` command. A few notes!\n\n• Instead of typing everything out, please preview the functionality here <https://asciinema.org/a/122013?speed=3>\n• I wrote up docs to explain the back end python API, here: <https://github.com/vsoch/singularity/blob/development/libexec/python/README.md#inspect>\n• It looks like there are some merge conflicts that need to be resolved. I did change around some current code, so this was expected.\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#689 adding changes to inspect.py",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/689",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495598334.675029",
        "date": 1495598334675
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by craiggardner on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303602360|#687: Overlay error with SUSE>",
                "text": "@cbaird, I'm certainly not a kernel expert, and I've only been looking into this issue superficially so far.  But as long as you're using SLES12 (any of the releases, from SP0 to SP2), you're using kernel 4.4 that should allow for the overlayfs.  But SLES provides overlayfs as a kernel module.  Possibly the simple solution to this particular problem is to load the kmodule.  I'll lurk some more, see if I can give you more info.  In the mean time, would you please let me know which SLES or openSUSE release you're using?",
                "pretext": "[singularityware/singularity] New comment by craiggardner on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303602360|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495593829.294612",
        "date": 1495593829294
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/683|#683 shell command not working with .tar.gz> by <https://github.com/GodloveD|GodloveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/683|#683 shell command not working with .tar.gz> by <https://github.com/GodloveD|GodloveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495588351.766153",
        "date": 1495588351766
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303588062|#683: shell command not working with .tar.gz>",
                "text": "Thanks for the clarification.  Closing.",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303588062|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495588349.765983",
        "date": 1495588349765
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303558857|#683: shell command not working with .tar.gz>",
                "text": "okay, then the above is perfecto. The example @GodloveD gave shouldn't work. And I added functions in singularity python to do this, so with that next release we can direct users to that.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303558857|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495580692.871915",
        "date": 1495580692871
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303558251|#683: shell command not working with .tar.gz>",
                "text": "I don't have a plan to. an archive of a single file and then compression of that image seems a bit like overkill. ;)",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303558251|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495580617.861971",
        "date": 1495580617861
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303557752|#683: shell command not working with .tar.gz>",
                "text": "Are we going to support .img.tar.gz too?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303557752|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495580570.855381",
        "date": 1495580570855
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-303555820|#677: Tweaks to Development as we test/ go over docs>",
                "text": "Sweet!! Thanks dude :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-303555820|#677: Tweaks to Development as we test/ go over docs>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495580195.800453",
        "date": 1495580195800
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303555673|#687: Overlay error with SUSE>",
                "text": "Yeah, this just doesn't seem to be supported in SLES. I spoke with @craiggardner and he mentioned this is due to security precaution by SuSE. We are still working through this, and we might come with a better solution, but, this won't be an immediate fix. For the time being, overlayfs is an unsupported feature on SLES.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303555673|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495580141.792807",
        "date": 1495580141792
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303554932|#684: singularity exec -e seems broken>",
                "text": "Haha, I am literally LOL'ing right now. Seriously, outloud. People are going to think I'm weird.\n\nThanks everyone!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303554932|#684: singularity exec -e seems broken>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579885.756453",
        "date": 1495579885756
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303554709|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "Hi @pescobar What is the output of:\n\n```$ sudo hwclock\n$ sudo hwclock --localtime\n$ date\n```\n\nReturn on your host system?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303554709|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579804.744655",
        "date": 1495579804744
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/688|#688 Support SLE/openSUSE with zypper> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/688|#688 Support SLE/openSUSE with zypper> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579679.727615",
        "date": 1495579679727
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/688#issuecomment-303554324|#688: Support SLE/openSUSE with zypper>",
                "text": "This looks great, thank you @crbaird!\n\n@vsoch Yes, you are right. At some point we should have tests for each of our examples, but that is a bit hard to do via CI (unless we also spin up a SLES/OpenSuSE environment).\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/688#issuecomment-303554324|#688: Support SLE/openSUSE with zypper>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579676.727134",
        "date": 1495579676727
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303553889|#683: shell command not working with .tar.gz>",
                "text": "We could be more specific about the format of tar.gz that would be expected in the help file... Is this clearer:\n\n```    *.tar*              Tar archives are exploded to a temporary directory and\n                        run within that directory (and cleaned up after). The\n                        contents of the archive is a root file system with root\n                        being in the current directory. Compression suffixes as \n                        '.gz' and '.bz2' are supported.\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303553889|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579505.703295",
        "date": 1495579505703
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/685|#685 help doc states that images are writable by default and that /bin/sh is default shell> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/685|#685 help doc states that images are writable by default and that /bin/sh is default shell> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579351.680786",
        "date": 1495579351680
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/685#issuecomment-303553432|#685: help doc states that images are writable by default and that /bin/sh is default shell>",
                "text": "This was fixed by @vsoch, closing. Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/685#issuecomment-303553432|#685: help doc states that images are writable by default and that /bin/sh is default shell>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579350.680743",
        "date": 1495579350680
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-303553177|#677: Tweaks to Development as we test/ go over docs>",
                "text": "Merged and updated to use the mount backend (instead of action) for inspect.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-303553177|#677: Tweaks to Development as we test/ go over docs>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579268.668636",
        "date": 1495579268668
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/677|#677 Tweaks to Development as we test/ go over docs> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/677|#677 Tweaks to Development as we test/ go over docs> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495579230.663076",
        "date": 1495579230663
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/688#issuecomment-303517142|#688: Support SLE/openSUSE with zypper>",
                "text": "awesome! Hey @gmkurtzer should we have a test proper, or just manual?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/688#issuecomment-303517142|#688: Support SLE/openSUSE with zypper>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495570146.655928",
        "date": 1495570146655
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by crbaird on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303379695|#687: Overlay error with SUSE>",
                "text": "Thanks @vsoch. Zypper is SUSE's yum. I've submitted PR #688  for your consideration. Please let me know how I can help further.",
                "pretext": "[singularityware/singularity] New comment by crbaird on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303379695|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495541841.554218",
        "date": 1495541841554
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/684|#684 singularity exec -e seems broken> by <https://github.com/GodloveD|GodloveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/684|#684 singularity exec -e seems broken> by <https://github.com/GodloveD|GodloveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495534975.449660",
        "date": 1495534975449
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303356397|#684: singularity exec -e seems broken>",
                "text": "Of course!  How silly of me.  Thanks for setting me straight.  Closing.  ",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303356397|#684: singularity exec -e seems broken>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495534971.448991",
        "date": 1495534971448
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/686|#686 add --nv to exec and --run documentation> by <https://github.com/GodloveD|GodloveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/686|#686 add --nv to exec and --run documentation> by <https://github.com/GodloveD|GodloveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495534562.382330",
        "date": 1495534562382
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/686#issuecomment-303354933|#686: add --nv to exec and --run documentation>",
                "text": "I must have been out of date.  Thanks!  closing!",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/686#issuecomment-303354933|#686: add --nv to exec and --run documentation>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495534556.381344",
        "date": 1495534556381
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303352328|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "Hi @gmkurtzer \n\nThis doesn't solve the problem for me.\n\n```\n[root@login20 pipeline2]# ls -la /etc/localtime \nlrwxrwxrwx. 1 root root 35 Mar 13 17:10 /etc/localtime -&gt; ../usr/share/zoneinfo/Europe/Zurich\n\n[root@login20 pipeline2]# date\nTue May 23 12:02:09 CEST 2017\n\n[root@login20 pipeline2]# singularity shell -B /etc/localtime pipeline2.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity.pipeline2.img&gt; date\nTue May 23 10:02:22 CEST 2017\n\nSingularity.pipeline2.img&gt; ls -la /etc/localtime \nlrwxrwxrwx 1 root root 25 Dec 14 14:59 /etc/localtime -&gt; ../usr/share/zoneinfo/UTC\n```\n\nI did the tests with the latest release `singularity-2.2.1` installed in centos7.3 host. The tests are executed as root",
                "pretext": "[singularityware/singularity] New comment by pescobar on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303352328|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495533869.264292",
        "date": 1495533869264
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303305828|#684: singularity exec -e seems broken>",
                "text": "oh my gosh, the cow didn't say anything at all!! :scream: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303305828|#684: singularity exec -e seems broken>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495522042.222342",
        "date": 1495522042222
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by dexter2cz on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303304667|#684: singularity exec -e seems broken>",
                "text": "@GodloveD Your variable is expanded before singularity exec is executed, so you are actually calling:\n`singularity exec -e lolcow.img echo This is Rogue II`\n\nTry this:\n```\n$ export BASE=\"A cow says moo moo\"\n$ singularity exec deb.img bash -c \"echo $BASE\"\nA cow says moo moo\n\n$ singularity exec deb.img bash -c \"echo \\$BASE\"\nA cow says moo moo\n\n$ singularity exec -e deb.img bash -c \"echo \\$BASE\"\n\n```",
                "pretext": "[singularityware/singularity] New comment by dexter2cz on issue <https://github.com/singularityware/singularity/issues/684#issuecomment-303304667|#684: singularity exec -e seems broken>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495521639.174917",
        "date": 1495521639174
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#688 Development' https://github.com/singularityware/singularity/pull/688 by crbaird",
                "text": "Based on PR #475 by @FlyElephant-31\n\nChanges proposed in this pull request\n\n• adds zypper bootstrap capability\n• adds openSUSE example def\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/crbaird|crbaird>",
                "title": "#688 Development",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/688",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495516457.686152",
        "date": 1495516457686
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303291788|#687: Overlay error with SUSE>",
                "text": "hey @crbaird! I'm not familiar with zypper or why the overlayfs might be causing an issue, but it looks like <https://github.com/singularityware/singularity/pull/475> is from January, so I think it would be great if you can contribute to add support for openSUSE and SLE - maybe we can bring @FlyElephant-M31 into discussion and you guys can collaborate for the feature?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/687#issuecomment-303291788|#687: Overlay error with SUSE>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495516153.659248",
        "date": 1495516153659
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#687 Overlay error with SUSE' https://github.com/singularityware/singularity/issues/687 by crbaird",
                "text": "Hi - \n   I'm having a bit of trouble running dev-branch containers under SLES. Bootstrap completes without issue, but exec'ing fails with \"Could not mount Singularity overlay: No such device\". Turning off overlay works just fine. I would like to submit a pull request to enable bootstrapping with zypper for both SLE and openSUSE, but I don't want to step on PR475 's toes. Debug output follows, and any help would be appreciated.\n\nThanks,\nReese\n\n`sms007:/home/ohpc-test/tests/runtimes/singularity # singularity -d exec /tmp/${DISTRO}.img 'echo 2+2 |bc'\nEnabling debugging\nEnding argument loop\nSingularity version: 2.2.99-dist\nExec'ing: /usr/lib/singularity/cli/exec.exec\nEvaluating args: '/tmp/opensuse.img echo 2+2 |bc'\nVERBOSE [U=0,P=22985]      message_init()                            Set messagelevel to: 5\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Initialize configuration file: /etc/singularity/singularity.conf\nDEBUG   [U=0,P=22985]      singularity_config_parse()                Starting parse of configuration file /etc/singularity/singularity.conf\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key allow setuid = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key max loop devices = '256'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key allow pid ns = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key config passwd = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key config group = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key config resolv_conf = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount proc = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount sys = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount dev = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount home = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount tmp = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount hostfs = 'no'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key bind path = '/etc/hosts'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key user bind control = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key enable overlay = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key mount slave = 'yes'\nVERBOSE [U=0,P=22985]      singularity_config_parse()                Got config key sessiondir max size = '16'\nDEBUG   [U=0,P=22985]      singularity_config_parse()                Finished parsing configuration file '/etc/singularity/singularity.conf'\nVERBOSE [U=0,P=22985]      singularity_registry_init()               Initializing Singularity Registry\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'LIBEXECDIR' = '/usr/lib'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(libexecdir, /usr/lib) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'COMMAND' = 'exec'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(COMMAND, exec) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'MESSAGELEVEL' = '5'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(MESSAGELEVEL, 5) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'VERSION' = '2.2.99-dist'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(version, 2.2.99-dist) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'LOCALSTATEDIR' = '/var'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(localstatedir, /var) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'SYSCONFDIR' = '/etc'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(sysconfdir, /etc) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'BINDIR' = '/usr/bin'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(bindir, /usr/bin) = 0\nVERBOSE [U=0,P=22985]      singularity_registry_set()                Adding value to registry: 'IMAGE' = '/tmp/opensuse.img'\nDEBUG   [U=0,P=22985]      singularity_registry_set()                Returning singularity_registry_set(IMAGE, /tmp/opensuse.img) = 0\nDEBUG   [U=0,P=22985]      singularity_registry_get()                Returning NULL on 'HOME'\nDEBUG   [U=0,P=22985]      singularity_registry_get()                Returning NULL on 'TARGET_UID'\nDEBUG   [U=0,P=22985]      singularity_registry_get()                Returning NULL on 'TARGET_GID'\nDEBUG   [U=0,P=22985]      singularity_priv_init()                   Initializing user info\nDEBUG   [U=0,P=22985]      singularity_priv_init()                   Set the calling user's username to: root\nDEBUG   [U=0,P=22985]      singularity_priv_init()                   Marking uinfo structure as ready\nDEBUG   [U=0,P=22985]      singularity_priv_init()                   Obtaining home directory\nVERBOSE [U=0,P=22985]      singularity_priv_init()                   Set home (via getpwuid()) to: /root\nVERBOSE [U=0,P=22985]      singularity_suid_init()                   Running SUID program workflow\nVERBOSE [U=0,P=22985]      singularity_suid_init()                   Checking program has appropriate permissions\nVERBOSE [U=0,P=22985]      singularity_suid_init()                   Checking configuration file is properly owned by root\nVERBOSE [U=0,P=22985]      singularity_suid_init()                   Checking if singularity.conf allows us to run as suid\nDEBUG   [U=0,P=22985]      singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow setuid, yes)\nDEBUG   [U=0,P=22985]      singularity_config_get_value_impl()       Returning configuration value allow setuid='yes'\nDEBUG   [U=0,P=22985]      singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow setuid, yes) = 1\nDEBUG   [U=0,P=22985]      singularity_registry_get()                Returning NULL on 'NOSUID'\nVERBOSE [U=0,P=22985]      singularity_priv_userns()                 Invoking the user namespace\nDEBUG   [U=0,P=22985]      singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow user ns, yes)\nDEBUG   [U=0,P=22985]      singularity_config_get_value_impl()       No configuration entry found for 'allow user ns'; returning default value 'yes'\nDEBUG   [U=0,P=22985]      singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(allow user ns, yes) = 1\nVERBOSE [U=0,P=22985]      singularity_priv_userns()                 Not virtualizing USER namespace: running as root\nDEBUG   [U=0,P=22985]      singularity_priv_userns()                 Returning singularity_priv_init(void)\nDEBUG   [U=0,P=22985]      singularity_priv_drop()                   Running as root, not changing privileges\nDEBUG   [U=0,P=22985]      singularity_runtime_ns()                  Calling: _singularity_runtime_ns_pid()\nDEBUG   [U=0,P=22985]      singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(allow pid ns, yes)\nDEBUG   [U=0,P=22985]      singularity_config_get_value_impl()       Returning configuration value allow pid ns=…",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/crbaird|crbaird>",
                "title": "#687 Overlay error with SUSE",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/687",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495515006.566346",
        "date": 1495515006566
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303282569|#683: shell command not working with .tar.gz>",
                "text": "my inclination was to edit there, but I don't see any evidence that file is actually being called... so I'll just leave this for @gmkurtzer to fix up.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303282569|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495511077.244014",
        "date": 1495511077244
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/686#issuecomment-303281308|#686: add --nv to exec and --run documentation>",
                "text": "are you using the most up to date development? I already see the above in the help for those!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/686#issuecomment-303281308|#686: add --nv to exec and --run documentation>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495510444.194905",
        "date": 1495510444194
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303281047|#683: shell command not working with .tar.gz>",
                "text": "Do you know if we are still using image_handler.sh?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303281047|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495510308.184571",
        "date": 1495510308184
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303278886|#683: shell command not working with .tar.gz>",
                "text": "I think this is because a `.img.tar.gz` != `.tar.gz` let me mess around with some things and see if I can make this work.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/683#issuecomment-303278886|#683: shell command not working with .tar.gz>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495509333.107259",
        "date": 1495509333107
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#686 add --nv to exec and --run documentation' https://github.com/singularityware/singularity/issues/686 by GodloveD",
                "text": "The output of `help singularity shell` contains this helpful line:\n``` -n/--nv             Enable experimental Nvidia support\n```\nThe same option works with `exec` and `run` so this line should appear in `singularity help exec` and `singularity help run` as well.  ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#686 add --nv to exec and --run documentation",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/686",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495508464.035730",
        "date": 1495508464035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#685 help doc states that images are writable by default and that /bin/sh is default shell' https://github.com/singularityware/singularity/issues/685 by GodloveD",
                "text": "The output from `singularity help shell` yields these lines in the description.  \n\n```\nObtain a shell (/bin/sh) within the container image.\n\nnote: When invoking a shell within a container, the container image is\nby default writable.\n```\nNeither of these lines are accurate.  ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#685 help doc states that images are writable by default and that /bin/sh is default shell",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/685",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495508278.019959",
        "date": 1495508278019
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#684 singularity exec -e seems broken' https://github.com/singularityware/singularity/issues/684 by GodloveD",
                "text": "According to `singularity help exec` the `-e` option should clean the environment.  It seems to work with the `shell` command:\n```\n$ export BASE='This is Rogue II'\n\n$ singularity shell -e lolcow.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity lolcow.img:~&gt; echo $BASE\n\nSingularity lolcow.img:~&gt;\n```Perfect.  But when I try the same thing with the `exec` command:\n```\n$ singularity exec -e lolcow.img echo $BASE\nThis is Rogue II\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#684 singularity exec -e seems broken",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/684",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495507626.964184",
        "date": 1495507626964
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#683 shell command not working with .tar.gz' https://github.com/singularityware/singularity/issues/683 by GodloveD",
                "text": "According to `singularity help shell` a user should be able to shell into a `.tar.gz` archive.  But this doesn't seem to be working (using an example image from <https://hub.docker.com/r/godlovedc/lolcow/|`docker://godlovedc/lolcow`>).\n```\n$ tar czvf lolcow.img.tar.gz lolcow.img\nlolcow.img\n\n$ singularity shell lolcow.img.tar.gz\nOpening gzip compressed archive, stand by...\nERROR  : No valid /bin/sh in container\nABORT  : Retval = 255\n\n$ singularity exec lolcow.img ls /bin/sh\n/bin/sh\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#683 shell command not working with .tar.gz",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/683",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495506652.880208",
        "date": 1495506652880
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303241266|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "text": "It seems if I bind the file `/etc/localtime` into the container at runtime (`singularity shell -B /etc/localtime ...`) Things seem to work fine. Can you verify?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/682#issuecomment-303241266|#682: apps executed inside singularity container doesn't use the same timezone as the host>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495493422.475884",
        "date": 1495493422475
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-303183348|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "Ahhhh, nevermind. I see how you are doing it now. Sorry, I was totally off on that!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-303183348|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495478001.203542",
        "date": 1495478001203
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#682 apps executed inside singularity container doesn't use the same timezone as the host' https://github.com/singularityware/singularity/issues/682 by pescobar",
                "text": "while testing singularity I have noticed that a tool executed inside a container is not using the same timezone as the host. \n\nThis is the date in the host machine where singularity is executed\n```[escobar@login20 benchmark-pipeline1]$ timedatectl \n      Local time: Mon 2017-05-22 17:46:27 CEST\n  Universal time: Mon 2017-05-22 15:46:27 UTC\n        RTC time: Mon 2017-05-22 15:46:27\n       Time zone: Europe/Zurich (CEST, +0200)\n     NTP enabled: yes\nNTP synchronized: yes\n```\n\nAnd these are the generated logs from the tool executed inside the container:\n\n```May 22 15:31:54 ..... started STAR run\nMay 22 15:31:54 ... starting to generate Genome files\nMay 22 15:32:53 ... starting to sort Suffix Array. This may take a long time...\nMay 22 15:33:07 ... sorting Suffix Array chunks and saving them to disk...\nMay 22 15:46:58 ... loading chunks from disk, packing SA...\nMay 22 15:47:56 ... finished generating suffix array\nMay 22 15:47:56 ... generating Suffix Array index\n```\n\nIt seems inside the container it's using UTC instead of the host timezone. Is there any solution so the container uses the host's timezone?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/pescobar|pescobar>",
                "title": "#682 apps executed inside singularity container doesn't use the same timezone as the host",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/682",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495468279.639356",
        "date": 1495468279639
    },
    {
        "user": "frederik",
        "text": "<@U5FFKV6M6|frederik> has joined the channel",
        "type": "message",
        "subtype": "channel_join",
        "ts": "1495434821.897488",
        "date": 1495434821897
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/679|#679 singularity pull: incorrect image size> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/679|#679 singularity pull: incorrect image size> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495428527.356229",
        "date": 1495428527356
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302998095|#679: singularity pull: incorrect image size>",
                "image_url": "https://asciinema.org/a/121684.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 89123,
                "text": "Hey @chrisfilo - I'm sorry you are having trouble, I have never built images with circle so I'm not sure how to advise, but I can give you the method I use to check the manifest. Here is what you want to do:\n\n<https://asciinema.org/a/121684?speed=3>\n\nthe instructions for copy paste are in the comments there, and I'll include them here as well:\n\nYou can use singularity python functions to check your manifest. First download it\n```  git clone -b development https://www.github.com/singularityware/singularity.git\n  cd singularity/libexec/python```\nFrom the singularity/libexec/python folder do:\n```  ipython\n  from docker.api import *\n  client = DockerApiConnection(image=\"poldracklab/fmriprep:0.4.4\") \n  manifest = client.get_manifest()\n\n  # Then look at the version \n  manifest['schemaVersion']\n\n  # if you want to force version 1.0\n  manifest = client.get_manifest(old_version=True)```\nThere are definitely ways that we could get the size of the layers automatically, but we need a solution that is quick, meaning it really has to come from the manifest. We are taking an approach that, in due time, *most* images will support (eg, version 1 manifests will likely not endure forever) and it's reasonable that, in the short term, the user that has a version 1 can supply a `--size`. I hope this is also reasonable to you - I can tell you that it took a lot of convincing to get the docker pull command to begin with, so might be good to not push the boundary on what you are insisting come with it. At least without some break :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302998095|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495428247.336653",
        "date": 1495428247336
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302996076|#679: singularity pull: incorrect image size>",
                "text": "I switched to docker 1.10 in the latest release, but the size is still estimated incorrectly:\n\n```[newuser@a55dc27d5a87 ~]$ singularity pull docker://poldracklab/fmriprep:0.4.4\nInitializing Singularity image subsystem\nOpening image file: fmriprep-0.4.4.img\nCreating 768MiB image\nBinding image to loop\nCreating file system within image\ndone\nImage is done: fmriprep-0.4.4.img\nDocker image path: index.docker.io/poldracklab/fmriprep:0.4.4\nCache folder set to /home/newuser/.singularity/docker\n```\nAre there other strategies for estimating image size we could explore? Maybe a sum of the size of all layers?",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302996076|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495426957.245240",
        "date": 1495426957245
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302953365|#677: Tweaks to Development as we test/ go over docs>",
                "image_url": "https://asciinema.org/a/121620.png",
                "image_width": 609,
                "image_height": 250,
                "image_bytes": 32763,
                "text": "I just added the &lt;|inspect&gt; command to the PR to hopefully address #651 \n\n<https://asciinema.org/a/121620?speed=2>\n\nI first was going to make labels.json default, but this wouldn't work for older images,so I made default the runscript, and the user can specify `--labels` if he/she wants that. This seems like a good start, and maybe in the future we can add an inspect to show environment variables too?",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302953365|#677: Tweaks to Development as we test/ go over docs>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495390689.258899",
        "date": 1495390689258
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-302953181|#651: singularity inspect>",
                "image_url": "https://asciinema.org/a/121620.png",
                "image_width": 609,
                "image_height": 250,
                "image_bytes": 32763,
                "text": "hey @gmkurtzer I just gave `inspect` a go:\n\n<https://asciinema.org/a/121620?speed=2>\n\nI made the default to show the runscript to support all oldest versions of Singularity, but the user can also ask for `--labels`. Should we add in a command to show some subset of environment too?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-302953181|#651: singularity inspect>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495390513.250458",
        "date": 1495390513250
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302949123|#674: (How to) Access local file during bootstrap?>",
                "text": "hey @nielsaka did you have any more questions for this issue? Are there any points we overlooked or forgot to help with?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302949123|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495386112.048860",
        "date": 1495386112048
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302914088|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "I'm not sure what you mean by being able to do this in native shell - you would always need to get an image's manifest with stuff that would be hard to do in shell, so unless you want to completely re-implement the python stuff in shell, I don't see how you could do it all in native shell... :/",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302914088|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495340011.387046",
        "date": 1495340011387
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302914001|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "Did you see my development branch? Yes I implemented it. see the link above!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302914001|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495339934.384539",
        "date": 1495339934384
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302912902|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "Oh, that's an interesting idea, but I should be able to do this in native shell without spawning out another process. Do you have this done, if so can I check out the commit?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302912902|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495337724.317022",
        "date": 1495337724317
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-302912746|#681: singularity supported uris discussion>",
                "text": "Oh, yeah... I think I broke some of those. Great catch!\n\nI will take care of these before the release in the shell code (`import.exec`)... That is, unless someone else wants to take a stab at it?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/681#issuecomment-302912746|#681: singularity supported uris discussion>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495337478.310118",
        "date": 1495337478310
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#681 singularity supported uris discussion' https://github.com/singularityware/singularity/issues/681 by vsoch",
                "text": "@GodloveDC brought up a good issue, that our old docs showed examples of imports that don't seem to work:\n\n```\n    $ gunzip -c debian.tar.gz | singularity import /tmp/Debian\n    $ singularity import /tmp/Debian.img debian.tar.gz\n    $ singularity import /tmp/Debian.img file://debian.tar.gz\n    $ singularity import /tmp/Debian.img <http://foo.com/debian.tar.gz>\n    $ singularity import /tmp/Debian.img docker://ubuntu:latest\n\n```\n\nwe should have discussion about what kinds of uri's we want supported for imports vs. images themselves, and if having file:// is really necessary. For the meantime, I removed the lines from the above that we are sure do not work.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#681 singularity supported uris discussion",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/681",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495334054.208659",
        "date": 1495334054208
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302909156|#677: Tweaks to Development as we test/ go over docs>",
                "text": "This recent change will move the calculation of size into python, and will close <https://github.com/singularityware/singularity/issues/680>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302909156|#677: Tweaks to Development as we test/ go over docs>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495330251.090357",
        "date": 1495330251090
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302908248|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "text": "let me give a go at handling this in python, one sec",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/680#issuecomment-302908248|#680: bc is a dependency of pull.exe (when pulling from Docker Hub)>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495328578.035920",
        "date": 1495328578035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#680 bc is a dependency of pull.exe (when pulling from Docker Hub) ' https://github.com/singularityware/singularity/issues/680 by GodloveD",
                "text": "When trying top pull an image from Docker Hub I get the following error.\n```ubuntu@ip-172-31-0-48:~$ singularity pull docker://tensorflow/tensorflow\n/usr/local/libexec/singularity/cli/pull.exec: line 144: bc: command not found\nERROR  : Could not convert container size to integer\nABORT  : Retval = 255\n```\nInstalling `bc` fixes the error.  But this could easily trip people up.  ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/GodloveD|GodloveD>",
                "title": "#680 bc is a dependency of pull.exe (when pulling from Docker Hub) ",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/680",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495328316.026093",
        "date": 1495328316026
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302902958|#677: Tweaks to Development as we test/ go over docs>",
                "image_url": "https://asciinema.org/a/121536.png",
                "image_width": 586,
                "image_height": 250,
                "image_bytes": 38046,
                "text": "These recent updates will fix the bug with authentication with private registries, <https://asciinema.org/a/121536|shown here> and detailed <https://groups.google.com/a/lbl.gov/forum/#!topic/singularity/uerNrdpDnH8|here>. The repo in question (if you have permissions to view) is <https://hub.docker.com/r/c1t4r/usecases/|here>.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/677#issuecomment-302902958|#677: Tweaks to Development as we test/ go over docs>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495319665.743499",
        "date": 1495319665743
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302844605|#679: singularity pull: incorrect image size>",
                "text": "I haven't had personal experience working with building on Circle, so I was just going from their docs. I was going off of the docs that I posted in <https://github.com/poldracklab/mriqc/issues/499|this issue>, specifically here: <https://docs.docker.com/registry/compatibility/#registry-v23> it says\n\n&gt; &gt; Manifest Push with Docker 1.9 and Older\n&gt; &gt; The Docker Engine will construct a Schema 1 manifest which the registry will persist to disk.\n&gt; &gt; When the manifest is pulled by digest or tag with any docker version, a Schema 1 manifest will be returned.\nI would try shelling into a circle build, and seeing if you are able to verify that the image is built with Docker 1.10 or later, and then view the manifest on the instance (before pushing). Then you can at least check that the issue is with the build on circle, and it's not some transfer error (and the hub is returning old data). ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302844605|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495246559.861542",
        "date": 1495246559861
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302844403|#679: singularity pull: incorrect image size>",
                "text": "Do you know which Docker version I need to use to create V2 manifest? Or is\nit a distinction between images pushed to Docker Hub vs images built on\nDocker Hub.\n\nBuilding images on CI has some serious advantages: you version your images\nwith tags and make sure you only push an image to Docker Hub if the tests\npass. We have 20-30 images built this way. It would be good to figure out a\nway for this to work.\n\nOn Fri, May 19, 2017 at 6:58 PM, Vanessa Sochat <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; @chrisfilo <https://github.com/chrisfilo> has a more rare use case, at\n&gt; least in the scientific community, of actually doing tests and continuous\n&gt; integration for building images (most just build from Github --&gt; Docker\n&gt; Hub). An image of this latter kind will be built with the version 2.0 spec\n&gt; (Chris limitation is something to do with needing to build with a docker\n&gt; that works on Circle) so I would think that this estimation would work for\n&gt; most images. So in this case, it comes down to whether we want to take a\n&gt; chance at estimating size (and given how big these images get, we would\n&gt; likely get it wrong) or just abort. I think it would be a safer thing to\n&gt; assume that, given that we can't estimate the size, we would probably get\n&gt; it wrong, and abort. However, the user should be able to get around this by\n&gt; giving the command a size. For example, in this case we would do like:\n&gt; \n&gt; singularity pull docker://fatty/donutsareyummy\n&gt; WARNING: Cannot detect size from version 1.0 manifest.\n&gt; ERROR: Aborting creation and import of docker layers. Please use version 2.0 manifest or specify image size.\n&gt; \n&gt; and then the user can either build the image to have a version 2.0\n&gt; manifest, or do this:\n&gt; \n&gt; singularity pull --size 10000000 docker://fatty/donutsareyummy\n&gt; Image created fatty-donutsareyummy.img\n&gt; ./fatty-donutsareyummy.img\n&gt; NOMNOMNOM !!\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/679#issuecomment-302843861>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AAOkp_QjyU81tRJ6iyQLoZMA1Cc3-qpOks5r7kjQgaJpZM4NhJq9>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302844403|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495246294.851270",
        "date": 1495246294851
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302843948|#676: singularity.spec %description is outdated>",
                "text": "I already changed this in my little development PR - it's in the singularity.spec.init file --&gt; <https://github.com/singularityware/singularity/pull/677/files#diff-b3fb1fb02c192e0be6fee00045236e40>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302843948|#676: singularity.spec %description is outdated>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495245661.824165",
        "date": 1495245661824
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302843861|#679: singularity pull: incorrect image size>",
                "text": "@chrisfilo has a more rare use case, at least in the scientific community, of actually doing tests and continuous integration for building images (most just build from Github --&gt; Docker Hub). An image of this latter kind will be built with the version 2.0 spec (Chris limitation is something to do with needing to build with a docker that works on Circle) so I would think that this estimation would work for most images. So in this case, it comes down to whether we want to take a chance at estimating size (and given how big these images get, we would likely get it wrong) or just abort. I think it would be a safer thing to assume that, given that we can't estimate the size, we would probably get it wrong, and abort.  However, the user should be able to get around this by giving the command a size. For example, in this case we would do like:\n\n```singularity pull docker://fatty/donutsareyummy\nWARNING: Cannot detect size from version 1.0 manifest.\nERROR: Aborting creation and import of docker layers. Please use version 2.0 manifest or specify image size.\n```\n\nand then the user can either build the image to have a version 2.0 manifest, or do this:\n\n```singularity pull --size 10000000 docker://fatty/donutsareyummy\nImage created fatty-donutsareyummy.img\n./fatty-donutsareyummy.img\nNOMNOMNOM !!\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302843861|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495245520.817458",
        "date": 1495245520817
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302843106|#676: singularity.spec %description is outdated>",
                "text": "Where do we have that documented? That was in Singualrity v1.x, but I don't have %description doing anything anymore.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302843106|#676: singularity.spec %description is outdated>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495244578.775989",
        "date": 1495244578775
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302842947|#679: singularity pull: incorrect image size>",
                "text": "BTW, I just added a warning message when it can't obtain the size as expected. I'm thinking of just bombing out with a suitable error message as that is better then a failed pull/import.\n\nYou know... I still don't like the `pull` for docker images! &lt;seals lips&gt;",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302842947|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495244385.767077",
        "date": 1495244385767
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302842838|#679: singularity pull: incorrect image size>",
                "text": "hey @chrisfilo ! Just testing this now, I still see a version 1 manifest:\n\n```\nfrom docker.api import *\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS not defined (None)\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as None/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/vanessa/.singularity\nVERBOSE2 SINGULARITY_ENVBASE found as None/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as None/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /home/vanessa/Documents/Dropbox/Code/singularity/singularity/libexec/python\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as None/.singularity.d/.layers\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\n\nclient = DockerApiConnection(image='poldracklab/fmriprep:0.4.3')\nmanifest = client.get_manifest()\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: poldracklab\nVERBOSE Repo Name: fmriprep\nVERBOSE Repo Tag: 0.4.3\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/poldracklab/fmriprep/tags/list>\nDEBUG GET <https://index.docker.io/v2/poldracklab/fmriprep/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:poldracklab/fmriprep:pull>\nDEBUG Headers found: Content-Type,Authorization,Accept\n```\nas an example, here is the same function to an image with a version 2 manifest:\n\n```\nclient=DockerApiConnection(image='ubuntu:latest')\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: library\nVERBOSE Repo Name: ubuntu\nVERBOSE Repo Tag: latest\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/library/ubuntu/tags/list>\nDEBUG GET <https://index.docker.io/v2/library/ubuntu/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:library/ubuntu:pull>\nclDEBUG Headers found: Content-Type,Authorization,Accept\neit\nIn [8]: manifest=client.get_manifest()\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/library/ubuntu/manifests/latest>\nDEBUG GET <https://index.docker.io/v2/library/ubuntu/manifests/latest>\n\nmanifest.keys()\ndict_keys(['schemaVersion', 'layers', 'mediaType', 'config'])\n\nmanifest['schemaVersion']\n```\nlet me know if you want me to try any other images!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/679#issuecomment-302842838|#679: singularity pull: incorrect image size>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495244276.762566",
        "date": 1495244276762
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#679 singularity pull: incorrect image size' https://github.com/singularityware/singularity/issues/679 by chrisfilo",
                "text": "```[newuser@2204cd237e7a ~]$ singularity pull docker://poldracklab/fmriprep:0.4.3\nInitializing Singularity image subsystem\nOpening image file: fmriprep-0.4.3.img\nCreating 768MiB image\nBinding image to loop\nCreating file system within image\ndone\nImage is done: fmriprep-0.4.3.img\nDocker image path: index.docker.io/poldracklab/fmriprep:0.4.3\n```\nThis is followed by lots of \"no space left on device\" errors due to too small initial .img file - this docker image is over 10Gb in size.\n\nPS This image has been created with Docker &gt;1.9.1 so it should have the relevant metadata.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisfilo|chrisfilo>",
                "title": "#679 singularity pull: incorrect image size",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/679",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495243281.714950",
        "date": 1495243281714
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302834548|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "yeah so I (very stupidly) just tried this again - my computer crashed again! At least that's reliable. I'm afraid I'm unable to help, other than to strongly encourage you to come back from the dark side, @chrisfilo  :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302834548|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495237614.360929",
        "date": 1495237614360
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302832960|#678: Running cached Docker Hub images can be slow>",
                "text": "and for docs... <https://github.com/singularityware/singularityware.github.io/blob/docs/2.3/pages/docs/user-docs/docs-pull.md|wish granted!>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302832960|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495236680.281963",
        "date": 1495236680281
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302832004|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "That is very weird... I don't get the error ever. :/",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302832004|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495236161.233632",
        "date": 1495236161233
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302829420|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "@gmkurtzer I don't think this is related to forking or sub-threading. I get the same behaviour with the ubuntu image and bash:\n\n```\n[newuser@f63a1d2ec534 ~]$ Singularity: Singularity: cleanup (U=500,P=5276)&gt; Failed removing file: /tmp/.singularity-runtime.OYoSarbj/ubuntu/root\n\nSingularity: Singularity: cleanup (U=500,P=5276)&gt; Could not remove directory /tmp/.singularity-runtime.OYoSarbj: Directory not empty\n\nSingularity: Singularity: cleanup (U=500,P=5276)&gt; Retval = 255\n\n[newuser@f63a1d2ec534 ~]$ ls -al /tmp/.singularity-runtime.OYoSarbj/ubuntu/root\ntotal 16\ndrwx------  2 newuser newuser 4096 May 10 16:23 .\ndrwx------ 21 newuser newuser 4096 May 19 22:59 ..\n-rw-r--r--  1 newuser newuser 3106 Oct 22  2015 .bashrc\n-rw-r--r--  1 newuser newuser  148 Aug 17  2015 .profile\n```",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302829420|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495234865.103563",
        "date": 1495234865103
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302826960|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "Does this program fork or run sub-threads? I think what is happening is that the foreground process returns, but there is still a thread running that hasn't been properly reaped or waited on which is still in that directory.\n\nIf you use an image, this shouldn't be an issue anymore, but I don't think I can solve this within singularity.\n\nThe reason it seemed to go away before was because in the previous commit I broke the cleanup thread. ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302826960|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495233617.964091",
        "date": 1495233617964
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302825243|#678: Running cached Docker Hub images can be slow>",
                "text": "you would do:\n\n```docker pull bids/mriqc\n```\n\nand that should create and import into `bids-mriqc.img`",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302825243|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495232826.869102",
        "date": 1495232826869
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302822520|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "I've tried with 54694d32ba911e1a4e677f15ee3e631217884e64 unfortunately the bug regressed:\n\n```\n[newuser@35853316e77a ~]$ singularity run docker://bids/mriqc:0.9.3\nDocker image path: index.docker.io/bids/mriqc:0.9.3\nCache folder set to /home/newuser/.singularity/docker\n[25/25] |===================================| 100.0%\nCreating container runtime...\nSingularity: action-suid (U=500,P=19)&gt; USER=newuser, IMAGE='mriqc:0.9.3', COMMAND='run'\n\nFontconfig warning: ignoring C.UTF-8: not a valid language tag\nusage: mriqc [-h] [-v]\n             [--participant_label [PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]]\n             [-m [{T1w,bold,T2w} [{T1w,bold,T2w} ...]]] [-s SESSION_ID]\n             [-r RUN_ID] [--nthreads NTHREADS] [--n_procs N_PROCS]\n             [--mem_gb MEM_GB] [--write-graph] [--dry-run]\n             [--use-plugin USE_PLUGIN] [--ica] [--testing] [--profile]\n             [--hmc-afni] [--hmc-fsl] [-f] [--fft-spikes-detector]\n             [-w WORK_DIR] [--report-dir REPORT_DIR] [--verbose-reports]\n             [--ants-nthreads ANTS_NTHREADS] [--ants-settings ANTS_SETTINGS]\n             [--deoblique] [--despike] [--start-idx START_IDX]\n             [--stop-idx STOP_IDX] [--correct-slice-timing]\n             bids_dir output_dir {participant,group} [{participant,group} ...]\nmriqc: error: the following arguments are required: bids_dir, output_dir, analysis_level\n[newuser@35853316e77a ~]$ Singularity: Singularity: cleanup (U=500,P=100482)&gt; Failed removing file: /tmp/.singularity-runtime.ZGDDenKs/bids/mriqc:0.9.3/libwebp-0.5.2-linux-x86-64/include/webp\n\nSingularity: Singularity: cleanup (U=500,P=100482)&gt; Could not remove directory /tmp/.singularity-runtime.ZGDDenKs: Directory not empty\n\nSingularity: Singularity: cleanup (U=500,P=100482)&gt; Retval = 255\n\n[newuser@35853316e77a ~]$ ls -al /tmp/.singularity-runtime.ZGDDenKs/bids/mriqc:0.9.3/libwebp-0.5.2-linux-x86-64/include/webp\ntotal 108\ndrwx------ 2 newuser newuser  4096 Dec 16 00:10 .\ndrwx------ 3 newuser newuser  4096 Dec 16 00:10 ..\n-rw-r--r-- 1 newuser newuser 23112 Dec 16 00:10 decode.h\n-rw-r--r-- 1 newuser newuser 15235 Dec 16 00:10 demux.h\n-rw-r--r-- 1 newuser newuser 26278 Dec 16 00:10 encode.h\n-rw-r--r-- 1 newuser newuser 22885 Dec 16 00:10 mux.h\n-rw-r--r-- 1 newuser newuser  3149 Dec 16 00:10 mux_types.h\n-rw-r--r-- 1 newuser newuser  1687 Dec 16 00:10 types.h\n```",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302822520|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495231686.721586",
        "date": 1495231686721
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302821130|#678: Running cached Docker Hub images can be slow>",
                "text": "Thanks for your feedback:\n1) This was the third time this command was executed. First one was slower (download), the second one had roughly the same runtime as the third time.\n2) I think cache is being reused since redownloading does not seem to happen.\n3) This is being run inside Docker (on windows using Hyper-V), all three executions were done inside the same docker container instance to preserve cache.\n4) I don't think storing cache on a mounted volume would help. Quite the opposite - docker host/container transfer times would slow it down.\n\nIf it's just the docker layers being exploded that is happening when I do subsequent `singularity run` I'm not sure how can this be made faster without sacrificing too much space.\n\nWhat is the command for creating singularity image directly from Docker Hub? Is the documentation for 2.3 up somewhere?",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302821130|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495231191.647909",
        "date": 1495231191647
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302813885|#678: Running cached Docker Hub images can be slow>",
                "text": "I (think?) @chrisfilo is either running the singularity image from within a Docker container (and the Singularity image is bootstrapping a docker image) to support running it on his workstation (Windows?) or it's the case he is running these jobs en masse (maybe also in Docker) and given bringing up a new Docker image, doesn't want to have to download/change permissions every single time? But if the second were true.. then probably he could run docker and doesn't need Singularity... ok I'm going to go remove my brain from this loopy matrix now... ! :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302813885|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495228830.261975",
        "date": 1495228830261
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302813045|#678: Running cached Docker Hub images can be slow>",
                "text": "In theory yes, but if we kept all of the docker layers expanded it would quickly take over everything. Plus, the exploded files that comprise the runtime container must exist on a local file system ends up ruling out any place in $HOME.\n\nIf you want it to be faster, you should create a Singularity image out of the docker container and run via the image. The docker action integration is mostly used as a parlor trick or for one time test/usage as it doesn't create persistent containers (and thus after each use they are cleaned).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302813045|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495228548.209238",
        "date": 1495228548209
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302812960|#678: Running cached Docker Hub images can be slow>",
                "text": "If you are running this from within a docker image, maybe you can try to set the `SINGULARITY_CACHE` directory to be something shared on the host (and mounted on the container) so that new images that are spawned find the already existing layers. We pick this up as a <https://github.com/singularityware/singularity/blob/development/libexec/python/defaults.py#L107|variable in the environment!>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302812960|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495228518.203808",
        "date": 1495228518203
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302812553|#678: Running cached Docker Hub images can be slow>",
                "text": "The images with permissions changed are saved to the cache, and we do both download and changes with multirprocessing. Was this the first time you ran it?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/678#issuecomment-302812553|#678: Running cached Docker Hub images can be slow>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495228389.180122",
        "date": 1495228389180
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302811133|#674: (How to) Access local file during bootstrap?>",
                "text": "I agree, `%install` would be more specific. Build sort of gets at the entire process that the user is running, so I think I like `%install`, but no promises that my opinion won't change on this. Given that `%post` is likely to change, it probably makes sense to make the files commands general to be \"before build/setup/post/install/whatever\" happens, and then \"after\" so I would advocate for either `%files-pre` and `%files-post`, unless we plan to add some different paradigm for which pre and post doesn't make sense, in which case we should talk about other ways that a user could add a file (at a specific point) in the build/install process).",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302811133|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227927.094796",
        "date": 1495227927094
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#678 Running cached Docker Hub images can be slow' https://github.com/singularityware/singularity/issues/678 by chrisfilo",
                "text": "```\n[newuser@de835965be28 ~]$ time singularity run docker://poldracklab/mriqc:0.9.3\nDocker image path: index.docker.io/poldracklab/mriqc:0.9.3\nCache folder set to /home/newuser/.singularity/docker\nCreating container runtime...\nSingularity: action-suid (U=500,P=70247)&gt; USER=newuser, IMAGE='mriqc:0.9.3', COMMAND='run'\n\nusage: mriqc [-h] [-v]\n             [--participant_label [PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]]\n             [-m [{T1w,bold,T2w} [{T1w,bold,T2w} ...]]] [-s SESSION_ID]\n             [-r RUN_ID] [--nthreads NTHREADS] [--n_procs N_PROCS]\n             [--mem_gb MEM_GB] [--write-graph] [--dry-run]\n             [--use-plugin USE_PLUGIN] [--ica] [--testing] [--profile]\n             [--hmc-afni] [--hmc-fsl] [-f] [--fft-spikes-detector]\n             [-w WORK_DIR] [--report-dir REPORT_DIR] [--verbose-reports]\n             [--ants-nthreads ANTS_NTHREADS] [--ants-settings ANTS_SETTINGS]\n             [--deoblique] [--despike] [--start-idx START_IDX]\n             [--stop-idx STOP_IDX] [--correct-slice-timing]\n             bids_dir output_dir {participant,group} [{participant,group} ...]\nmriqc: error: the following arguments are required: bids_dir, output_dir, analysis_level\n\nreal    2m33.440s\nuser    1m3.050s\nsys     0m35.140s\n```\nThe same command works almost instantaneous when using Docker. I wonder if some time can be saved by  saving the tarred layers with all of the file permission changed instead of performing the file permission changes each time an image is being run.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisfilo|chrisfilo>",
                "title": "#678 Running cached Docker Hub images can be slow",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/678",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227788.067608",
        "date": 1495227788067
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810636|#674: (How to) Access local file during bootstrap?>",
                "text": "And actually, in 2.4, I am planning on changing `%post` to something that makes more sense as to what it is actually doing... Perhaps something like `%install` or `%build` or something. `%post` is misleading in that what is it coming after? Who knows? I used to know, but we added more things that come after, so post isn't really post anymore. Very confusing. lol",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810636|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227778.065673",
        "date": 1495227778065
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810256|#674: (How to) Access local file during bootstrap?>",
                "text": "and @nielsaka thanks for the kind words!! I will fix those docs immediately!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810256|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227653.039959",
        "date": 1495227653039
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810092|#674: (How to) Access local file during bootstrap?>",
                "text": "And now that I'm thinking of it, I sort of like `%files-pre` a bit better (it's shorter) and better sandwiches the `%post` section , so I'll leave the specific name up to you.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302810092|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227600.027713",
        "date": 1495227600027
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/662|#662 ERROR: Could not remove run directory (...) Directory not empty> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/662|#662 ERROR: Could not remove run directory (...) Directory not empty> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227556.018804",
        "date": 1495227556018
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302809847|#674: (How to) Access local file during bootstrap?>",
                "text": "@gmkurtzer - I would advocate for %files-setup so it's clear that it corresponds to setup. And then we would support `%files` as we do now, moving files after boostrap (because it's more likely the location where they are being moved to doesn't exist). Given that we support `%files-pre`, we should also support `%files-post`, because if I stumbled on a spec file and saw:\n\n```\n%files-pre\n\n%post\n\n%files-post\n```\n\nthat would make a lot of sense to me, whereas this should work:\n\n```\n%files-pre\n\n%post\n\n%files\n```\n\nalthough it is less clear. And the current spec we have now is also still reasonable, but it should default to be `%files-post`\n\n```\n%files\n\n*happens after bootstrap*\n\n```\n\nAnd even if a user does something like this, we would still want it to work, and `%files` and `%files-post` should be treated equally:\n\n```\n%files\nbla bla\n\n%files-post\nbla2 bla2\n```\n\nThis is probably why Docker has taken a line by line approach (well along with the layers thing) - it gives the user more control over order of operations. I sort of like the way we do it, because we don't want to have to parse the %post section line by line looking for something like %file.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302809847|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227527.012815",
        "date": 1495227527012
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302809789|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "@chrisfilo I apologize, I realized I broke something else after I committed what you tested. Would you mind running the test one more time please?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302809789|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227509.009065",
        "date": 1495227509009
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/662|#662 ERROR: Could not remove run directory (...) Directory not empty> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/662|#662 ERROR: Could not remove run directory (...) Directory not empty> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227416.990233",
        "date": 1495227416990
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302809366|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "I just tested with the latest commit and this issue does not show up anymore. Thanks for the fix @gmkurtzer!",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302809366|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227415.990164",
        "date": 1495227415990
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302808647|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "I was about to comment! @gmkurtzer is doing some changes to handle these temporary directories, so another test would be good :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302808647|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495227173.940529",
        "date": 1495227173940
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302806621|#667: [Feautre_Request] Call shub from a def file>",
                "text": "I think your easiest case (for now) would be to harness docker - make a\nbase that is a docker image, and then use that as a base for additional\napps. This is functionality that is currently supported, and it's pretty\ntrivial to write a Dockerfile and have it built on the hub Eg:\n\nBoostrap: docker\n&gt; From zane/base-image\n&gt; \n&gt; %post\n&gt; git clone https:www.github.com/zane/another-module\n&gt; cd another-module\n&gt; ... etc\nThe original image would be cached as docker layers, and easily reused\nwithout needing to build.\n\nOn Fri, May 19, 2017 at 4:37 PM, Goldstone, Robin J. <mailto:goldstone1@llnl.gov|goldstone1@llnl.gov>\nwrote:\n\n&gt; Vanessa – I agree there are a number of interesting things to consider\n&gt; along the lines of composability.  But that aside, I am wondering if there\n&gt; is a more straightforward solution for Zane.  If the issue is the time it\n&gt; takes to rebuild the base image, why not just write a def file that creates\n&gt; an OS image and nothing else.  Then just make multiple copies of that image\n&gt; then make corresponding def files that add in your app install in the %post\n&gt; section.\n&gt; \n&gt; Example: create “base.def” file that defines a basic OS install. Something\n&gt; like this:\n&gt; BootStrap: debootstrap\n&gt; OSVersion: trusty\n&gt; MirrorURL: <http://us.archive.ubuntu.com/ubuntu/>\n&gt; \n&gt; Create the container and boostrap it:\n&gt; sudo singularity create –s 1024 base.img\n&gt; sudo singularity bootstrap base.img base.def\n&gt; \n&gt; When it is done, just make a copy of it:\n&gt; cp base.img app1.img\n&gt; \n&gt; Now create app1.def with appropriate %post section to install app1 e.g.\n&gt; BootStrap: debootstrap\n&gt; OSVersion: trusty\n&gt; MirrorURL: <http://us.archive.ubuntu.com/ubuntu/>\n&gt; \n&gt; %post\n&gt;     cd /tmp\n&gt;     git clone <https://github.com/open-mpi/ompi.git>\n&gt;     etc…\n&gt; \n&gt; Even though you still have the code in there to bootstrap the OS,\n&gt; Singularity will find the OS is already there so it will just execute the\n&gt; %post section.  You can make multiple copies of base.img and create\n&gt; corresponding def files to customize them differently in this way.\n&gt; \n&gt; Is that the kind of thing you were looking for?\n&gt; \n&gt; Regards,\n&gt; Robin G.\n&gt; \n&gt; From: vanessa s <mailto:vsochat@gmail.com|vsochat@gmail.com>\n&gt; Reply-To: \"singularity@lbl.gov\" <mailto:singularity@lbl.gov|singularity@lbl.gov>\n&gt; Date: Friday, May 19, 2017 at 12:39 PM\n&gt; To: singularityware/singularity &lt;reply+000c6cf252b5a099476d2b20f987c3\n&gt; 2e441469693a60e79b92cf000000011536fbfb92a169ce0d98c136@reply.github.com&gt;,\n&gt; \"singularity@lbl.gov\" <mailto:singularity@lbl.gov|singularity@lbl.gov>\n&gt; Cc: singularityware/singularity <mailto:singularity@noreply.github.com|singularity@noreply.github.com>, Comment\n&gt; <mailto:comment@noreply.github.com|comment@noreply.github.com>\n&gt; Subject: [Singularity] Re: [singularityware/singularity] [Feautre_Request]\n&gt; Call shub from a def file (#667)\n&gt; \n&gt; Hi Zane,\n&gt; \n&gt; This is a very important question, but also a complicated one.  I'm\n&gt; including this to the list so others can think about it too. When we start\n&gt; to talk about importing other images, this asks the question \"what\n&gt; encompasses an image?\" The Docker approach is to have images composed of\n&gt; layers, which isn't an approach best fit for science because it means that\n&gt; you can potentially have containers with missing dependencies, and you\n&gt; cannot trust that you image A is exactly what the author designed it to be.\n&gt; It's not the sparsest solution, but with a Singularity image being \"an\n&gt; entire thing\" we can ensure that, years down the road, if you find a\n&gt; container, you can do a checksum with some unique id provided by the author\n&gt; and verify it is exactly what it is supposed to be. This isn't a problem of\n&gt; \"how do we implement this\" - there are several options there, none of which\n&gt; are technically hard. We could take an approach and move things around like\n&gt; tar balls (essentially what Docker does, and what we do to support it). But\n&gt; having containers depend on other containers starts to get messy very\n&gt; quickly, because it moves away from our current model toward something that\n&gt; looks more like Docker.\n&gt; \n&gt; However, this is a really important question, not only because we would\n&gt; want to have some ability to put pieces together like legos in a larger\n&gt; orchestration, but also because the design schema that we come up with is\n&gt; going to drive how people build their scientific tools. If we provide\n&gt; support for a model that allows overlays and combining things, that\n&gt; encourages less ideal practice where things are more likely to break\n&gt; because of dependencies. The approach I believe we are going to test first\n&gt; (not with 2.3, of course, but maybe 2.4) is to think of how a lot of this\n&gt; functionality could be addressed with simple mounting. You could think of\n&gt; this like a data containers, meaning that you can define how two containers\n&gt; are mounted together, but each in isolation is complete to do what it was\n&gt; intended to do. This would support software that could be mounted and run\n&gt; with this sort of fashion, but again, the more fingers that the software\n&gt; needs to stick into the other container, the harder it would get.\n&gt; \n&gt; Again from the reproducibility standpoint, with the current landscape we\n&gt; are going to start to see a LOT of containers. Very soon, if not already.\n&gt; For example, when you browse around and find 150 containers called\n&gt; tensorflow, how do you know which one is best? How are they\n&gt; different/similar? my thinking is that our first task should be efforts to\n&gt; organize and compare these containers. We can then have easy ways to\n&gt; reliably say \"we know this group is similar in having tensorflow for\n&gt; versions x,y,z, and now we can run to compare how this variable (version)\n&gt; influences our result.\" and then we can make recommendations for different\n&gt; configurations of things and application goals, and (hopefully) narrow down\n&gt; the landscape to point out the better images of the bunch. This is\n&gt; different from a Docker/Github approach, where obviously the entities would\n&gt; want to incentivize you to make as many containers/repos as possible.\n&gt; \n&gt; Anyway - trust that this question is very important. I don't think the\n&gt; right thing is to just dump containers into one another, but some other\n&gt; solution that supports and encourages reproducibility, while not breaking\n&gt; trust in provided containers.\n&gt; \n&gt; Best,\n&gt; \n&gt; Vanessa\n&gt; \n&gt; On Fri, May 19, 2017 at 2:31 PM, Zane Westover <mailto:notifications@github.com|notifications@github.com>\n&gt; wrote:\n&gt; Is there a way to have a LOCAL base singularity image to use as the\n&gt; starting point of others? For instance:\n&gt; BootStrap: singularity\n&gt; image_path: xxx # Path and filename if Image_id on local host\n&gt; I have several containers that I want to build that all have a large file\n&gt; base in common. It takes HOURS to build the base image and would only be a\n&gt; few minutes to do the last piece for each specific application. Instead,\n&gt; currently my definition files are all 98% identical except for the fact\n&gt; that they are inevitably 0% identical.\n&gt; —\n&gt; You are receiving this because you commented.\n&gt; Reply to this email directly, view it on GitHub, or mute the thread.\n&gt; \n&gt; --\n&gt; Vanessa Villamia Sochat\n&gt; Stanford University '16\n&gt; \n&gt; *(603) 321-0676*\n&gt; \n&gt; You received this message because you are subscribed to the Google Groups\n&gt; \"singularity\" group.\n&gt; To unsubscribe from this group and stop receiving emails from it, send an\n&gt; email to singularity+unsubscribe@lbl.gov.\n&gt; \n&gt; --\n&gt; You received this message because you are subscribed to the Google Groups\n&gt; \"singularity\" group.\n&gt; To …",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302806621|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495226589.820006",
        "date": 1495226589820
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302805463|#667: [Feautre_Request] Call shub from a def file>",
                "text": "Vanessa – I agree there are a number of interesting things to consider along the lines of composability.  But that aside, I am wondering if there is a more straightforward solution for Zane.  If the issue is the time it takes to rebuild the base image, why not just write a def file that creates an OS image and nothing else.  Then just make multiple copies of that image then make corresponding def files that add in your app install in the %post section.\n\nExample: create “base.def” file that defines a basic OS install. Something like this:\nBootStrap: debootstrap\nOSVersion: trusty\nMirrorURL: <http://us.archive.ubuntu.com/ubuntu/>\n\nCreate the container and boostrap it:\nsudo singularity create –s 1024 base.img\nsudo singularity bootstrap base.img base.def\n\nWhen it is done, just make a copy of it:\ncp base.img app1.img\n\nNow create app1.def with appropriate %post section to install app1 e.g.\nBootStrap: debootstrap\nOSVersion: trusty\nMirrorURL: <http://us.archive.ubuntu.com/ubuntu/>\n\n%post\n    cd /tmp\n    git clone <https://github.com/open-mpi/ompi.git>\n    etc…\n\nEven though you still have the code in there to bootstrap the OS, Singularity will find the OS is already there so it will just execute the %post section.  You can make multiple copies of base.img and create corresponding def files to customize them differently in this way.\n\nIs that the kind of thing you were looking for?\n\nRegards,\nRobin G.\n\nFrom: vanessa s <mailto:vsochat@gmail.com|vsochat@gmail.com>\nReply-To: \"singularity@lbl.gov\" <mailto:singularity@lbl.gov|singularity@lbl.gov>\nDate: Friday, May 19, 2017 at 12:39 PM\nTo: singularityware/singularity <mailto:reply@reply.github.com|reply@reply.github.com>, \"singularity@lbl.gov\" <mailto:singularity@lbl.gov|singularity@lbl.gov>\nCc: singularityware/singularity <mailto:singularity@noreply.github.com|singularity@noreply.github.com>, Comment <mailto:comment@noreply.github.com|comment@noreply.github.com>\nSubject: [Singularity] Re: [singularityware/singularity] [Feautre_Request] Call shub from a def file (#667)\n\nHi Zane, \n\nThis is a very important question, but also a complicated one.  I'm including this to the list so others can think about it too. When we start to talk about importing other images, this asks the question \"what encompasses an image?\" The Docker approach is to have images composed of layers, which isn't an approach best fit for science because it means that you can potentially have containers with missing dependencies, and you cannot trust that you image A is exactly what the author designed it to be. It's not the sparsest solution, but with a Singularity image being \"an entire thing\" we can ensure that, years down the road, if you find a container, you can do a checksum with some unique id provided by the author and verify it is exactly what it is supposed to be. This isn't a problem of \"how do we implement this\" - there are several options there, none of which are technically hard. We could take an approach and move things around like tar balls (essentially what Docker does, and what we do to support it). But having containers depend on other containers starts to get messy very quickly, because it moves away from our current model toward something that looks more like Docker.\n\nHowever, this is a really important question, not only because we would want to have some ability to put pieces together like legos in a larger orchestration, but also because the design schema that we come up with is going to drive how people build their scientific tools. If we provide support for a model that allows overlays and combining things, that encourages less ideal practice where things are more likely to break because of dependencies. The approach I believe we are going to test first (not with 2.3, of course, but maybe 2.4) is to think of how a lot of this functionality could be addressed with simple mounting. You could think of this like a data containers, meaning that you can define how two containers are mounted together, but each in isolation is complete to do what it was intended to do. This would support software that could be mounted and run with this sort of fashion, but again, the more fingers that the software needs to stick into the other container, the harder it would get.\n\nAgain from the reproducibility standpoint, with the current landscape we are going to start to see a LOT of containers. Very soon, if not already. For example, when you browse around and find 150 containers called tensorflow, how do you know which one is best? How are they different/similar? my thinking is that our first task should be efforts to organize and compare these containers. We can then have easy ways to reliably say \"we know this group is similar in having tensorflow for versions x,y,z, and now we can run to compare how this variable (version) influences our result.\" and then we can make recommendations for different configurations of things and application goals, and (hopefully) narrow down the landscape to point out the better images of the bunch. This is different from a Docker/Github approach, where obviously the entities would want to incentivize you to make as many containers/repos as possible.\n \nAnyway - trust that this question is very important. I don't think the right thing is to just dump containers into one another, but some other solution that supports and encourages reproducibility, while not breaking trust in provided containers.\n\nBest,\n\nVanessa\n\nOn Fri, May 19, 2017 at 2:31 PM, Zane Westover <mailto:notifications@github.com|notifications@github.com> wrote:\nIs there a way to have a LOCAL base singularity image to use as the starting point of others? For instance:\nBootStrap: singularity\nimage_path: xxx # Path and filename if Image_id on local host\nI have several containers that I want to build that all have a large file base in common. It takes HOURS to build the base image and would only be a few minutes to do the last piece for each specific application. Instead, currently my definition files are all 98% identical except for the fact that they are inevitably 0% identical.\n—\nYou are receiving this because you commented.\nReply to this email directly, view it on GitHub, or mute the thread.\n\n-- \nVanessa Villamia Sochat\nStanford University '16\n\n*(603) 321-0676*\n\nYou received this message because you are subscribed to the Google Groups \"singularity\" group.\nTo unsubscribe from this group and stop receiving emails from it, send an email to singularity+unsubscribe@lbl.gov.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302805463|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495226251.748253",
        "date": 1495226251748
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#677 Tweaks to Development as we test/ go over docs' https://github.com/singularityware/singularity/pull/677 by vsoch",
                "text": "I'll be updating this PR with small changes to descriptions, docs, etc. You can merge at any time (and I'll open again) or just leave and merge with one swift FWOOP.\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#677 Tweaks to Development as we test/ go over docs",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/677",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495226226.742911",
        "date": 1495226226742
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302793456|#667: [Feautre_Request] Call shub from a def file>",
                "text": "Hi Zane,\n\nThis is a very important question, but also a complicated one.  I'm\nincluding this to the list so others can think about it too. When we start\nto talk about importing other images, this asks the question \"what\nencompasses an image?\" The Docker approach is to have images composed of\nlayers, which isn't an approach best fit for science because it means that\nyou can potentially have containers with missing dependencies, and you\ncannot trust that you image A is exactly what the author designed it to be.\nIt's not the sparsest solution, but with a Singularity image being \"an\nentire thing\" we can ensure that, years down the road, if you find a\ncontainer, you can do a checksum with some unique id provided by the author\nand verify it is exactly what it is supposed to be. This isn't a problem of\n\"how do we implement this\" - there are several options there, none of which\nare technically hard. We could take an approach and move things around like\ntar balls (essentially what Docker does, and what we do to support it). But\nhaving containers depend on other containers starts to get messy very\nquickly, because it moves away from our current model toward something that\nlooks more like Docker.\n\nHowever, this is a really important question, not only because we would\nwant to have some ability to put pieces together like legos in a larger\norchestration, but also because the design schema that we come up with is\ngoing to drive how people build their scientific tools. If we provide\nsupport for a model that allows overlays and combining things, that\nencourages less ideal practice where things are more likely to break\nbecause of dependencies. The approach I believe we are going to test first\n(not with 2.3, of course, but maybe 2.4) is to think of how a lot of this\nfunctionality could be addressed with simple mounting. You could think of\nthis like a data containers, meaning that you can define how two containers\nare mounted together, but each in isolation is complete to do what it was\nintended to do. This would support software that could be mounted and run\nwith this sort of fashion, but again, the more fingers that the software\nneeds to stick into the other container, the harder it would get.\n\nAgain from the reproducibility standpoint, with the current landscape we\nare going to start to see a LOT of containers. Very soon, if not already.\nFor example, when you browse around and find 150 containers called\ntensorflow, how do you know which one is best? How are they\ndifferent/similar? my thinking is that our first task should be efforts to\norganize and compare these containers. We can then have easy ways to\nreliably say \"we know this group is similar in having tensorflow for\nversions x,y,z, and now we can run to compare how this variable (version)\ninfluences our result.\" and then we can make recommendations for different\nconfigurations of things and application goals, and (hopefully) narrow down\nthe landscape to point out the better images of the bunch. This is\ndifferent from a Docker/Github approach, where obviously the entities would\nwant to incentivize you to make as many containers/repos as possible.\n\nAnyway - trust that this question is very important. I don't think the\nright thing is to just dump containers into one another, but some other\nsolution that supports and encourages reproducibility, while not breaking\ntrust in provided containers.\n\nBest,\n\nVanessa\n\nOn Fri, May 19, 2017 at 2:31 PM, Zane Westover <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; Is there a way to have a LOCAL base singularity image to use as the\n&gt; starting point of others? For instance:\n&gt; BootStrap: singularity\n&gt; image_path: xxx # Path and filename if Image_id on local host\n&gt; \n&gt; I have several containers that I want to build that all have a large file\n&gt; base in common. It takes HOURS to build the base image and would only be a\n&gt; few minutes to do the last piece for each specific application. Instead,\n&gt; currently my definition files are all 98% identical except for the fact\n&gt; that they are inevitably 0% identical.\n&gt; \n&gt; —\n&gt; You are receiving this because you commented.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/667#issuecomment-302778205>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AAxs8g0wjw6Z8dfVkYwNdAml6dMWnWPaks5r7d_7gaJpZM4NYhvj>\n&gt; .\n-- \nVanessa Villamia Sochat\nStanford University '16\n(603) 321-0676",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302793456|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495222778.981374",
        "date": 1495222778981
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302790311|#676: singularity.spec %description is outdated>",
                "text": "How about like:\n\n```%description\nSingularity provides functionality to make portable\ncontainers that can be used across host environments.\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302790311|#676: singularity.spec %description is outdated>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495221895.779568",
        "date": 1495221895779
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302789370|#676: singularity.spec %description is outdated>",
                "text": "yeah I'll put in a change for a PR, right now it reads:\n```%description\nSingularity provides functionality to build the smallest most minimal\npossible containers, and running those containers as single application\nenvironments.\n```\nand I think what it's (sort of) getting at is a desire of modularity for function of containers.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/676#issuecomment-302789370|#676: singularity.spec %description is outdated>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495221615.716343",
        "date": 1495221615716
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#676 singularity.spec %description is outdated' https://github.com/singularityware/singularity/issues/676 by DrDaveD",
                "text": "The %description in singularity.spec talks about building the smallest most minimal possible containers, but that's not much like the current description of what singularity is (on the <http://singularity.lbl.gov|website>).",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DrDaveD|DrDaveD>",
                "title": "#676 singularity.spec %description is outdated",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/676",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495221335.653523",
        "date": 1495221335653
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302785607|#667: [Feautre_Request] Call shub from a def file>",
                "text": "I think it can be implemented. \n\n&gt; How?: \nMoun both conatiners, the &lt;source&gt;  img as read only, and  then doing a `cp` or a `sync` &lt;source&gt; &lt;destination&gt; and then start the normal bootstrap workflow. \n#\n\nI think this could be a feature for 2.4, since 2.3 is lock down.",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302785607|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495220617.485298",
        "date": 1495220617485
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by zanewestover on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302778205|#667: [Feautre_Request] Call shub from a def file>",
                "text": "Is there a way to have a LOCAL base singularity image to use as the starting point of others? For instance:\nBootStrap: singularity\nimage_path: xxx  # Path and filename if Image_id on local host\n\nI have several containers that I want to build that all have a large file base in common. It takes HOURS to build the base image and would only be a few minutes to do the last piece for each specific application. Instead, currently my definition files are all 98% identical except for the fact that they are inevitably 0% identical.",
                "pretext": "[singularityware/singularity] New comment by zanewestover on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-302778205|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495218683.991063",
        "date": 1495218683991
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302757580|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "@chrisfilo,\n\nWhen you ran it earlier there was an error output like:\n\n```Failed removing file: /tmp/.singularity-runtime.e9QOcU07/container/bids/mriqc:0.9.3/libwebp-0.5.2-linux-x86-64/include/webp\n```\n\nCan you rerun it again, and if you get that error can you send me the `ls -l` output of that file please?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-302757580|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495213336.600836",
        "date": 1495213336600
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302724843|#674: (How to) Access local file during bootstrap?>",
                "text": "Hi @nielsaka,\n\nHrmm, you bring up an interesting point regarding the order of things. It seems we can either create a `%files-pre` (or something like that) section that will copy files before running `%post`, or you can use the `%setup` section as that runs from your current directory and then install into the path located at `$SINGULARITY_ROOTFS`.\n\nYou mentioned that you \"resorted to using `%section` and copying folders to `/tmp/`\". Can you elaborate on what you did there?\n\nBTW, you are right about the environment, good catch!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302724843|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495205646.467241",
        "date": 1495205646467
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302688390|#674: (How to) Access local file during bootstrap?>",
                "text": "Thanks for the feedback! I checked the documentation, installed the development version and tried the `%files` section. The files were copied, but only after the `%post` section had been executed. So installing a local package this way didn't work out. I resorted to using `%section` and copying files and folders to `/tmp/`.\nAlso, since `cp` is mentioned I thought at first I could use options, such as `-R /folder/on/host /folder/in/container/`, but that is not supported apparently.\n\n One minor thing regarding the docs, the local `href`s don't work (but that might be due to viewing the file on github?) and in the <https://github.com/singularityware/singularityware.github.io/blob/docs/2.3/pages/docs/user-docs/docs-environment-metadata.md#environment|environment docs> I was only able to make `VARIABLE_NAME=VARIABLE_VALUE` work, not `VARIABLE_NAME VARIABLE_VALUE`.\n\n(and btw, thank you for this amazing project!)",
                "pretext": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302688390|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495196530.200818",
        "date": 1495196530200
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/675#issuecomment-302599963|#675: fixing printing of metadata to labels.json to be pretty>",
                "text": "Wahoo! Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/675#issuecomment-302599963|#675: fixing printing of metadata to labels.json to be pretty>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164774.005921",
        "date": 1495164774005
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/675|#675 fixing printing of metadata to labels.json to be pretty> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/675|#675 fixing printing of metadata to labels.json to be pretty> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164765.005256",
        "date": 1495164765005
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/622#issuecomment-302599752|#622: mentioning googlegroup/gitter/slack/whatever in readme>",
                "text": "I think it's safe to close this - I don't think we are going to use Gitter anytime soon, unless it gets significantly better. Sorry @antonkulaga :(",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/622#issuecomment-302599752|#622: mentioning googlegroup/gitter/slack/whatever in readme>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164655.996313",
        "date": 1495164655996
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/622|#622 mentioning googlegroup/gitter/slack/whatever in readme> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/622|#622 mentioning googlegroup/gitter/slack/whatever in readme> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164654.996277",
        "date": 1495164654996
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/675#issuecomment-302599674|#675: fixing printing of metadata to labels.json to be pretty>",
                "text": "and to be specific, we can then address <https://github.com/singularityware/singularity/issues/651>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/675#issuecomment-302599674|#675: fixing printing of metadata to labels.json to be pretty>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164608.992403",
        "date": 1495164608992
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#675 fixing printing of metadata to labels.json to be pretty' https://github.com/singularityware/singularity/pull/675 by vsoch",
                "text": "This is a quick fix so the metadata returned in the .tar.gz is pretty! It goes from this:\n\n```{\"org.label-schema.version\":\"0.9.3\",\"org.label-schema.schema-version\":\"1.0\",\"org.label-schema.vcs-ref\":\"de60ff0\",\"org.label-schema.url\":\"http://mriqc.readthedocs.io\",\"org.label-schema.vcs-url\":\"https://github.com/poldracklab/mriqc\",\"org.label-schema.build-date\":\"2017-04-23T18:10:33Z\",\"org.label-schema.name\":\"MRIQC\",\"org.label-schema.description\":\"MRIQC-NR-IQMs(no-referenceImageQualityMetrics)forMRI\"}\n```\n\nto this:\n\n```vanessa@vanessa-ThinkPad-T460s:~/Desktop$ singularity exec docker.img cat /.singularity.d/labels.json\n{\n    \"org.label-schema.version\": \"0.9.3\",\n    \"org.label-schema.schema-version\": \"1.0\",\n    \"org.label-schema.vcs-ref\": \"de60ff0\",\n    \"org.label-schema.url\": \"http://mriqc.readthedocs.io\",\n    \"org.label-schema.vcs-url\": \"https://github.com/poldracklab/mriqc\",\n    \"org.label-schema.build-date\": \"2017-04-23T18:10:33Z\",\n    \"org.label-schema.name\": \"MRIQC\",\n    \"org.label-schema.description\": \"MRIQC  - NR-IQMs (no-reference Image Quality Metrics) for MRI\"\n}\n```\nThe reason was because we don't use the write_json function from sutils (because we are just generating the json string to be used in another function). This was an oversight on my part.\n\nand thus we can support an \"inspect\" command that isn't fugly :)\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#675 fixing printing of metadata to labels.json to be pretty",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/675",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495164554.987933",
        "date": 1495164554987
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302563562|#672: Adds an option to override tmp directory>",
                "text": "So binding the home directory isn't quite as simple unless overlay is enabled. But the `-H` option is needed because it also updates the `/etc/passwd` and `/etc/group` files on demand so credentials and paths are taken care of properly.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302563562|#672: Adds an option to override tmp directory>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495148136.325817",
        "date": 1495148136325
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302561851|#670: Problem building RPM from Git source>",
                "text": "I can't replicate this. I've tried even creating users with gigantic UIDs on Centos7.3, but no issues found. This seems like a tar or autotools error and not Singularity, but I can't tell for sure.\n\nSorry.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302561851|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495147509.236334",
        "date": 1495147509236
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302560435|#673: exec breaks with image directory in current development branch>",
                "text": "Fantastic!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302560435|#673: exec breaks with image directory in current development branch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495147014.164114",
        "date": 1495147014164
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302517614|#674: (How to) Access local file during bootstrap?>",
                "text": "just worked on the docs for bootstrap for 2.3, do you want to <https://github.com/singularityware/singularityware.github.io/blob/docs/2.3/pages/docs/user-docs/docs-bootstrap-image.md#bootstrapping-a-container|check them out here> and let me know if anything is unclear or should be better hashed out? Thank you!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302517614|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495135849.715664",
        "date": 1495135849715
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302467181|#674: (How to) Access local file during bootstrap?>",
                "text": "hey @nielsaka ! Yes we definitely need to have the docs updated - I am working on those for 2.3 now (with details about your question) and will post soon. The short answer is that for 2.3 (development branch) you can add files during bootstrap in a `%fies` section, eg:\n\n```%files\n/path/on/host/file /path/in/container/file\n```\n\nThis will use your standard copy (`cp`) command so the same general `&lt;source&gt;` and `&lt;destination&gt;` applies. For the older Singularity, you will need to copy files from the host to the variable `$SINGULARITY_ROOTFS` in the `%setup` section.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302467181|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495125877.912513",
        "date": 1495125877912
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/673|#673 exec breaks with image directory in current development branch> by <https://github.com/DrDaveD|DrDaveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/673|#673 exec breaks with image directory in current development branch> by <https://github.com/DrDaveD|DrDaveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495124993.658569",
        "date": 1495124993658
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302463215|#673: exec breaks with image directory in current development branch>",
                "text": "Yes, that fixed it.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302463215|#673: exec breaks with image directory in current development branch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495124993.658542",
        "date": 1495124993658
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302391547|#674: (How to) Access local file during bootstrap?>",
                "text": "Or, to put it differently, is it best practice to copy all the required local files to the host system's `/tmp/` before bootstrapping and then `cd /tmp/` during bootstrap?",
                "pretext": "[singularityware/singularity] New comment by nielsaka on issue <https://github.com/singularityware/singularity/issues/674#issuecomment-302391547|#674: (How to) Access local file during bootstrap?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495111163.505195",
        "date": 1495111163505
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#674 (How to) Access local file during bootstrap?' https://github.com/singularityware/singularity/issues/674 by nielsaka",
                "text": "Hi, I hope this is the right place to ask this question.\n\nI would like to use a local file on the host system to install something inside the container during the bootstrap process. However, I am having difficulties finding the file. I am not sure which parts of the host system are accessible during bootstrap. I gathered `/tmp/` is, but is the working directory of the bootstrap definition file or the directory where I run `singularity bootstrap` from as well?\n\nAs a workaround, I currently have a script that creates the container, bootstraps it and then runs\n\n`sudo singularity exec --writable -B $PWD:/home/my_dir container.img command`\n\nwhere `command` will do the installation using the files in the current working directory and `/home/my_dir` has been created in the container during bootstrapping.\n\nIt would be nicer, though, to have it mentioned in the bootstrap definition file and having it all take place during bootstrapping. I couldn't find anything in this regard in the documentation or in other issues. I am happy to be pointed at right place to look, though, of course.\n\nThanks!",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/nielsaka|nielsaka>",
                "title": "#674 (How to) Access local file during bootstrap?",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/674",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495110437.362889",
        "date": 1495110437362
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302367507|#670: Problem building RPM from Git source>",
                "text": "```$ touch tartest\n$ tar --posix -cf test.tar tartest\n$ echo $?\n0\n```",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302367507|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495103880.307716",
        "date": 1495103880307
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hcraT on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302339514|#672: Adds an option to override tmp directory>",
                "text": "Wouldn't make sense to apply the same reasoning to the home directory (I mean\nto move the home binding after user bind and so remove the `-H` option)?\n\nWhat about `--contain_dir` or `--contain_path` or `--contain_prefix` in this way the link between `--contain` and this option becomes obvious.",
                "pretext": "[singularityware/singularity] New comment by hcraT on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302339514|#672: Adds an option to override tmp directory>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495096746.999011",
        "date": 1495096746999
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302280139|#408: Image generation should provide hash>",
                "text": "lol, let's wait for my paper to get reviewed and then pick up back on this ;O) The issue shall remain open!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302280139|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495073039.399627",
        "date": 1495073039399
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302271539|#408: Image generation should provide hash>",
                "text": "Yep, exactly @vsoch! We need to still discuss how best to determine image equality. It is a good question and it needs answering!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302271539|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495069197.011955",
        "date": 1495069197011
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302267222|#408: Image generation should provide hash>",
                "text": "yes! This is exactly why I made these different levels of reproducibility- you can generate the \"same\" image twice and it will be determined to be equal on the level REPLICATE but not IDENTICAL.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302267222|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495067215.808204",
        "date": 1495067215808
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302262016|#408: Image generation should provide hash>",
                "text": "Even if a single file's timestamp changes inside a container, the container itself will have an entirely different hash/checksum. And things like timestamps will indeed change from one bootstrap to another, even with the same bootstrap recipe!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302262016|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495064948.545882",
        "date": 1495064948545
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302261389|#408: Image generation should provide hash>",
                "text": "Okay, so I did some more experiments, and my bad, the checksum does changes, but it changes even though I build the same image (with the same content) again;;; I guess either way `shasum` against an image file is not suitable for image comparison. I guess this is the reason why you said the container comparison is an interesting topic.",
                "pretext": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302261389|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495064686.513941",
        "date": 1495064686513
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302259178|#670: Problem building RPM from Git source>",
                "text": "Can you try with the `--posix` tar flag. For example, this is something from RH's bugzilla, can you test and see if they have a regression:\n\n```  # useradd -u 160000000 biguid\n  # su biguid\n  $ cd /tmp\n  $ touch testfile\n  $ tar --posix -cf test.tar testfile\n  tar: value 16777216 out of uid_t range 0..2097151\n  tar: Exiting with failure status due to previous errors\n  $ echo $?\n  2\n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302259178|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495063763.398324",
        "date": 1495063763398
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302258255|#670: Problem building RPM from Git source>",
                "text": "Yes other tar operations are fine.",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302258255|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495063377.349397",
        "date": 1495063377349
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302253402|#670: Problem building RPM from Git source>",
                "text": "Can you tar up other things on that system?\n\nIt is very strange that your UID is falling outside of what tar thinks is the top of uid_t (as Centos7 uses a 64bit UID space not 32bit as tar seems to report).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302253402|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495061544.098382",
        "date": 1495061544098
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302251095|#670: Problem building RPM from Git source>",
                "text": "My UID on that cluster is `30003777`.",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302251095|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495060736.977923",
        "date": 1495060736977
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302239462|#408: Image generation should provide hash>",
                "text": "It seems to be working for me too:\n\ngmk@gmkdev2:~/git/singularity$ shasum /tmp/centos.img\ndc73d6a9aad0b21c1a5972d0a49b7392213934f6  /tmp/centos.img\ngmk@gmkdev2:~/git/singularity$ sudo singularity exec -w /tmp/centos.img sh\n-c \"echo '' &gt;&gt; /singularity\"\ngmk@gmkdev2:~/git/singularity$ shasum /tmp/centos.img\n65eccc149e6f565ba85509fb35c1e0737cb7bb09  /tmp/centos.img\n\nGreg\n\nOn Wed, May 17, 2017 at 12:45 PM, Vanessa Sochat <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; oh I see! Are you making changes to the actual runscript or the link to\n&gt; it? For example, the runscript is actually at /.singularity.d/runscript\n&gt; and the /singularity is just a link. Can you give me something to\n&gt; reproduce your error? What I did is:\n&gt; \n&gt; sha1sum coffee.img\n&gt; 3f6a212a0fc6d018457be2e6f3c8e8197abbbb43  coffee.img\n&gt; \n&gt; _Here I am making a trivial change to runscript_\n&gt; \n&gt; sudo singularity shell --writable coffee.img\n&gt; Singularity: Invoking an interactive shell within container...\n&gt; \n&gt; Singularity coffee.img:~&gt; vim /.singularity.d/runscript\n&gt; Singularity coffee.img:~&gt; exit\n&gt; \n&gt; exit\n&gt; \n&gt; _And now sha1sum is different_\n&gt; \n&gt; vanessa@vanessa-ThinkPad-T460s:~/Desktop$ sha1sum coffee.img b4cf583b5f3a6bf357d095137e7b5a7c2aa27244  coffee.img\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/408#issuecomment-302211324>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/ANVkxaVo8UZyOybZDxIM7kND6C7S_zTqks5r605kgaJpZM4LJI9t>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302239462|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495057199.349410",
        "date": 1495057199349
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302238108|#673: exec breaks with image directory in current development branch>",
                "text": "OK, I think I got it now. Can you again test the latest development branch and let me know?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302238108|#673: exec breaks with image directory in current development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495056832.273201",
        "date": 1495056832273
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302211324|#408: Image generation should provide hash>",
                "text": "oh I see! Are you making changes to the actual runscript or the link to it? For example, the runscript is actually at `/.singularity.d/runscript` and the `/singularity` is just a link. Can you give me something to reproduce your error? What I did is:\n\n```\nsha1sum coffee.img \n3f6a212a0fc6d018457be2e6f3c8e8197abbbb43  coffee.img\n\n*Here I am making a trivial change to runscript*\n\nsudo singularity shell --writable coffee.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity coffee.img:~&gt; vim /.singularity.d/runscript \nSingularity coffee.img:~&gt; exit\n\nexit\n\n*And now sha1sum is different*\n\nvanessa@vanessa-ThinkPad-T460s:~/Desktop$ sha1sum coffee.img b4cf583b5f3a6bf357d095137e7b5a7c2aa27244  coffee.img\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302211324|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495050339.623036",
        "date": 1495050339623
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302209630|#408: Image generation should provide hash>",
                "text": "Right, as a matter of fact, I didn't actually expect Singularity to do anything special. I was just using Linux sha1sum/md5sum to get the checksum of the final Singularity image. I'm wondering why the checksum didn't change even though I did make some changes to the image... ",
                "pretext": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302209630|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495050061.551099",
        "date": 1495050061551
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302206020|#408: Image generation should provide hash>",
                "text": "To be more clear, this is not implemented. I don't know what @gmkurtzer is using to generate a unique id, or other, but it isn't related to any of the methods I discussed or showed above.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302206020|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495049471.397351",
        "date": 1495049471397
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302194947|#408: Image generation should provide hash>",
                "text": "Same image, same layers, everything *exactly* the same except one thing: I added 9 additional characters in the `%runscript` section. e.g. from `Rscript xyz.R` to `Rscript --vanilla xyz.R`\nI naturally (naively) thought that this would generate a different hash, but it didn't. How come?",
                "pretext": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302194947|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495047360.824511",
        "date": 1495047360824
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302188305|#673: exec breaks with image directory in current development branch>",
                "text": "Ok, the variant with -C now ends with\n```LOG     [U=3382,P=2]       main()                                    USER=dwd, IMAGE='osgvo:el6', COMMAND='exec'\nDEBUG   [U=3382,P=2]       action_exec()                             Checking for: /.singularity.d/actions/exec\nDEBUG   [U=3382,P=2]       action_exec()                             Checking for: /.exec\nWARNING [U=3382,P=2]       action_exec()                             Container does not have an exec helper script, calling 'bash' directly\nERROR   [U=3382,P=2]       action_exec()                             Failed to execvp() bash: No such file or directory\nABORT   [U=3382,P=2]       action_exec()                             Retval = 255\n```\n\nAh, so the issue appears to be the search PATH.  If I ask for /bin/bash instead of bash, it works.\n\nInterestingly, the shorter command without -C now works (if I add 'bash' to the end as I'm quite sure I had done before).  It ends in \n```EBUG   [U=3382,P=12921]   action_exec()                             Checking for: /.singularity.d/actions/exec\nDEBUG   [U=3382,P=12921]   action_exec()                             Checking for: /.exec\nWARNING [U=3382,P=12921]   action_exec()                             Container does not have an exec helper script, calling 'bash' directly\n```",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302188305|#673: exec breaks with image directory in current development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495046077.457964",
        "date": 1495046077457
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302176086|#408: Image generation should provide hash>",
                "text": "The work I was doing wound up <https://github.com/singularityware/singularity-python/blob/master/singularity/reproduce.py#L496|here> and for that specific function, I was using md5. Likely for the image we should use sha256.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302176086|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495044196.914927",
        "date": 1495044196914
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302174839|#408: Image generation should provide hash>",
                "text": "hey @hisplan ! We had originally intended this to be part of Singularity proper, and at one point @gmkurtzer added a random uuid generation (not a hash) but I don't think this was developed further. I did more work on these hash sums for a paper that I am working on, but no decisions / finality ever was integrated into the software proper. I came up with the above hoping to add, but it looks like the issue got lost in the nethers. @gmkurtzer, did you intend to add for 2.3? ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302174839|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495043922.830902",
        "date": 1495043922830
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302173040|#408: Image generation should provide hash>",
                "text": "Hi,\n\nSo I've been creating a checksum for my image (e.g. `shasum -a 256 test.img`), and today I noticed that a small change that I made in `%runscript` section didn't actually change the checksum. :scream: \nI'm using version 2.2.1 and would like to know the best way to make a hash for my image. or is the has already being provided somewhere?",
                "pretext": "[singularityware/singularity] New comment by hisplan on issue <https://github.com/singularityware/singularity/issues/408#issuecomment-302173040|#408: Image generation should provide hash>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495043528.716263",
        "date": 1495043528716
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302114841|#672: Adds an option to override tmp directory>",
                "text": "Your logic makes sense, but I would prefer not to change so much. I think if I/we/you do this, the behavior would be in alignment with what you are hoping for:\n\nIf we move the order of operations so that user binds happen before `singularity_mount_tmp()` and check to see if `/tmp` and/or `/var/tmp` is already mounted via a user bind, and if so, skip it.\n\nIn that case, we can simply do what you originally requested:\n\n```$ singularity shell -B ~/tmp:/tmp container.img\n```\n\nAdditionally, your point about option nomenclature is a good one, I propose to change `--workdir` to `--tmpdir` as that seems truer to intent (with of course maintaining legacy support).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302114841|#672: Adds an option to override tmp directory>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495032560.397392",
        "date": 1495032560397
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302109139|#670: Problem building RPM from Git source>",
                "text": "It is very weird, I can not seem to replicate that error:\n\n```...\ntest -n \"\" \\\n|| find \"singularity-2.2.99\" -type d ! -perm -755 \\\n        -exec chmod u+rwx,go+rx {} \\; -o \\\n  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\\n  ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\\n  ! -type d ! -perm -444 -exec /bin/sh /home/gmk/git/singularity/install-sh -c -m a+r {} {} \\; \\\n|| chmod -R a+r \"singularity-2.2.99\"\ntardir=singularity-2.2.99 &amp;&amp; ${TAR-tar} chof - \"$tardir\" | GZIP=--best gzip -c &gt;singularity-2.2.99.tar.gz\nmake[1]: Leaving directory `/home/gmk/git/singularity'\nif test -d \"singularity-2.2.99\"; then find \"singularity-2.2.99\" -type d ! -perm -200 -exec chmod u+w {} ';' &amp;&amp; rm -rf \"singularity-2.2.99\" || { sleep 5 &amp;&amp; rm -rf \"singularity-2.2.99\"; }; else :; fi\n[gmk@gmkdev1 singularity]$ ls -l singularity-2.2.99.tar.gz \n-rw-rw-r--. 1 gmk gmk 594547 May 17 07:30 singularity-2.2.99.tar.gz\n[gmk@gmkdev1 singularity]$ cat /etc/redhat-release \nCentOS Linux release 7.2.1511 (Core) \n[gmk@gmkdev1 singularity]$ id\nuid=1000(gmk) gid=1000(gmk) groups=1000(gmk),10(wheel) context=unconfined_u:unconfined_r:unconfined_t:s0-s0:c0.c1023\n```\n\nWhat is your current UID (`id`)?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-302109139|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495031511.058387",
        "date": 1495031511058
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302106756|#673: exec breaks with image directory in current development branch>",
                "text": "Hi @DrDaveD, can you retest against the latest development branch which contains the above commit? There are no code changes here, but hopefully a bit more debug output which should help to figure out what is going on.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/673#issuecomment-302106756|#673: exec breaks with image directory in current development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495031106.925307",
        "date": 1495031106925
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hcraT on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302011329|#672: Adds an option to override tmp directory>",
                "text": "Hi,\nyou are right (of course :D ). However I have to say that I find the current options a bit confusing (both the naming and the semantics).\n\nIn the current status of the software in order to change the source tmp folder you need to set both contain and workdir. Moreover you need to:\n• set the workdir option to the prefix of the path where your source /tmp folder is\n• specify the -H option in order to prevent containment of the home directory (if all you need is to change the /tmp mountpoint)\n• the names of both the source and destination mountpoint are hard-coded (you could of course use the -B option in that case)\n• the contain option has important consequences (if all you want is to change the /tmp mountpoint)\n\nMy proposal would be:\n• remove the workdir option (whose name is in my opinion misleading becasue in docker the semantics is different, that semantics would be a nice addition in singularity as well)\n• make the --contain take an optional parameter (the path to be used as \"workdir\") if the option is present but no path is specified the workdir is set by default to the session-directory\n• keep the -H option and add the -T option to the dev branch.\n     In case you agree with the proposal would in your opinion be useful to add a --temp_var (or --var_temp) option as well?\n\nThanks.",
                "pretext": "[singularityware/singularity] New comment by hcraT on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-302011329|#672: Adds an option to override tmp directory>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1495006782.036200",
        "date": 1495006782036
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301929060|#670: Problem building RPM from Git source>",
                "text": "Makes no difference, I'm afraid.\nIn case you missed it in the big paste above, this must be part of the problem:\n```test -n \"\" \\\n|| find \"singularity-2.2.99\" -type d ! -perm -755 \\\n        -exec chmod u+rwx,go+rx {} \\; -o \\\n  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\\n  ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\\n  ! -type d ! -perm -444 -exec /bin/sh /home/camp/huffmaa/src/github/singularity/install-sh -c -m a+r {} {} \\; \\\n|| chmod -R a+r \"singularity-2.2.99\"\ntardir=singularity-2.2.99 &amp;&amp; ${TAR-tar} chof - \"$tardir\" | GZIP=--best gzip -c &gt;singularity-2.2.99.tar.gz\ntar: value 30003777 out of uid_t range 0..2097151\ntar: Exiting with failure status due to previous errors\n```",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301929060|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494972228.253358",
        "date": 1494972228253
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#673 exec breaks with image directory in current development branch' https://github.com/singularityware/singularity/issues/673 by DrDaveD",
                "text": "In the current singularity development branch, on a centos7 host, the following command \n```singularity -d exec -C --home $HOME/root/home:/srv /cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo:el6 bash\n```\nends in \n```VERBOSE [U=3382,P=2]       action_exec()                             Exec'ing /.exec\nERROR   [U=3382,P=2]       action_exec()                             Failed to execvp() /.exec: No such file or directory\nABORT   [U=3382,P=2]       action_exec()                             Retval = 255\n```\n\nSubstituting an image file works, and using shell instead of exec works.\n\nAlso, the shorter command\n```singularity -d exec /cvmfs/singularity.opensciencegrid.org/opensciencegrid/osgvo:el6\n```\nends in\n```VERBOSE [U=3382,P=24523]   action_exec()                             Exec'ing /.exec\nSegmentation fault\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DrDaveD|DrDaveD>",
                "title": "#673 exec breaks with image directory in current development branch",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/673",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494961405.534955",
        "date": 1494961405534
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-301832604|#667: [Feautre_Request] Call shub from a def file>",
                "text": "We can also implement a pull from shub, and then mount the container as read-write and then run a post. We can also have it expand the container if necessary.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-301832604|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494951038.521102",
        "date": 1494951038521
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301832242|#670: Problem building RPM from Git source>",
                "text": "Can you use `development` branch instead of master? We are about to merge development into master.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301832242|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494950968.499999",
        "date": 1494950968499
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301810643|#660: compiling singularity on RHEL 5>",
                "text": "I can't replicate this easily right now, but if anyone else can, that would be helpful!\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301810643|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494946917.179251",
        "date": 1494946917179
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-301809670|#672: Adds an option to override tmp directory>",
                "text": "Heya @hcraT,\n\nI think this option is satisfied by the `--workdir` and a `--temp` option would be redundant. Also, to consider this, we would have to move this to the 'development' GitHub branch as opposed to master.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/672#issuecomment-301809670|#672: Adds an option to override tmp directory>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494946734.113440",
        "date": 1494946734113
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#672 Adds an option to override tmp directory' https://github.com/singularityware/singularity/pull/672 by hcraT",
                "text": "As proposed in #642 adds the -T (--temp) option. This allows to override the\n/tmp directory similar to the -H (--home) option.",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/hcraT|hcraT>",
                "title": "#672 Adds an option to override tmp directory",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/672",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494936712.357589",
        "date": 1494936712357
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Amjadhpc on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301694644|#660: compiling singularity on RHEL 5>",
                "text": "I tried v 2.1 . but hitting rpm errors while bootstraping\n\ns*ingularity bootstrap /tmp/centos7.img centos.def (The def file is used from examples directory).*\n\n when i try to bootstrap it gives me Rpm_check_debug vs depsolve errors.  I am using a local repo of Centos 7 instead of Centos 7 Mirror  (Thanks to  Wannacry cyber attack , my organization blocked yum ):) Not sure if this is the issue\nThe short summary of  errors is as follows\n\n*Transaction Summary*\n\nInstall    109 Package(s)\nUpdate       0 Package(s)\nRemove       0 Package(s)\n\nTotal download size: 58 M\n\n*Downloading Packages:*\n\nTotal                                                                                                   1.6 GB/s |  58 MB     00:00\nRunning rpm_check_debug\nERROR with rpm_check_debug vs depsolve:\nrpmlib(FileDigests) is needed by pygpgme-0.3-9.el7.x86_64\nrpmlib(PayloadIsXz) is needed by pygpgme-0.3-9.el7.x86_64\nrpmlib(FileDigests) is needed by bzip2-libs-1.0.6-12.el7.x86_64\nrpmlib(PayloadIsXz) is needed by bzip2-libs-1.0.6-12.el7.x86_64\n\nComplete!\n(1, [u'Please report this error in <http://yum.baseurl.org/report']>)",
                "pretext": "[singularityware/singularity] New comment by Amjadhpc on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301694644|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494918389.178148",
        "date": 1494918389178
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301687741|#670: Problem building RPM from Git source>",
                "text": "This is from `master`.\n\nHere's the log, looks like there's a strange `uid` problem with tar:\n\nScript started on Tue 16 May 2017 07:21:50 BST\nkhuffmaa@ca170:~/src/github[huffmaa@ca170 github]$ cd singularity/\nkhuffmaa@ca170:~/src/github/singularity[huffmaa@ca170 singularity]$ ./autogen.sh\n+autoreconf -i -f\nlibtoolize: putting auxiliary files in `.'.\nlibtoolize: copying file `./ltmain.sh'\nlibtoolize: putting macros in AC_CONFIG_MACRO_DIR, `m4'.\nlibtoolize: copying file `m4/libtool.m4'\nlibtoolize: copying file `m4/ltoptions.m4'\nlibtoolize: copying file `m4/ltsugar.m4'\nlibtoolize: copying file `m4/ltversion.m4'\nlibtoolize: copying file `m4/lt~obsolete.m4'\nconfigure.ac:39: installing './compile'\nconfigure.ac:9: installing './config.guess'\nconfigure.ac:9: installing './config.sub'\nconfigure.ac:30: installing './install-sh'\nconfigure.ac:30: installing './missing'\nsrc/Makefile.am: installing './depcomp'\nkhuffmaa@ca170:~/src/github/singularity[huffmaa@ca170 singularity]$ ./configure --with-slurm\nchecking build system type... x86_64-unknown-linux-gnu\nchecking host system type... x86_64-unknown-linux-gnu\nchecking target system type... x86_64-unknown-linux-gnu\nchecking for a BSD-compatible install... /usr/bin/install -c\nchecking whether build environment is sane... yes\nchecking for a thread-safe mkdir -p... /usr/bin/mkdir -p\nchecking for gawk... gawk\nchecking whether make sets $(MAKE)... yes\nchecking whether make supports nested variables... yes\nchecking for style of include used by make... GNU\nchecking for gcc... gcc\nchecking whether the C compiler works... yes\nchecking for C compiler default output file name... a.out\nchecking for suffix of executables... \nchecking whether we are cross compiling... no\nchecking for suffix of object files... o\nchecking whether we are using the GNU C compiler... yes\nchecking whether gcc accepts -g... yes\nchecking for gcc option to accept ISO C89... none needed\nchecking dependency style of gcc... gcc3\nchecking how to run the C preprocessor... gcc -E\nchecking for grep that handles long lines and -e... /usr/bin/grep\nchecking for egrep... /usr/bin/grep -E\nchecking for ANSI C header files... yes\nchecking for sys/types.h... yes\nchecking for sys/stat.h... yes\nchecking for stdlib.h... yes\nchecking for string.h... yes\nchecking for memory.h... yes\nchecking for strings.h... yes\nchecking for inttypes.h... yes\nchecking for stdint.h... yes\nchecking for unistd.h... yes\nchecking minix/config.h usability... no\nchecking minix/config.h presence... no\nchecking for minix/config.h... no\nchecking whether it is safe to define *EXTENSIONS*... yes\nchecking how to print strings... printf\nchecking for a sed that does not truncate output... /usr/bin/sed\nchecking for fgrep... /usr/bin/grep -F\nchecking for ld used by gcc... /usr/bin/ld\nchecking if the linker (/usr/bin/ld) is GNU ld... yes\nchecking for BSD- or MS-compatible name lister (nm)... /usr/bin/nm -B\nchecking the name lister (/usr/bin/nm -B) interface... BSD nm\nchecking whether ln -s works... yes\nchecking the maximum length of command line arguments... 1572864\nchecking whether the shell understands some XSI constructs... yes\nchecking whether the shell understands \"+=\"... yes\nchecking how to convert x86_64-unknown-linux-gnu file names to x86_64-unknown-linux-gnu format... func_convert_file_noop\nchecking how to convert x86_64-unknown-linux-gnu file names to toolchain format... func_convert_file_noop\nchecking for /usr/bin/ld option to reload object files... -r\nchecking for objdump... objdump\nchecking how to recognize dependent libraries... pass_all\nchecking for dlltool... no\nchecking how to associate runtime and link libraries... printf %s\\n\nchecking for ar... ar\nchecking for archiver @FILE support... @\nchecking for strip... strip\nchecking for ranlib... ranlib\nchecking command to parse /usr/bin/nm -B output from gcc object... ok\nchecking for sysroot... no\nchecking for mt... no\nchecking if : is a manifest tool... no\nchecking for dlfcn.h... yes\nchecking for objdir... .libs\nchecking if gcc supports -fno-rtti -fno-exceptions... no\nchecking for gcc option to produce PIC... -fPIC -DPIC\nchecking if gcc PIC flag -fPIC -DPIC works... yes\nchecking if gcc static flag -static works... no\nchecking if gcc supports -c -o file.o... yes\nchecking if gcc supports -c -o file.o... (cached) yes\nchecking whether the gcc linker (/usr/bin/ld -m elf_x86_64) supports shared libraries... yes\nchecking whether -lc should be explicitly linked in... no\nchecking dynamic linker characteristics... GNU/Linux ld.so\nchecking how to hardcode library paths into programs... immediate\nchecking whether stripping libraries is possible... yes\nchecking if libtool supports shared libraries... yes\nchecking whether to build shared libraries... yes\nchecking whether to build static libraries... yes\nchecking for gcc... (cached) gcc\nchecking whether we are using the GNU C compiler... (cached) yes\nchecking whether gcc accepts -g... (cached) yes\nchecking for gcc option to accept ISO C89... (cached) none needed\nchecking dependency style of gcc... (cached) gcc3\nchecking dependency style of gcc... (cached) gcc3\nchecking whether gcc and cc understand -c and -o together... yes\nchecking for namespace: CLONE_NEWPID... yes\nchecking for namespace: CLONE_PID... no\nchecking for namespace: CLONE_FS... yes\nchecking for namespace: CLONE_NEWNS... yes\nchecking for namespace: CLONE_NEWUSER... yes\nchecking for namespace: CLONE_NEWIPC... yes\nchecking for feature: NO_NEW_PRIVS... yes\nchecking for feature: MS_SLAVE... yes\nchecking for feature: MS_REC... yes\nchecking for feature: MS_PRIVATE... yes\nchecking for setns... yes\nchecking for overlayfs... yes\nchecking --with-slurm... yes\nchecking slurm/spank.h usability... yes\nchecking slurm/spank.h presence... yes\nchecking for slurm/spank.h... yes\nyes\nchecking if suid should be enabled... yes\nchecking that generated files are newer than configure... done\nconfigure: creating ./config.status\nconfig.status: creating Makefile\nconfig.status: creating singularity.spec\nconfig.status: creating test.sh\nconfig.status: creating src/Makefile\nconfig.status: creating src/lib/Makefile\nconfig.status: creating src/lib/ns/Makefile\nconfig.status: creating src/lib/ns/ipc/Makefile\nconfig.status: creating src/lib/ns/mnt/Makefile\nconfig.status: creating src/lib/ns/pid/Makefile\nconfig.status: creating src/lib/ns/user/Makefile\nconfig.status: creating src/lib/rootfs/Makefile\nconfig.status: creating src/lib/rootfs/image/Makefile\nconfig.status: creating src/lib/rootfs/dir/Makefile\nconfig.status: creating src/lib/rootfs/squashfs/Makefile\nconfig.status: creating src/lib/action/Makefile\nconfig.status: creating src/lib/action/exec/Makefile\nconfig.status: creating src/lib/action/shell/Makefile\nconfig.status: creating src/lib/action/start/Makefile\nconfig.status: creating src/lib/action/stop/Makefile\nconfig.status: creating src/lib/action/test/Makefile\nconfig.status: creating src/lib/action/run/Makefile\nconfig.status: creating src/lib/file/Makefile\nconfig.status: creating src/lib/file/group/Makefile\nconfig.status: creating src/lib/file/passwd/Makefile\nconfig.status: creating src/lib/file/resolvconf/Makefile\nconfig.status: creating src/lib/file/entrypoint/Makefile\nconfig.status: creating src/lib/mount/Makefile\nconfig.status: creating src/lib/mount/cwd/Makefile\nconfig.status: creating src/lib/mount/dev/Makefile\nconfig.status: creating src/lib/mount/binds/Makefile\nconfig.status: creating src/lib/mount/home/Makefile\nconfig.status: creating src/lib/mount/hostfs/Makefile\nconfig.status: creating src/lib/mount/kernelfs/Makefile\nconfig.status: creating src/lib/mount/tmp/Makefile\nconfig.status: creating src/lib/mount/userbinds/Makefile\nconfig.status: creating src/lib/mount/scratch/Makefile\nconfig.status: creating src/lib/image/Makefile\nconfig.status: creating src/lib/image/mount/Makefile\nconfig.status: creating src/lib/image/bind/Makefile\nconfig.status: creating src/lib/image/create/Makefile\nconfig.status: creating src/lib/image/expand/Makefile\nconfig.status: creating src/lib/imag…",
                "pretext": "[singularityware/singularity] New comment by verdurin on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301687741|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494916080.897995",
        "date": 1494916080897
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hcraT on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301682424|#642: bind paths and overlay in the configuration file>",
                "text": "I now see, by skimming through the code, that the folder is actually\nmounted on the session directory. What I would need however is a -T option\npretty much like the -H. I will create a pull request with the code that\nimplements the option.\n\nOn May 16, 2017 03:12, \"Gregory M. Kurtzer\" <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; There is a bug with regards to /tmp/ working with the trailing slash, but\n&gt; not without. But, trying to use a container that has an unwritable /tmp\n&gt; or $HOME would be bad. If you want to change the location of temporary\n&gt; directories, specify the --workdir.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/642#issuecomment-301647084>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/ABKrb4AudIu4jf-jbtWdK_WZIuUDoi3Dks5r6Pf1gaJpZM4NJ0Ph>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by hcraT on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301682424|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494913920.683716",
        "date": 1494913920683
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/671#issuecomment-301665923|#671: Fixing test for size, and there was no bug with the uri>",
                "text": "happy dinosaur :O)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/671#issuecomment-301665923|#671: Fixing test for size, and there was no bug with the uri>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494905493.962586",
        "date": 1494905493962
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/671#issuecomment-301665321|#671: Fixing test for size, and there was no bug with the uri>",
                "text": "Read and merged!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/671#issuecomment-301665321|#671: Fixing test for size, and there was no bug with the uri>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494905180.935918",
        "date": 1494905180935
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/671|#671 Fixing test for size, and there was no bug with the uri> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/671|#671 Fixing test for size, and there was no bug with the uri> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494905170.935091",
        "date": 1494905170935
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#671 Fixing test for size, and there was no bug with the uri' https://github.com/singularityware/singularity/pull/671 by vsoch",
                "text": "This is essentially the same PR as before #668 that was never merged, with just a tweak to some print output for the image uri. The reason it wasn't working was because the sha digest was incorrect.\n\nChanges proposed in this pull request\n\n• bla bla bla\n• nobody is reading this\n• sad dinosaur :*(\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#671 Fixing test for size, and there was no bug with the uri",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/671",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494904737.899304",
        "date": 1494904737899
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/668|#668 Update to size function> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/668|#668 Update to size function> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494904330.865877",
        "date": 1494904330865
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301648972|#660: compiling singularity on RHEL 5>",
                "text": "Can you try to update to Singularity v2.1 or v2.2.1? We have dropped support in Singularity for RHEL5 in the development branch (soon to become 2.3), and it may have also had some incompatibilities in 2.2.1.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301648972|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494897926.254028",
        "date": 1494897926254
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/669|#669 Fixed debian build files according to new version> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/669|#669 Fixed debian build files according to new version> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494897804.241972",
        "date": 1494897804241
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/669#issuecomment-301648686|#669: Fixed debian build files according to new version>",
                "text": "Me too, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/669#issuecomment-301648686|#669: Fixed debian build files according to new version>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494897801.241668",
        "date": 1494897801241
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301647084|#642: bind paths and overlay in the configuration file>",
                "text": "There is a bug with regards to `/tmp/` working with the trailing slash, but not without. But, trying to use a container that has an unwritable `/tmp` or $HOME would be bad. If you want to change the location of temporary directories, specify the `--workdir`.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301647084|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494897140.175451",
        "date": 1494897140175
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301645645|#670: Problem building RPM from Git source>",
                "text": "What branch are you using?\n\nCan you upload the output of `make dist`?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/670#issuecomment-301645645|#670: Problem building RPM from Git source>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494896539.113763",
        "date": 1494896539113
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#670 Problem building RPM from Git source' https://github.com/singularityware/singularity/issues/670 by verdurin",
                "text": "I'm following the instructions at <http://singularity.lbl.gov/install-linux#build-an-rpm-from-source> and what I'm left with after running `make dist` is an empty tarball.\n\nThis is on a CentOS 7.2 machine.\n\nLet me know which specific logs you need to help debug this.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/verdurin|verdurin>",
                "title": "#670 Problem building RPM from Git source",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/670",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494889515.292933",
        "date": 1494889515292
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301569192|#642: bind paths and overlay in the configuration file>",
                "text": "@hcraT  That's what singularity --contain does, it provides new $HOME and /tmp mountpoints that are unique to the container.  You can control the content of the mount points with -W/--workdir, and you can additionally override the home directory with -H/--homedir.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301569192|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494874322.896473",
        "date": 1494874322896
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/669#issuecomment-301487127|#669: Fixed debian build files according to new version>",
                "text": "This looks good to me.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/669#issuecomment-301487127|#669: Fixed debian build files according to new version>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494857490.970151",
        "date": 1494857490970
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by hcraT on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301450695|#642: bind paths and overlay in the configuration file>",
                "text": "Hi,\nI would like only to point out that singularity still create mounts within the container even if the --contain otion is specified. For example:\n```$ singularity exec --contain image.img mount | grep -E '(/home|/tmp)'\n/dev/sda2 on /tmp type ext4 (rw,relatime,errors=remount-ro,stripe=64,data=ordered)\n/dev/sda2 on /home/my_user type ext4 (rw,relatime,errors=remount-ro,stripe=64,data=ordered)\n```\nI report this because I need to mount something in place of /tmp but singularity complains about tmp being already mounted:\n```singularity exec --contain --bind ./mydir:/tmp:rw image.img ls -l /tmp/\nWARNING: Not mounting requested bind point (already mounted in container): /tmp\n```\nI solved it by using `/tmp/` instead of `/tmp` but it would be good to get completely rid of the mounts. Is there a reason for the folders being still mounted in the container?\n\nThanks.",
                "pretext": "[singularityware/singularity] New comment by hcraT on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-301450695|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494848403.948852",
        "date": 1494848403948
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#669 Fixed debian build files according to new version' https://github.com/singularityware/singularity/pull/669 by dexter2cz",
                "text": "Some minor changes to debian/*\n• TODO file is no more\n• AUTHORS renamed to AUTHORS.md",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/dexter2cz|dexter2cz>",
                "title": "#669 Fixed debian build files according to new version",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/669",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494843412.185447",
        "date": 1494843412185
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by Amjadhpc on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301414673|#660: compiling singularity on RHEL 5>",
                "text": "Hi @gmkurtzer \n\nI  am using Singularity v 2.0 . \nWhen i try to create centos 7 image  using RHEL 5.4 , i get segfault on image bind . It fails to bind\nAttaching the output of singularity create /tmp/centos7.img command\n\n<https://github.com/singularityware/singularity/files/1000524/out.docx|out.docx>",
                "pretext": "[singularityware/singularity] New comment by Amjadhpc on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-301414673|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494838155.227024",
        "date": 1494838155227
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301290375|#661: singularity shell of tar.gz images>",
                "text": "and @tobigithub this probably isn't what you want, but you can still pass around images that are .tar.gz, and then decompress (unfortunately yourself) before running. eg:\n\n```\nsingularity create parsnip.img\nsingularity import parsnip.img docker://ubuntu\ngzip -c -9 parsnip.img &gt; parsnip.img.gz\nrm parsnip.img\ngzip -d -f parsnip.img.gz # produces parsnip.img\nsingularity shell parsnip.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity tempo.img:~/Desktop\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301290375|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494736333.570059",
        "date": 1494736333570
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301290189|#661: singularity shell of tar.gz images>",
                "text": "Yeah I just tried this out and I think there is a bug - the image should decompress before it is attempted to run or mount, and this is what was done with 2.2 (the images being built on Singularity hub have essentially this flow). Here is what we essentially do on Singularity hub (but using bootstrap):\n\n```singularity create parsnip.img\nsingularity import parsnip.img docker://ubuntu\ngzip -c -9 parsnip.img &gt; parsnip.img.gz\n```\n\nand for sanity check, I also tried an image generation that does bootstrap (which would require sudo as the above does not:\n\n```singularity create tempo.img\nsudo singularity bootstrap tempo.img Singularity\n gzip -c -9 tempo.img &gt; tempo.img.gz\n```\n(the contents of the `Singularity` file are doing a bootstrap docker with ubuntu, and nothing else:\n\nin both of these cases I reproduced your error:\n\n``` singularity shell tempo.img.gz \nERROR  : Failed to mount image in (read only): Invalid argument\nABORT  : Retval = 255\nvanessa@vanessa-ThinkPad-T4\n```\n\nI also tried with using sudo to create the image:\n\n```sudo singularity create tempo.img\nsudo singularity bootstrap tempo.img Singularity\n gzip -c -9 tempo.img &gt; tempo.img.gz\n```\n\nand the same error. In the case of the (old) version 2.2, this same thing _does_ work - the image is generated as above and then decompressed at runtime, for example\n\n```\n singularity pull shub://vsoch/hello-world\nDone. Container is at: ./vsoch-hello-world-master.img\nvanessa@vanessa-ThinkPad-T450s:~/Desktop$ singularity shell vsoch-hello-world-master.img \nSingularity: Invoking an interactive shell within container...\n\n$\n```\n\nbut it doesn't look like we are doing that step in the current version, it checks for directory, squashfs, no go:\n\n```VERBOSE [U=1000,P=2826]    singularity_image_mount()                 Checking what kind of image we are mounting\nDEBUG   [U=1000,P=2826]    singularity_image_mount_squashfs_check()  Image does not appear to be of type '.sqsh': parsnip.img.gz\nDEBUG   [U=1000,P=2826]    singularity_image_mount_dir_check()       Checking if image is a directory\nVERBOSE [U=1000,P=2826]    singularity_image_mount_dir_check()       Source path is not a directory: parsnip.img.gz\nVERBOSE [U=1000,P=2826]    singularity_image_mount()                 Attempting to mount as singularity image\nDEBUG   [U=1000,P=2826]    singularity_registry_get()                Returning NULL on 'WRITABLE'\nDEBUG   [U=1000,P=2826]    singularity_priv_escalate()               Temporarily escalating privileges (U=1000)\nDEBUG   [U=0,P=2826]       singularity_priv_escalate()               Clearing supplementary GIDs.\nVERBOSE [U=0,P=2826]       singularity_image_mount_image_mount()     Mounting /dev/loop2 in read/only to: /var/lib/singularity/mnt/source\nERROR   [U=0,P=2826]       singularity_image_mount_image_mount()     Failed to mount image in (read only): Invalid argument\n```\n\nand not sure if this is relevant, but the permissions are also different:\n\n```\nls -l parsnip.img*Done. Container is at: ./vsoch-hello-world-master.img\nvanessa@vanessa-ThinkPad-T450s:~/Desktop$ singularity shell vsoch-hello-world-master.img \nSingularity: Invoking an interactive shell within container...\n\n-rwxr-xr-x 1 vanessa vanessa 805306400 May 13 21:06 parsnip.img\n-rw-rw-r-- 1 vanessa vanessa  46841333 May 13 21:07 parsnip.img.gz\n```\n\n@gmkurtzer is it possible that the check for the file type / extension was not carried forward with the changes you made for 2.3?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301290189|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494735892.556814",
        "date": 1494735892556
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289535|#661: singularity shell of tar.gz images>",
                "text": "@vsoch \n\n&gt; hey Tobias, are you treating the .img extension as a compressed image? Singularity uses the extension to determine the file type see here so if you are giving a .img that isn't actually one, I would suspect something might go wrong. If you try the above with the image extension properly specified, do you still get the error?\nHi Vanessa,\nyes indeed, that may be an issue, btw I pulled the singularity development version for CentOS, but had really troubles to run it as a simple user with sudo.  So I ended up running everything as root. Also I renamed the compressed Centos-7.img to Centos-7.img.tar.gz and tried to execute it, still same error.\n\nI would like to know the 4 commands to create an image, make it bootable, then compress it and run a singularity shell of the compressed file.",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289535|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494734433.511224",
        "date": 1494734433511
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289459|#661: singularity shell of tar.gz images>",
                "text": "Can't you just do:\n\n```gzip -c -9 container.img &gt; container.img.gz\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289459|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494734273.506285",
        "date": 1494734273506
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289410|#661: singularity shell of tar.gz images>",
                "text": "@jmstover  \n\n&gt; You're creating a tar of the Singularity code base there, and not a rootfs\n&gt; an OS install.... The directory you are in when you run that tar command,\n&gt; should be equivalent to the / directory of an OS install.\nThank  you Jason, OK. I am not a LINUX expert, what would be the appropriate commands to create an image file, make it bootable, compress it and execute it? ",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289410|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494734153.503166",
        "date": 1494734153503
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289388|#661: singularity shell of tar.gz images>",
                "text": "Yes +1 @jmstover... something is off that a command to create in a compressed file doesn't result in an extension that indicates it has been compressed.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289388|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494734095.501682",
        "date": 1494734095501
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289366|#661: singularity shell of tar.gz images>",
                "text": "hey Tobias, are you treating the `.img` extension as a compressed image? Singularity uses the extension to determine the file type <https://github.com/singularityware/singularity/blob/development/libexec/image-handler.sh#L225|see here> so if you are giving a `.img` that isn't actually one, I would suspect something might go wrong. If you try the above with the image extension properly specified, do you still get the error?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289366|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494734049.500490",
        "date": 1494734049500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289322|#661: singularity shell of tar.gz images>",
                "text": "Hi Tobias,\n\n&gt; _compressing file from 2 GB to 7 MB works_\n&gt; \n&gt; [root@localhost singularity]# tar cvzf /tmp/Centos-7.img .\nIn the above, you're overwriting Centos-7.img file, not compressing it. The\n'-c' option to tar is _create_. So, you're creating a new file named\n'Centos-7.img' with the contents of your current working directory (the '.'\nused).\n\nSo... I don't think that's doing what you're thinking it's doing.\n\n-J\n\nOn Sat, May 13, 2017 at 10:32 PM, Tobias Kind <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; Hi,\n&gt; now under CentOS 6.5. BTW many of the installations on the LBL wiki do not\n&gt; work out of the box\n&gt; due to permission settings, for example a user can install centos into a\n&gt; virtual machine, but is not\n&gt; part of the sudoer group. Many commands on the WIKI fail without deeper\n&gt; LINUX knowledge.\n&gt; So here all commands are executed as su (bad I know, just from a clean\n&gt; desktop vm install)\n&gt; \n&gt; _create image works_\n&gt; \n&gt; [root@localhost singularity]# singularity create --size 2048 /tmp/Centos-7.img\n&gt; \n&gt; _bootstrap the image works_\n&gt; \n&gt; [root@localhost singularity]# singularity bootstrap /tmp/Centos-7.img examples/centos.def\n&gt; \n&gt; _running singularity works_\n&gt; \n&gt; [root@localhost singularity]# singularity shell /tmp/Centos-7.img\n&gt; \n&gt; _compressing file from 2 GB to 7 MB works_\n&gt; \n&gt; [root@localhost singularity]# tar cvzf /tmp/Centos-7.img .\n&gt; \n&gt; _show the compressed image works_\n&gt; \n&gt; [root@localhost singularity]# ls -l /tmp/Centos-7.img\n&gt; -rwxr-xr-x. 1 root root 6612516 May 13 20:10 /tmp/Centos-7.img\n&gt; [root@localhost singularity]#\n&gt; \n&gt; _starting the image does not work_\n&gt; \n&gt; [root@localhost singularity]# singularity shell /tmp/Centos-7.img\n&gt; ERROR  : File is not a valid Singularity image, aborting...\n&gt; ABORT  : Retval = 255\n&gt; [root@localhost singularity]# singularity create --size 2048 /tmp/Centos-7.img\n&gt; \n&gt; I think many of the examples need to be tested on a clean install from and\n&gt; ISO (like I did with UBUNTU and CentOS) and the without any additional\n&gt; modifications the commands should be shown. For example in this case the\n&gt; image file is just compressed without *.tar.gz, so the singularity script\n&gt; might not catch that.\n&gt; \n&gt; The original question was how to execute a singularity shell with a\n&gt; compressed (tar.gz) image file.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/661#issuecomment-301288754>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AA5zogiC1FY09VnsjKbBR0pN8M_aYV8fks5r5nXigaJpZM4NThx2>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301289322|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494733964.498312",
        "date": 1494733964498
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301288754|#661: singularity shell of tar.gz images>",
                "text": "Hi,\nnow under CentOS 6.5. BTW many of the installations on the LBL wiki do not work out of the box\ndue to permission settings, for example a user can install centos into a virtual machine, but is not\npart of the sudoer group. Many commands on the WIKI fail without deeper LINUX knowledge.\nSo here all commands are executed as su (bad I know, just from a clean desktop vm install)\n\n````\n\n*create image works*\n\n[root@localhost singularity]# singularity create --size 2048 /tmp/Centos-7.img\n\n*bootstrap the image works*\n\n[root@localhost singularity]# singularity bootstrap /tmp/Centos-7.img examples/centos.def\n\n*running singularity works*\n\n[root@localhost singularity]# singularity shell /tmp/Centos-7.img\n\n*compressing file from 2 GB to 7 MB works*\n\n[root@localhost singularity]# tar cvzf /tmp/Centos-7.img . \n\n*show the compressed image works*\n\n[root@localhost singularity]# ls -l /tmp/Centos-7.img\n-rwxr-xr-x. 1 root root 6612516 May 13 20:10 /tmp/Centos-7.img\n[root@localhost singularity]#\n\n*starting the image does not work*\n\n[root@localhost singularity]# singularity shell /tmp/Centos-7.img\nERROR  : File is not a valid Singularity image, aborting...\nABORT  : Retval = 255\n[root@localhost singularity]# singularity create --size 2048 /tmp/Centos-7.img\n````\nI think many of the examples need to be tested on a clean install from and ISO (like I did with UBUNTU and CentOS) and the without any additional modifications the commands should be shown. For example in this case the image file is just compressed without *.tar.gz, so the singularity script might not catch that.\n\nThe original question was how to execute a singularity shell with a compressed (tar.gz) image file.",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301288754|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494732770.464976",
        "date": 1494732770464
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285692|#661: singularity shell of tar.gz images>",
                "image_url": "https://avatars0.githubusercontent.com/u/20306680?v=3&s=400",
                "image_width": 250,
                "image_height": 250,
                "image_bytes": 30181,
                "text": "Hi Tobias,\n\n&gt; vm@ubuntu:~/git/singularity$ tar cvzf /tmp/ubuntu14.img .\nYou're creating a tar of the Singularity code base there, and not a rootfs\nan OS install.... The directory you are in when you run that tar command,\nshould be equivalent to the / directory of an OS install.\n\nSo, you'll have a structure like:\n\nsome_dir/\nbin/\nlib/\nlib64/\netc/\nvar/\n[...]\n\nYou'll change to 'some_dir', and then run the command: tar czvf\n/tmp/something.img .\n\nThe file should be a tar of an OS structure...\n\n-J\n\nOn Sat, May 13, 2017 at 8:51 PM, Vanessa Sochat <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; To install from development:\n&gt; \n&gt; git clone -b development <https://www.github.com/singularityware/singularity.git>\n&gt; cd singularity\n&gt; ./autogen.sh\n&gt; ./configure --prefix=/usr/local\n&gt; make\n&gt; sudo make install\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/661#issuecomment-301285541>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AA5zoqCWmglavDzJSZGYucq_XzssQY-eks5r5l4PgaJpZM4NThx2>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285692|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494726984.287165",
        "date": 1494726984287
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285541|#661: singularity shell of tar.gz images>",
                "text": "To install from development:\n\n```git clone -b development https://www.github.com/singularityware/singularity.git\ncd singularity\n./autogen.sh\n./configure --prefix=/usr/local\nmake\nsudo make install\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285541|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494726670.277032",
        "date": 1494726670277
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285496|#661: singularity shell of tar.gz images>",
                "text": "I don't think you are using development branch. When you do version you should see the commit:\n\n```singularity --version\n2.2.99-development.g945c6ee\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285496|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494726588.274010",
        "date": 1494726588274
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285064|#661: singularity shell of tar.gz images>",
                "text": "Mmmh, does not work for me, at least not under ubuntu14. \n\n````\n\n*singularity version*\n\nvm@ubuntu:~$ singularity --version\n2.2.99\n\n*create image in /tmp*\n\nvm@ubuntu:~/git/singularity$ sudo singularity create --size 2048 /tmp/ubuntu14.img\nCreating a new image with a maximum size of 2048MiB...\nExecuting image create helper\nFormatting image with ext3 file system\nDone.\n\n#show image file exists (2 GB)\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img \n-rwxr-xr-x 1 root root 2147483679 May 13 17:35 /tmp/ubuntu14.img\n\n*bootstrapping it*\n\nvm@ubuntu:~/git/singularity$ sudo singularity bootstrap /tmp/ubuntu14.img examples/ubuntu.def\n...snip ... snip lots of text\nProcessing triggers for libc-bin (2.19-0ubuntu6) ...\nNo test code provided in this container\n\n#show the file size of the bootstrapped container\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img \n-rwxr-xr-x 1 root root 2147483679 May 13 17:42 /tmp/ubuntu14.img\nvm@ubuntu:~/git/singularity$ \n\n#invoke singularity shell (working)\nvm@ubuntu:~/git/singularity$ singularity shell /tmp/ubuntu14.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity.ubuntu14.img&gt; $ whoami\nvm\nSingularity.ubuntu14.img&gt; $ uname -r\n3.19.0-25-generic\nSingularity.ubuntu14.img&gt; $ exit\nvm@ubuntu:~/git/singularity$ \n\n*now compressing it, according to proposed solution (no child dir)*\n\nvm@ubuntu:~/git/singularity$ tar cvzf /tmp/ubuntu14.img  .\ntar (child): /tmp/ubuntu14.img: Cannot open: Permission denied\ntar (child): Error is not recoverable: exiting now\n./\n./LICENSE\n./README.md\nvm@ubuntu:~/git/singularity$ \n\n*because img is root (permission wise) use sudo*\n\nsudo tar cvzf /tmp/ubuntu14.img  .\n... snip ... snip lots of text\n./docs/README.md\n./compile\n./Makefile.am\n./AUTHORS\nvm@ubuntu:~/git/singularity$ \n\n#image is now compressed to 7.4 MB (0.3%)\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img \n-rwxr-xr-x 1 root root 7492172 May 13 17:51 /tmp/ubuntu14.img\nvm@ubuntu:~/git/singularity$ \n\n*now start shell with compressed file*\n\nvm@ubuntu:~/git/singularity$ singularity shell /tmp/ubuntu14.img\nERROR  : File is not a valid Singularity image, aborting...\nABORT  : Retval = 255\nvm@ubuntu:~/git/singularity$ \n\n*start with sudo*\n\nvm@ubuntu:~/git/singularity$ sudo singularity shell /tmp/ubuntu14.img\nsudo: unable to resolve host ubuntu\nERROR  : File is not a valid Singularity image, aborting...\nABORT  : Retval = 255\n\n*magically restore image (2.1 GB)*\n\n*change write permissions for group and others*\n\nchmod g+w /tmp/ubuntu14.img \nchmod o+w /tmp/ubuntu14.img \n\n*now the permissions changed*\n\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img \n-rwxrwxrwx 1 vm vm 2147483679 May 13 17:42 /tmp/ubuntu14.img\n\n*now tar again according to proposed solution*\n\ntar cvzf /tmp/ubuntu14.img . \n....snip .... snip lots of text\n./compile\n./Makefile.am\n./AUTHORS\nvm@ubuntu:~/git/singularity$ \n\n*file has now user permissions and is compressed to 7MB*\n\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img\n-rwxrwxrwx 1 vm vm 7492172 May 13 18:09 /tmp/ubuntu14.img\nvm@ubuntu:~/git/singularity$ \n\n*start shell (does not work)*\n\nvm@ubuntu:~/git/singularity$ singularity shell /tmp/ubuntu14.img\nERROR  : File is not a valid Singularity image, aborting...\nABORT  : Retval = 255\nvm@ubuntu:~/git/singularity$ \n\n*sudo start shell*\n\nvm@ubuntu:~/git/singularity$ sudo singularity shell /tmp/ubuntu14.img\nsudo: unable to resolve host ubuntu\nERROR  : File is not a valid Singularity image, aborting...\nABORT  : Retval = 255\nvm@ubuntu:~/git/singularity$ \n\n`````\nactually I am currently unable expand the file back (unless I use an archive manager)\n````\n\n*file size stays 7 MB compressed instead of 2BGyte*\n\nvm@ubuntu:~/git/singularity$ sudo tar -czf /tmp/ubuntu14.img .\nsudo: unable to resolve host ubuntu\nvm@ubuntu:~/git/singularity$ sudo tar -xzf /tmp/ubuntu14.img .\nsudo: unable to resolve host ubuntu\nvm@ubuntu:~/git/singularity$ ls -l /tmp/ubuntu14.img\n-rwxrwxrwx 1 vm vm 7492172 May 13 18:33 /tmp/ubuntu14.img\nvm@ubuntu:~/git/singularity$ \n````",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301285064|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494725763.248358",
        "date": 1494725763248
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#668 Update to size function' https://github.com/singularityware/singularity/pull/668 by vsoch",
                "text": "This is a quick update to the size function so that it returns the summed size for all layers, versus the size of the writable layer. I have also added more verbosity to the README for using the command in Python.\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#668 Update to size function",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/668",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494629124.013892",
        "date": 1494629124013
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/628|#628 Add a Gitter chat badge to README.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/628|#628 Add a Gitter chat badge to README.md> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494614630.111070",
        "date": 1494614630111
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-301155394|#628: Add a Gitter chat badge to README.md>",
                "text": "I am going to close this for now, as I don't think we are ready to move away from Slack yet.\n\nThanks everyone!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-301155394|#628: Add a Gitter chat badge to README.md>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494614630.111010",
        "date": 1494614630111
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301154805|#661: singularity shell of tar.gz images>",
                "text": "This is working fine for me with the development branch. One of the important factors to creating the tarball is to make sure that there are no child directories created. For example:\n\n```$ tar cvzf /tmp/container.tar.gz .\n```\nWould work where:\n```$ tar cvzf /tmp/container.tar.gz relative_path_to_contianer\n```\nWould not.\n\nI think this is what @jmstover was referring to earlier. \n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-301154805|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494614477.072640",
        "date": 1494614477072
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300952848|#611: Nvidia GPU support with different driver versions?>",
                "text": "That is very very close to how it is getting done in Singularity today with the \"experimental\" GPU support. We are also getting the GPU libraries from the ld.so.cache as they are so things work very similar, and those libraries will indeed be matched to the host kernel (assuming the host's GPU support is working).",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300952848|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494549430.961094",
        "date": 1494549430961
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-300930770|#667: [Feautre_Request] Call shub from a def file>",
                "text": "I have two options in mind A and B.\nWell I think that runscripts wont math on this feature\n\n*Option A:*\n\nSince shub works with in integration with github, what this feature would do is to \"merge\" both .def files. and I think the runscripts can be deleted on the merge step. now that the user will set new runscripts for the app that he might be installing.\n\n*Option B*\n\nI wont call it a \"merge\", I think of it more as if the image that we are calling from shub is going to be our base OS. What it would do is to download the image layers, remove the runscript ( The /Singularity file).\n\nI think the functionality a user will want from a previous image would be:\n• Enviroment files\n• Binaries\n• Maybe links(```ln```) and labels.(But this can be discussed)\n# \n\nI think Option A is a better call when talking abouth HPC enviroments, since compiling leads to a better performance than a pre-compiled binary (may vary depending on the arch). But the feature will allow users to stablish a standard image for their project workflows(Reproducibility). And there could be official images(certified by the app developer), so a user will be able to call a def file that setup a proper MPI enviroment or a CUDA env and just install their stuff over standar image.",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-300930770|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494540579.804470",
        "date": 1494540579804
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-300917830|#667: [Feautre_Request] Call shub from a def file>",
                "text": "yeah this is a cool idea, for sure! This would come down to \"merging\" two containers, and all of the issues that we anticipated before (some of which were relevant for docker) are now more prevalent. It comes down to deciding how all of the following would be merged, what would be included (vs. not) and if both are included, in what order:\n\n• runscripts\n• environment files\n• labels\n• files that are redundant.\n\nWhat is your proposal?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/667#issuecomment-300917830|#667: [Feautre_Request] Call shub from a def file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494536987.083307",
        "date": 1494536987083
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#667 [Feautre_Request] Call shub from a def file' https://github.com/singularityware/singularity/issues/667 by ArangoGutierrez",
                "text": "We stared this discussion on the  <https://singularity-container.slack.com|Slack> but I want to bring it here in order to recieve feedback on this feature-idea.\n\nLest say a user want to build something from a previus image. lets say, having an MPI prefered build image, and that user want to build something that uses MPI (e.g WRF,OpenFoam) over that image.\n\n```bash\nBootStrap: shub\nimage_id: xxx  # Image_id on shub\n\n%post\n    echo \"Hello from inside the container\"\n    echo \"Install additional software here\"\n\n%runscript\n    echo \"This is what happens when you run the container...\"\n```\n\nThis can be seens as a milestone for a future local repository.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "title": "#667 [Feautre_Request] Call shub from a def file",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/667",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494535293.663685",
        "date": 1494535293663
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300903375|#611: Nvidia GPU support with different driver versions?>",
                "text": "Just to restart the discussion about strict library match requirements:\n\n&gt; Your point about library compatibility and portability between distros is a good one, but the Nvidia library does not and can not fix that. The libraries that the build (as I understand) are built against reasonably old and thus compatible versions of glibc, so we get general compatibility across most (if not all) current distributions of Linux.\nI was not referring to glibc or Linux distribution compatibility, but about the possibility to have less strict matching requirement between the different components of the NVIDIA stack (driver, libraries, CUDA) between host and containers. The <https://github.com/NVIDIA/nvidia-docker|`nvidia-docker`> devs lay it out pretty well <https://github.com/NVIDIA/nvidia-docker/wiki/NVIDIA-driver|here>  and explain it much better than I could.",
                "pretext": "[singularityware/singularity] New comment by kcgthb on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300903375|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494533460.192454",
        "date": 1494533460192
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/666|#666 Add/citation> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/666|#666 Add/citation> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494531721.737041",
        "date": 1494531721737
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/665|#665 add citation to readme> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/665|#665 add citation to readme> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494531700.731692",
        "date": 1494531700731
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#666 Add/citation' https://github.com/singularityware/singularity/pull/666 by vsoch",
                "text": "Fixes #\n\nChanges proposed in this pull request\n\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#666 Add/citation",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/666",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494531690.729318",
        "date": 1494531690729
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#665 add citation to readme' https://github.com/singularityware/singularity/pull/665 by vsoch",
                "text": "wooohoo!\n\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#665 add citation to readme",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/665",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494531473.673366",
        "date": 1494531473673
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300854514|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "text": "I like that idea, but won't get it into 2.3 before the release. I will keep it here for the 2.4 development which will start as soon as 2.3 hits master.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300854514|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494522474.167459",
        "date": 1494522474167
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-300634185|#660: compiling singularity on RHEL 5>",
                "text": "Hi @Amjadhpc,\n\nWhat version of Singularity are you testing? You may have to go back and use Singularity v2.1.\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/660#issuecomment-300634185|#660: compiling singularity on RHEL 5>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494456447.088138",
        "date": 1494456447088
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by georghildebrand on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300578092|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "text": "That's indeed a good idea. E.g.. In our cluster some GPU servers have\ndifferent driver versions. In that case such a system would help to only\nrebuild the driver. But it could make the def file look more complicated.\n\nI think if the bootstrap is not repeated over and over again it's already a\nbig win.\n\nWill test it tomorrow! Thanks for your excellent work!\n\nAm 10.05.2017 20:26 schrieb \"Vanessa Sochat\" <mailto:notifications@github.com|notifications@github.com>:\n\nhey is there any reason the --section command couldn't specify some\nadditional sections of post? For example, let's say you have a tensorflow\ndefinition file, and there are different installation dependencies,\ndepending on the cluster. You could either have different %post sections\nand specify to activate one (and not the other) or some ability to specify\nsubsections of %post and then choose which to build (and the\nvariable/choice would be recorded in the labels, etc.\n\n—\nYou are receiving this because you authored the thread.\nReply to this email directly, view it on GitHub\n<https://github.com/singularityware/singularity/issues/658#issuecomment-300571712>,\nor mute the thread\n<https://github.com/notifications/unsubscribe-auth/APQpdpodBZfTbTn-bTiw-gJsBkurtoh8ks5r4gFAgaJpZM4NRKIG>\n.",
                "pretext": "[singularityware/singularity] New comment by georghildebrand on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300578092|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494442161.786452",
        "date": 1494442161786
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300571712|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "text": "hey is there any reason the --section command couldn't specify some additional sections of post? For example, let's say you have a tensorflow definition file, and there are different installation dependencies, depending on the cluster. You could either have different `%post` sections and specify to activate one (and not the other) or some ability to specify subsections of `%post` and then choose which to build (and the variable/choice would be recorded in the labels, etc.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300571712|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494440767.390414",
        "date": 1494440767390
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/658|#658 [feature request] Option to run only parts of the bootstrapping process.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/658|#658 [feature request] Option to run only parts of the bootstrapping process.> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494440339.266596",
        "date": 1494440339266
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300569678|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "text": "Hi there. In development d541fb954e282fc91993c9b14f0c074755f462d5, I have added the feature to do:\n\n```$ sudo singularity bootstrap --section post container.img bootstrap.def\n```\n\nLet me know if you have any questions or issues with it.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/658#issuecomment-300569678|#658: [feature request] Option to run only parts of the bootstrapping process.>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494440339.266571",
        "date": 1494440339266
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ashiklom on issue <https://github.com/singularityware/singularity/issues/664#issuecomment-300464035|#664: `urllib` module dependencies for Python 3>",
                "text": "@vsoch Thanks for getting back to me! Yes, everything seems to be working fine off the development branch, so I'll go ahead and close this issue.",
                "pretext": "[singularityware/singularity] New comment by ashiklom on issue <https://github.com/singularityware/singularity/issues/664#issuecomment-300464035|#664: `urllib` module dependencies for Python 3>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494418600.058287",
        "date": 1494418600058
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/664|#664 `urllib` module dependencies for Python 3> by <https://github.com/ashiklom|ashiklom>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/664|#664 `urllib` module dependencies for Python 3> by <https://github.com/ashiklom|ashiklom>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494418600.058279",
        "date": 1494418600058
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by alanakbik on issue <https://github.com/singularityware/singularity/issues/474#issuecomment-300450757|#474: Container does not have a valid `/bin/sh`>",
                "text": "Running 'apt-get install sudo' in the container solved this issue for me.\n(The torch installation script has many sudo calls so it was necessary.)",
                "pretext": "[singularityware/singularity] New comment by alanakbik on issue <https://github.com/singularityware/singularity/issues/474#issuecomment-300450757|#474: Container does not have a valid `/bin/sh`>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494414749.447086",
        "date": 1494414749447
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300374400|#611: Nvidia GPU support with different driver versions?>",
                "text": "Hey, so I have done a few more tests and the above error does appear very often when allocating a lot of GPUs (&gt;= 12), but sometimes it does actually work... grr, I don't like that. But I think we have to be careful as it could be a tensorflow issue. Indeed the error looks very similar to <https://github.com/tensorflow/tensorflow/issues/2239> which, in the case of docker, was apparently fixed by using nvidia-docker instead. However, please note that we do have a 1.0 of tensorflow compiled and installed on this cluster and it works well even with up to 16 GPUs, but it is not the latest version.\n\nI also quickly tested &lt;torch-gpu|docker://romanbilyi/torch-gpu&gt; using singularity `--nv` with multiple GPUs and didn't get any error when loading cutorch and doing very simple stuffs.",
                "pretext": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300374400|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494392553.248243",
        "date": 1494392553248
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300360468|#611: Nvidia GPU support with different driver versions?>",
                "text": "thanks for testing this @thiell !! :dango: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300360468|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494385273.884262",
        "date": 1494385273884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300358328|#611: Nvidia GPU support with different driver versions?>",
                "text": "Hi @gmkurtzer and sorry for the delay!!\n\nThanks for adding `--nv`! I tried it (using 2.2.99-development.g945c6ee) and played a bit with  `docker://tensorflow/tensorflow:latest-gpu`...\n\nThe good news is that it seems to work well in jobs that allocate a single GPU (in slurm, so a single GPU device is visible - note: we're using device cgroup).\n\nExample (single GPU allocation):\n```Singularity tensorflow:latest-gpu:~&gt; python\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt; &gt; &gt; import tensorflow as tf\n&gt; &gt; &gt; with tf.device('/gpu:0'):\n&gt; &gt; &gt; ...     a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n&gt; &gt; &gt; ...     b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n&gt; &gt; &gt; ...     c = tf.matmul(a, b)\n&gt; &gt; &gt; ... \n&gt; &gt; &gt; sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n&gt; &gt; &gt; 2017-05-10 02:23:25.640377: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:25.640407: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:25.640416: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:26.163631: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: \n&gt; &gt; &gt; name: Tesla K80\n&gt; &gt; &gt; major: 3 minor: 7 memoryClockRate (GHz) 0.8235\n&gt; &gt; &gt; pciBusID 0000:85:00.0\n&gt; &gt; &gt; Total memory: 11.17GiB\n&gt; &gt; &gt; Free memory: 11.11GiB\n&gt; &gt; &gt; 2017-05-10 02:23:26.163686: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 \n&gt; &gt; &gt; 2017-05-10 02:23:26.163696: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y \n&gt; &gt; &gt; 2017-05-10 02:23:26.163712: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: Tesla K80, pci bus id: 0000:85:00.0)\n&gt; &gt; &gt; Device mapping:\n&gt; &gt; &gt; /job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: Tesla K80, pci bus id: 0000:85:00.0\n&gt; &gt; &gt; 2017-05-10 02:23:26.227264: I tensorflow/core/common_runtime/direct_session.cc:257] Device mapping:\n&gt; &gt; &gt; /job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: Tesla K80, pci bus id: 0000:85:00.0\n&gt; &gt; &gt; \n&gt; &gt; &gt; print(sess.run(c))\n&gt; &gt; &gt; MatMul: (MatMul): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507606: I tensorflow/core/common_runtime/simple_placer.cc:841] MatMul: (MatMul)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; b: (Const): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507659: I tensorflow/core/common_runtime/simple_placer.cc:841] b: (Const)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; a: (Const): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507679: I tensorflow/core/common_runtime/simple_placer.cc:841] a: (Const)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; [[ 22.  28.]\n&gt; &gt; &gt;  [ 49.  64.]]\n&gt; &gt; &gt; ```\nHowever, for jobs using multiple GPUs, even when effectively using only one GPU in TensorFlow, I get the following error messages:\n\n```Singularity tensorflow:latest-gpu:~&gt; python\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt; &gt; &gt; import tensorflow as tf\n&gt; &gt; &gt; with tf.device('/gpu:0'):\n&gt; &gt; &gt; ...     a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n&gt; &gt; &gt; ...     b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n&gt; &gt; &gt; ...     c = tf.matmul(a, b)\n&gt; &gt; &gt; ... \n&gt; &gt; &gt; sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n&gt; &gt; &gt; 2017-05-10 02:27:16.126277: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.126330: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.126353: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.139414: E tensorflow/stream_executor/cuda/cuda_driver.cc:405] failed call to cuInit: CUDA_ERROR_UNKNOWN\n&gt; &gt; &gt; 2017-05-10 02:27:16.139496: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: xs-0007\n&gt; &gt; &gt; 2017-05-10 02:27:16.139523: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:165] hostname: xs-0007\n&gt; &gt; &gt; 2017-05-10 02:27:16.139594: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] libcuda reported version is: Invalid argument: expected %d.%d or %d.%d.%d form for driver version; got \"1\"\n&gt; &gt; &gt; 2017-05-10 02:27:16.139657: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:369] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  361.93.03  Tue Sep 27 22:40:25 PDT 2016\n&gt; &gt; &gt; GCC version:  gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) \n&gt; &gt; &gt; \"\"\"\n&gt; &gt; &gt; 2017-05-10 02:27:16.139718: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:193] kernel reported version is: 361.93.3\n&gt; &gt; &gt; Device mapping: no known devices.\n&gt; &gt; &gt; 2017-05-10 02:27:16.143122: I tensorflow/core/common_runtime/direct_session.cc:257] Device mapping:\n&gt; &gt; &gt; ```\nI tried with several different GPU indexes, same issue.",
                "pretext": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-300358328|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494384282.800034",
        "date": 1494384282800
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/39#issuecomment-300356717|#39: strange mount/unmount behavior>",
                "text": "Hi @gmkurtzer and sorry for the delay!!\n\nThanks for adding `--nv`! I tried it (using 2.2.99-development.g945c6ee) and played a bit with  `docker://tensorflow/tensorflow:latest-gpu`...\n\nThe good news is that it seems to work well in jobs that allocate a single GPU (in slurm, so a single GPU device is visible - note: we're using device cgroup).\n\nExample (single GPU allocation):\n```Singularity tensorflow:latest-gpu:~&gt; python\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt; &gt; &gt; import tensorflow as tf\n&gt; &gt; &gt; with tf.device('/gpu:0'):\n&gt; &gt; &gt; ...     a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n&gt; &gt; &gt; ...     b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n&gt; &gt; &gt; ...     c = tf.matmul(a, b)\n&gt; &gt; &gt; ... \n&gt; &gt; &gt; sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n&gt; &gt; &gt; 2017-05-10 02:23:25.640377: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:25.640407: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:25.640416: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:23:26.163631: I tensorflow/core/common_runtime/gpu/gpu_device.cc:887] Found device 0 with properties: \n&gt; &gt; &gt; name: Tesla K80\n&gt; &gt; &gt; major: 3 minor: 7 memoryClockRate (GHz) 0.8235\n&gt; &gt; &gt; pciBusID 0000:85:00.0\n&gt; &gt; &gt; Total memory: 11.17GiB\n&gt; &gt; &gt; Free memory: 11.11GiB\n&gt; &gt; &gt; 2017-05-10 02:23:26.163686: I tensorflow/core/common_runtime/gpu/gpu_device.cc:908] DMA: 0 \n&gt; &gt; &gt; 2017-05-10 02:23:26.163696: I tensorflow/core/common_runtime/gpu/gpu_device.cc:918] 0:   Y \n&gt; &gt; &gt; 2017-05-10 02:23:26.163712: I tensorflow/core/common_runtime/gpu/gpu_device.cc:977] Creating TensorFlow device (/gpu:0) -&gt; (device: 0, name: Tesla K80, pci bus id: 0000:85:00.0)\n&gt; &gt; &gt; Device mapping:\n&gt; &gt; &gt; /job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: Tesla K80, pci bus id: 0000:85:00.0\n&gt; &gt; &gt; 2017-05-10 02:23:26.227264: I tensorflow/core/common_runtime/direct_session.cc:257] Device mapping:\n&gt; &gt; &gt; /job:localhost/replica:0/task:0/gpu:0 -&gt; device: 0, name: Tesla K80, pci bus id: 0000:85:00.0\n&gt; &gt; &gt; \n&gt; &gt; &gt; print(sess.run(c))\n&gt; &gt; &gt; MatMul: (MatMul): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507606: I tensorflow/core/common_runtime/simple_placer.cc:841] MatMul: (MatMul)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; b: (Const): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507659: I tensorflow/core/common_runtime/simple_placer.cc:841] b: (Const)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; a: (Const): /job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; 2017-05-10 02:23:47.507679: I tensorflow/core/common_runtime/simple_placer.cc:841] a: (Const)/job:localhost/replica:0/task:0/gpu:0\n&gt; &gt; &gt; [[ 22.  28.]\n&gt; &gt; &gt;  [ 49.  64.]]\n&gt; &gt; &gt; ```\nHowever, for jobs using multiple GPUs, even when effectively using only one GPU in TensorFlow, I get the following error messages:\n\n```Singularity tensorflow:latest-gpu:~&gt; python\nPython 2.7.12 (default, Nov 19 2016, 06:48:10) \n[GCC 5.4.0 20160609] on linux2\nType \"help\", \"copyright\", \"credits\" or \"license\" for more information.\n&gt; &gt; &gt; import tensorflow as tf\n&gt; &gt; &gt; with tf.device('/gpu:0'):\n&gt; &gt; &gt; ...     a = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[2, 3], name='a')\n&gt; &gt; &gt; ...     b = tf.constant([1.0, 2.0, 3.0, 4.0, 5.0, 6.0], shape=[3, 2], name='b')\n&gt; &gt; &gt; ...     c = tf.matmul(a, b)\n&gt; &gt; &gt; ... \n&gt; &gt; &gt; sess = tf.Session(config=tf.ConfigProto(log_device_placement=True))\n&gt; &gt; &gt; 2017-05-10 02:27:16.126277: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.1 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.126330: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use SSE4.2 instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.126353: W tensorflow/core/platform/cpu_feature_guard.cc:45] The TensorFlow library wasn't compiled to use AVX instructions, but these are available on your machine and could speed up CPU computations.\n&gt; &gt; &gt; 2017-05-10 02:27:16.139414: E tensorflow/stream_executor/cuda/cuda_driver.cc:405] failed call to cuInit: CUDA_ERROR_UNKNOWN\n&gt; &gt; &gt; 2017-05-10 02:27:16.139496: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:158] retrieving CUDA diagnostic information for host: xs-0007\n&gt; &gt; &gt; 2017-05-10 02:27:16.139523: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:165] hostname: xs-0007\n&gt; &gt; &gt; 2017-05-10 02:27:16.139594: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:189] libcuda reported version is: Invalid argument: expected %d.%d or %d.%d.%d form for driver version; got \"1\"\n&gt; &gt; &gt; 2017-05-10 02:27:16.139657: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:369] driver version file contents: \"\"\"NVRM version: NVIDIA UNIX x86_64 Kernel Module  361.93.03  Tue Sep 27 22:40:25 PDT 2016\n&gt; &gt; &gt; GCC version:  gcc version 4.4.7 20120313 (Red Hat 4.4.7-17) (GCC) \n&gt; &gt; &gt; \"\"\"\n&gt; &gt; &gt; 2017-05-10 02:27:16.139718: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:193] kernel reported version is: 361.93.3\n&gt; &gt; &gt; Device mapping: no known devices.\n&gt; &gt; &gt; 2017-05-10 02:27:16.143122: I tensorflow/core/common_runtime/direct_session.cc:257] Device mapping:\n&gt; &gt; &gt; ```\nI tried with several different GPU indexes, same issue.",
                "pretext": "[singularityware/singularity] New comment by thiell on issue <https://github.com/singularityware/singularity/issues/39#issuecomment-300356717|#39: strange mount/unmount behavior>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494383568.740627",
        "date": 1494383568740
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300315680|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "Yes I'm using `--privileged` mode on Windows.\n\nOn Tue, May 9, 2017 at 2:25 PM, Vanessa Sochat <mailto:notifications@github.com|notifications@github.com>\nwrote:\n\n&gt; you are running this with privileged mode? Eg:\n&gt; \n&gt; docker run -it --privileged vanessa/test\n&gt; \n&gt; So - I just tried this, with a basic ubuntu image with the Dockerfile and\n&gt; command above, and my entire system crashed. I'm not sure I want to try\n&gt; that again, lol. Is there someone with non ubuntu (mac) that could give\n&gt; this a test? @gmkurtzer <https://github.com/gmkurtzer> ? Here is what you\n&gt; do:\n&gt; \n&gt; 1. make a folder somewhere, call it test\n&gt; 2. Copy the file above that chris provided into a file called\n&gt;      Dockerfile in that folder\n&gt; 3. Do docker build -t dockeruser/test .\n&gt; 4. Then run the image with privileged like\n&gt; \n&gt; docker run -it --privileged dockeruser/test\n&gt; \n&gt; then in the image, try something basic first:\n&gt; \n&gt; singularity run docker://ubuntu\n&gt; \n&gt; and hold your breath for a possible crash, if it doesn't crash and works\n&gt; ok, try @chrisfilo <https://github.com/chrisfilo> image\n&gt; \n&gt; singularity --debug run docker://bids/mriqc:0.9.3\n&gt; \n&gt; and then see if you get the same error. I think @chrisfilo\n&gt; <https://github.com/chrisfilo> is either still on Mac or Windows again?\n&gt; There is something funky going on likely because we are using priviledged\n&gt; docker --&gt; docker import via singularity &lt;-- and back.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/662#issuecomment-300306324>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AAOkpz2upLrQ39_VbTdJz55DEOhOVQXfks5r4NnbgaJpZM4NUX3f>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300315680|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494367594.808758",
        "date": 1494367594808
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300306324|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "you are running this with privileged mode? Eg:\n\n```docker run -it --privileged vanessa/test\n```\n\nSo - I just tried this, with a basic ubuntu image with the Dockerfile and command above, and my entire system crashed. I'm not sure I want to try that again, lol. Is there someone with non ubuntu (mac) that could give this a test? @gmkurtzer ? Here is what you do:\n\n1. make a folder somewhere, call it `test`\n2. Copy the file above that chris provided into a  file called `Dockerfile` in that folder\n3. Do `docker build -t dockeruser/test .`\n4. Then run the image with privileged like\n\n```docker run -it --privileged dockeruser/test\n```\nthen in the image, try something basic first:\n\n```singularity run docker://ubuntu\n```\nand hold your breath for a possible crash, if it doesn't crash and works ok, try @chrisfilo image\n\n```singularity --debug run docker://bids/mriqc:0.9.3\n```\n\nand then see if you get the same error. I think @chrisfilo is either still on Mac or Windows again? There is something funky going on likely because we are using priviledged docker --&gt; docker import via singularity &lt;-- and back.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300306324|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494365147.304707",
        "date": 1494365147304
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300284557|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "I've tried with non-root user. Same result:\n\n```\n[newuser@febd2ce0fb13 ~]$ singularity exec docker://bids/mriqc:0.9.3 env\nDocker image path: index.docker.io/bids/mriqc:0.9.3\nCache folder set to /home/newuser/.singularity/docker\n[25/25] |===================================| 100.0%\nCreating container runtime...\nSingularity: action-suid (U=500,P=31)&gt; USER=newuser, IMAGE='mriqc:0.9.3', COMMAND='exec'\n\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nPOSSUMDIR=/usr/share/fsl/5.0\nAFNI_TTATLAS_DATASET=/usr/share/afni/atlases\nAFNI_PLUGINPATH=/usr/lib/afni/plugins\nUSER=newuser\nHOSTNAME=febd2ce0fb13\nSHLVL=1\nLD_LIBRARY_PATH=/usr/lib/fsl/5.0::/.singularity.d/libs\nHOME=/home/newuser\nPS1=Singularity&gt;\nG_BROKEN_FILENAMES=1\nFSLDIR=/usr/share/fsl/5.0\nAFNI_IMSAVE_WARNINGS=NO\nANTSPATH=/opt/ants\nFSLMULTIFILEQUIT=TRUE\nFSLTCLSH=/usr/bin/tclsh\nTERM=xterm\nPATH=/usr/local/miniconda/bin:/opt/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nFSLOUTPUTTYPE=NIFTI_GZ\nLANG=C.UTF-8\nAFNI_MODELPATH=/usr/lib/afni/models\nLS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:_.tar=01;31:_.tgz=01;31:_.arj=01;31:_.taz=01;31:_.lzh=01;31:_.lzma=01;31:_.tlz=01;31:_.txz=01;31:_.zip=01;31:_.z=01;31:_.Z=01;31:_.dz=01;31:_.gz=01;31:_.lz=01;31:_.xz=01;31:_.bz2=01;31:_.tbz=01;31:_.tbz2=01;31:_.bz=01;31:_.tz=01;31:_.deb=01;31:_.rpm=01;31:_.jar=01;31:_.rar=01;31:_.ace=01;31:_.zoo=01;31:_.cpio=01;31:_.7z=01;31:_.rz=01;31:_.jpg=01;35:_.jpeg=01;35:_.gif=01;35:_.bmp=01;35:_.pbm=01;35:_.pgm=01;35:_.ppm=01;35:_.tga=01;35:_.xbm=01;35:_.xpm=01;35:_.tif=01;35:_.tiff=01;35:_.png=01;35:_.svg=01;35:_.svgz=01;35:_.mng=01;35:_.pcx=01;35:_.mov=01;35:_.mpg=01;35:_.mpeg=01;35:_.m2v=01;35:_.mkv=01;35:_.ogm=01;35:_.mp4=01;35:_.m4v=01;35:_.mp4v=01;35:_.vob=01;35:_.qt=01;35:_.nuv=01;35:_.wmv=01;35:_.asf=01;35:_.rm=01;35:_.rmvb=01;35:_.flc=01;35:_.avi=01;35:_.fli=01;35:_.flv=01;35:_.gl=01;35:_.dl=01;35:_.xcf=01;35:_.xwd=01;35:_.yuv=01;35:_.cgm=01;35:_.emf=01;35:_.axv=01;35:_.anx=01;35:_.ogv=01;35:_.ogx=01;35:_.aac=01;36:_.au=01;36:_.flac=01;36:_.mid=01;36:_.midi=01;36:_.mka=01;36:_.mp3=01;36:_.mpc=01;36:_.ogg=01;36:_.ra=01;36:_.wav=01;36:_.axa=01;36:_.oga=01;36:_.spx=01;36:_.xspf=01;36:\nFSLWISH=/usr/bin/wish\nCRN_SHARED_DATA=/niworkflows_data\nSINGULARITY_CONTAINER=mriqc:0.9.3\nPWD=/home/newuser\nLC_ALL=C.UTF-8\nHISTFILE=\nSINGULARITY_NAME=mriqc:0.9.3\n[newuser@febd2ce0fb13 ~]$ Singularity: singularity: cleanupd (U=500,P=100718)&gt; Failed removing file: /tmp/.singularity-runtime.2CKUBwBh/container/bids/mriqc:0.9.3/libwebp-0.5.2-linux-x86-64/include/webp\n\nSingularity: singularity: cleanupd (U=500,P=100718)&gt; Could not remove directory /tmp/.singularity-runtime.2CKUBwBh: Directory not empty\n\nSingularity: singularity: cleanupd (U=500,P=100718)&gt; Retval = 255\n```\n\nHere's the content of the relevant tmp folder:\n\n```[newuser@febd2ce0fb13 ~]$ ls -al /tmp/.singularity-runtime.2CKUBwBh/container/bids/mriqc\\:0.9.3/\ntotal 2236\ndrwx------ 23 newuser newuser    4096 May  9 19:52 .\ndrwx------  3 newuser newuser    4096 May  9 19:48 ..\ndrwx------  2 newuser newuser    4096 Dec 13 20:24 bin\ndrwx------  2 newuser newuser    4096 Apr 12  2016 boot\ndrwx------  2 newuser newuser    4096 Dec 13 20:23 dev\nlrwxrwxrwx  1 newuser newuser      36 May  9 19:49 environment -&gt; .singularity.d/env/90-environment.sh\ndrwx------ 60 newuser newuser    4096 Dec 13 20:24 etc\nlrwxrwxrwx  1 newuser newuser      27 May  9 19:49 .exec -&gt; .singularity.d/actions/exec\ndrwx------  2 newuser newuser    4096 Apr 12  2016 home\ndrwx------  8 newuser newuser    4096 Sep 13  2015 lib\ndrwx------  2 newuser newuser    4096 Dec 13 20:24 lib64\ndrwx------  6 newuser newuser    4096 May  9 19:51 libwebp-0.5.2-linux-x86-64\n-rw-r--r--  1 newuser newuser 2185345 Apr 23 18:15 libwebp-0.5.2-linux-x86-64.tar.gz\ndrwx------  2 newuser newuser    4096 Dec 13 20:23 media\ndrwx------  2 newuser newuser    4096 Dec 13 20:23 mnt\ndrwx------  3 newuser newuser    4096 Apr 23 18:21 niworkflows_data\ndrwx------  3 newuser newuser    4096 Dec 13 20:23 opt\ndrwx------  2 newuser newuser    4096 Apr 12  2016 proc\n-rw-rw-r--  1 newuser newuser     213 Apr 23 18:07 requirements.txt\ndrwx------  8 newuser newuser    4096 Dec 13 20:24 root\ndrwx------  5 newuser newuser    4096 Dec 13 20:24 run\nlrwxrwxrwx  1 newuser newuser      26 May  9 19:49 .run -&gt; .singularity.d/actions/run\ndrwx------  2 newuser newuser    4096 Dec 13 20:24 sbin\nlrwxrwxrwx  1 newuser newuser      28 May  9 19:49 .shell -&gt; .singularity.d/actions/shell\nlrwxrwxrwx  1 newuser newuser      24 May  9 19:49 singularity -&gt; .singularity.d/runscript\ndrwx------  5 newuser newuser    4096 May  9 19:52 .singularity.d\ndrwx------  3 newuser newuser    4096 Feb  5  2016 sys\ndrwx------  3 newuser newuser    4096 Dec 13 20:24 tmp\ndrwx------ 11 newuser newuser    4096 Dec 13 20:23 usr\ndrwx------ 11 newuser newuser    4096 Dec 13 20:24 var\n-rw-rw-r--  1 newuser newuser       6 May  9 03:37 version\n```\n\nI don't get this error when running with `--debug`, but I don't think singularity is attempting to delete the folder:\n\n```\n[newuser@0e726194b97a ~]$ singularity --debug exec docker://bids/mriqc:0.9.3 env\nEnabling debugging\nEnding argument loop\nSingularity version: 2.2.99-HEAD.g945c6ee\nExec'ing: /usr/local/libexec/singularity/cli/exec.exec\nEvaluating args: 'docker://bids/mriqc:0.9.3 env'\nVERBOSE2 SINGULARITY_COMMAND_ASIS found as False\nVERBOSE2 SINGULARITY_ROOTFS found as /tmp/.singularity-runtime.8Wthh452/container/bids/mriqc:0.9.3\nVERBOSE2 SINGULARITY_METADATA_FOLDER found as /tmp/.singularity-runtime.8Wthh452/container/bids/mriqc:0.9.3/.singularity.d\nVERBOSE2 SINGULARITY_FIX_PERMS found as False\nVERBOSE2 SINGULARITY_COLORIZE not defined (None)\nVERBOSE2 SINGULARITY_DISABLE_CACHE found as False\nVERBOSE2 SINGULARITY_CACHEDIR found as /home/newuser/.singularity\nVERBOSE2 SINGULARITY_ENVBASE found as /tmp/.singularity-runtime.8Wthh452/container/bids/mriqc:0.9.3/.singularity.d/env\nVERBOSE2 SINGULARITY_LABELFILE found as /tmp/.singularity-runtime.8Wthh452/container/bids/mriqc:0.9.3/.singularity.d/labels.json\nVERBOSE2 SINGULARITY_INCLUDECMD found as False\nVERBOSE2 SINGULARITY_PULLFOLDER found as /home/newuser\nVERBOSE2 SHUB_NAMEBYHASH not defined (None)\nVERBOSE2 SHUB_NAMEBYCOMMIT not defined (None)\nVERBOSE2 SHUB_CONTAINERNAME not defined (None)\nVERBOSE2 SINGULARITY_CONTENTS found as /tmp/.singularity-layers.p05BbE5N\nVERBOSE2 SINGULARITY_PYTHREADS found as 9\nVERBOSE2 SINGULARITY_CONTAINER found as docker://bids/mriqc:0.9.3\nDEBUG Found uri docker://\nDEBUG\n*** STARTING DOCKER IMPORT PYTHON  ****\nDEBUG Docker layers and (env,labels,runscript) will be written to: /tmp/.singularity-layers.p05BbE5N\nVERBOSE2 SINGULARITY_DOCKER_USERNAME not defined (None)\nVERBOSE2 SINGULARITY_DOCKER_PASSWORD found\nDEBUG Starting Docker IMPORT, includes environment, runscript, and metadata.\nVERBOSE Docker image: bids/mriqc:0.9.3\nVERBOSE2 Specified Docker ENTRYPOINT as %runscript.\nDEBUG Headers found: Content-Type,Accept\nVERBOSE Registry: index.docker.io\nVERBOSE Namespace: bids\nVERBOSE Repo Name: mriqc\nVERBOSE Repo Tag: 0.9.3\nVERBOSE Version: None\nVERBOSE Obtaining tags: <https://index.docker.io/v2/bids/mriqc/tags/list>\nDEBUG GET <https://index.docker.io/v2/bids/mriqc/tags/list>\nDEBUG Http Error with code 401\nDEBUG GET <https://auth.docker.io/token?service=registry.docker.io&amp;expires_in=9000&amp;scope=repository:bids/mriqc:pull>\nDEBUG Headers found: Content-Type,Authorization,Accept\nDocker image path: index.docker.io/bids/mriqc:0.9.3\nVERBOSE Obtaining manifest: <https://index.docker.io/v2/bids/mriqc/manifests/0.9.3>\nDEBUG GET <https://index.docker.io/v2/bids/mriqc/manifests/0.9.3>\nDEBUG Image manifest version 2.1 found.\nDEBUG Adding digest sha256:243eedf190b75e91c01f330ff21c77f4c6dc385d7756dda9e7f39741ad4f4071\nDEBUG Adding digest sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\nDEBUG A…",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300284557|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494360121.035646",
        "date": 1494360121035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/664#issuecomment-300278266|#664: `urllib` module dependencies for Python 3>",
                "text": "hey @ashiklom! Could you retry this on the development branch? We no longer have this cli.py, nor do we have utils (it was renamed to suitls to deal with a conflict) so the bug might not be there anymore. Let's update this PR for the development branch, and then I will fix any issues right away!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/664#issuecomment-300278266|#664: `urllib` module dependencies for Python 3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494358684.649760",
        "date": 1494358684649
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300275616|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "hey @chrisfilo ! No worries about the version. I think in this case, running as root would mean that home is in /root, and then the container's home is mounted as such, but that is also where the application lives... and there must be some permission error cleaning up the temporary directory. I just tried this as a (non root) user and it seems to work ok:\n\n```vanessa@vanessa-ThinkPad-T450s:~$ singularity run docker://bids/mriqc:0.9.3\nDocker image path: index.docker.io/bids/mriqc:0.9.3\nCache folder set to /home/vanessa/.singularity/docker\n[25/25] |                                   | 100.0% \nImporting: base Singularity environment\nExploding layer: sha256:243eedf190b75e91c01f330ff21c77f4c6dc385d7756dda9e7f39741ad4f4071.tar.gz\nExploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\nExploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\nExploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\nExploding layer: sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\nExploding layer: sha256:de5b15143d20c60c776fd5cd31ca09caf1e293ac50f98f18bcde5dc6a84d55ac.tar.gz\nExploding layer: sha256:54a5564a38ad416b14910a6dc41fec03ff8df40581d9cf026c5f05e4d3ef26f0.tar.gz\nExploding layer: sha256:91f577f6f911091eb01b3f1819860d92c4e1fb8550f37773088f0988fdd14cf5.tar.gz\nExploding layer: sha256:2f506b00f891f2e84f62cf1acdf59423eda26f37be82f7e39e2d5945e55b707d.tar.gz\nExploding layer: sha256:12f2072347221f221d1676db9f33d123fa4540f290446e0ac7722ed4ef0a0810.tar.gz\nExploding layer: sha256:9ddcf08966105c7e4be67e90fa25881617485ab6cfd74072cd3a1ae913301274.tar.gz\nExploding layer: sha256:d4a29c916103cde68802c58bf4ec909216cc4972895d2d5b1d448b0c8b17eceb.tar.gz\nExploding layer: sha256:7f4975bb38892fcdb9285fa22776bdd387c1c947c26aa0c7c3b62a0e8650df39.tar.gz\nExploding layer: sha256:83539119cf7d0c4d2076e8cdde9dcce2547aca339d0f1a4b6e28b28ae6933caa.tar.gz\nExploding layer: sha256:594bf226e62babfe551e6a88838ef0c5798a447ecedd65d5ac69abce4ae2d351.tar.gz\nExploding layer: sha256:399f9aadedac10094e52dc7d685ef8a04e54074bd157ebf1257cc0c4cedf7163.tar.gz\nExploding layer: sha256:7d6bbcadbe0101e0f7deb1b6a83d2a520e805447e5afd48303a0229c034df2ef.tar.gz\nExploding layer: sha256:d9e9382a21dd7dfe6babf8a4e744cafd6f2f7ebb983e2d40c7cb13fbc98b115d.tar.gz\nExploding layer: sha256:6f06d723971b4f12e240f3336a17bf45057b575e501bc65071d4298764d892e3.tar.gz\nExploding layer: sha256:91641bf41cb3485b405e4b2a287d8abc2c5545367faad1e2f72f103bff9c18f8.tar.gz\nExploding layer: sha256:bd842a2105a862f62ba4ad726531029be49046c290307e9c07a688c89f4606e6.tar.gz\nExploding layer: sha256:4a70713c436f2350e8a9f1c1e6c823290f331254c6c21d5657056499d8575608.tar.gz\nExploding layer: sha256:63fe8c0068a811103c702452985368fc99014f83b5f0151cf631644f13f383b2.tar.gz\nExploding layer: sha256:4daad8bdde31f5969d6a44800e993a911bed25853b2f89417b07ce7f0ac67714.tar.gz\nExploding layer: sha256:b3e1c725a85f0953e81815b7c7aabfad9ebfd90af53f99248981282b8045d787.tar.gz\nExploding layer: sha256:2bf1a0cf6f2a1259591399f9afe1956e03128633732c390aa0889af805e1b9a4.tar.gz\n/usr/local/miniconda/lib/python3.6/site-packages/sklearn/externals/joblib/_multiprocessing_helpers.py:28: UserWarning: [Errno 38] Function not implemented.  joblib will operate in serial mode\n  warnings.warn('%s.  joblib will operate in serial mode' % (e,))\nFontconfig warning: ignoring C.UTF-8: not a valid language tag\nusage: mriqc [-h] [-v]\n             [--participant_label [PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]]\n             [-m [{T1w,bold,T2w} [{T1w,bold,T2w} ...]]] [-s SESSION_ID]\n             [-r RUN_ID] [--nthreads NTHREADS] [--n_procs N_PROCS]\n             [--mem_gb MEM_GB] [--write-graph] [--dry-run]\n             [--use-plugin USE_PLUGIN] [--ica] [--testing] [--profile]\n             [--hmc-afni] [--hmc-fsl] [-f] [--fft-spikes-detector]\n             [-w WORK_DIR] [--report-dir REPORT_DIR] [--verbose-reports]\n             [--ants-nthreads ANTS_NTHREADS] [--ants-settings ANTS_SETTINGS]\n             [--deoblique] [--despike] [--start-idx START_IDX]\n             [--stop-idx STOP_IDX] [--correct-slice-timing]\n             bids_dir output_dir {participant,group} [{participant,group} ...]\nmriqc: error: the following arguments are required: bids_dir, output_dir, analysis_level\n```\nsome things to try:\n\n• if you can run as a user, give that a go, and see if you can reproduce what I did above\n• if you must run as root, then let's look at the above with `--debug` so we can see exactly what is going on. I would also try specifying `-H/--home` to be something else, so there isn't the weirdness of having the main application code and root home in the same spot.\n• and likely you won't choose this, but it would be worth considering for future images to not have core application stuffs in root's home.\n\nAnyway - whatever you try - please post the commands and debug output so I can help to resolve. Ty!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300275616|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494358056.483698",
        "date": 1494358056483
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/663|#663 Environment variables defined in Dockerfile are lost when running images from Docker Hub> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/663|#663 Environment variables defined in Dockerfile are lost when running images from Docker Hub> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494355198.694878",
        "date": 1494355198694
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/663#issuecomment-300262659|#663: Environment variables defined in Dockerfile are lost when running images from Docker Hub>",
                "text": "Apologies - works as expected with the development branch.",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/663#issuecomment-300262659|#663: Environment variables defined in Dockerfile are lost when running images from Docker Hub>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494355198.694836",
        "date": 1494355198694
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300240523|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "I was not (sorry for that). I've tried again with 945c6ee343a1e6101e22396a90dfdb5944f442b6 (most current on development branch) and I get the same error:\n\n```\n[root@e4fb0252c326 /]# singularity run docker://bids/mriqc:0.9.3\nDocker image path: index.docker.io/bids/mriqc:0.9.3\nCache folder set to /root/.singularity/docker\n[25/25] |===================================| 100.0%\nCreating container runtime...\nSingularity: action-suid (U=0,P=27)&gt; USER=root, IMAGE='mriqc:0.9.3', COMMAND='run'\n\nFontconfig warning: ignoring C.UTF-8: not a valid language tag\nusage: mriqc [-h] [-v]\n             [--participant_label [PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]]\n             [-m [{T1w,bold,T2w} [{T1w,bold,T2w} ...]]] [-s SESSION_ID]\n             [-r RUN_ID] [--nthreads NTHREADS] [--n_procs N_PROCS]\n             [--mem_gb MEM_GB] [--write-graph] [--dry-run]\n             [--use-plugin USE_PLUGIN] [--ica] [--testing] [--profile]\n             [--hmc-afni] [--hmc-fsl] [-f] [--fft-spikes-detector]\n             [-w WORK_DIR] [--report-dir REPORT_DIR] [--verbose-reports]\n             [--ants-nthreads ANTS_NTHREADS] [--ants-settings ANTS_SETTINGS]\n             [--deoblique] [--despike] [--start-idx START_IDX]\n             [--stop-idx STOP_IDX] [--correct-slice-timing]\n             bids_dir output_dir {participant,group} [{participant,group} ...]\nmriqc: error: the following arguments are required: bids_dir, output_dir, analysis_level\n[root@e4fb0252c326 /]# Singularity: singularity: cleanupd (U=0,P=100511)&gt; Failed removing file: /tmp/.singularity-runtime.e9QOcU07/container/bids/mriqc:0.9.3/libwebp-0.5.2-linux-x86-64/include/webp\n\nSingularity: singularity: cleanupd (U=0,P=100511)&gt; Could not remove directory /tmp/.singularity-runtime.e9QOcU07: Directory not empty\n\nSingularity: singularity: cleanupd (U=0,P=100511)&gt; Retval = 255\n```",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-300240523|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494350791.407384",
        "date": 1494350791407
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jjohnson42 on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-300171880|#628: Add a Gitter chat badge to README.md>",
                "text": "mattermost may be worth thinking about if you do self host",
                "pretext": "[singularityware/singularity] New comment by jjohnson42 on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-300171880|#628: Add a Gitter chat badge to README.md>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494338081.641573",
        "date": 1494338081641
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#664 `urllib` module dependencies for Python 3' https://github.com/singularityware/singularity/issues/664 by ashiklom",
                "text": "The `docker` module will fail when using current Python 3 (which is the <https://wiki.archlinux.org/index.php/python|default `python` executable on Arch Linux>, and it seems other distributions are <https://wiki.ubuntu.com/Python|moving in this direction as well>) with the following error:\n\n```Traceback (most recent call last):\n  File \"/usr/libexec/singularity/python/cli.py\", line 27, in &lt;module&gt;\n    from docker.api import get_layer, create_runscript, get_manifest, get_config, get_images\n  File \"/usr/libexec/singularity/python/docker/api.py\", line 29, in &lt;module&gt;\n    from utils import api_get, write_file, add_http\n  File \"/usr/libexec/singularity/python/utils.py\", line 32, in &lt;module&gt;\n    import urllib2\nModuleNotFoundError: No module named 'urllib2'\n```\n\nThis is because the `urllib2` module has been <https://docs.python.org/2/library/urllib2.html|deprecated in Python 3>.\n\nFortunately, this is easily fixed by running `2to3` on the `/usr/libexec/singularity/utils.py` script. I've provided the diff output from `2to3 utils.py` below.\n\n```\n--- utils.py    (original)\n+++ utils.py    (refactored)\n@@ -28,10 +28,10 @@\n import subprocess\n import sys\n import tarfile\n-import urllib\n\n*-import urllib2*\n\n-from urllib2 import HTTPError\n+import urllib.request, urllib.parse, urllib.error\n+import urllib.request, urllib.error, urllib.parse\n+\n+from urllib.error import HTTPError\n\n # Python less than version 3 must import OSError\n if sys.version_info[0] &lt; 3:\n@@ -74,7 +74,7 @@\n        try:\n            response = json.loads(response)\n        except:\n• print(\"Error parsing response for url %s, exiting.\" %(url))\n• ```    print((\"Error parsing response for url %s, exiting.\" %(url)))\n         sys.exit(1)\n\n     # If we have a next url```\n     @@ -128,16 +128,16 @@\n          do_stream = True\n\n      if data != None:\n• args = urllib.urlencode(data)\n• request = urllib2.Request(url=url,\n• args = urllib.parse.urlencode(data)\n• request = urllib.request.Request(url=url,\n                                    data=args,\n                                    headers=headers)\n      else:\n• request = urllib2.Request(url=url,\n• ``` request = urllib.request.Request(url=url,\n                                headers=headers)```\n      try:\n• response = urllib2.urlopen(request)\n• ``` response = urllib.request.urlopen(request)```\n      # If we have an HTTPError, try to follow the response\n      except HTTPError as error:\\\n     ```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ashiklom|ashiklom>",
                "title": "#664 `urllib` module dependencies for Python 3",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/664",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494332294.331596",
        "date": 1494332294331
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/663#issuecomment-299997290|#663: Environment variables defined in Dockerfile are lost when running images from Docker Hub>",
                "text": "Could you give it a try with the development branch. \nHere I present the output using \n&gt; singularity 2.2.99-development\n&gt; ```[Eduardo@Highwind ~]$ singularity -x shell docker://poldracklab/mriqc\n&gt; • '[' -f /home/Eduardo/.singularity-init ']'\n&gt; • '[' -f /usr/local/libexec/singularity/cli/action_argparser.sh ']'\n&gt; • . /usr/local/libexec/singularity/cli/action_argparser.sh\n&gt;      ++ message 2 'Evaluating args: '\\''docker://poldracklab/mriqc'\\''\\n'\n&gt;      ++ LEVEL=2\n&gt;      ++ MESSAGE='Evaluating args: '\\''docker://poldracklab/mriqc'\\''\\n'\n&gt;      ++ '[' -z 'Evaluating args: '\\''docker://poldracklab/mriqc'\\''\\n' ']'\n&gt;      ++ shift\n&gt;      ++ shift\n&gt;      ++ case \"$LEVEL\" in\n&gt;      ++ '[' 2 -le 1 ']'\n&gt;      ++ return 0\n&gt;      ++ true\n&gt;      ++ case ${1:-} in\n&gt;      ++ break\n&gt; • '[' -z '' ']'\n&gt; • SINGULARITY_IMAGE=docker://poldracklab/mriqc\n&gt; • export SINGULARITY_IMAGE\n&gt; • shift\n&gt; • '[' -z docker://poldracklab/mriqc ']'\n&gt; • '[' -f /usr/local/etc/singularity/init ']'\n&gt; • . /usr/local/etc/singularity/init\n&gt;      ++ unset module\n&gt;      ++ unset ml\n&gt;      ++ unset BASH_ENV\n&gt;      ++ SINGULARITYENV_PATH=/bin:/usr/bin:/usr/local/bin:/sbin:/usr/sbin:/usr/local/sbin:/bin:/sbin:/usr/bin:/usr/sbin\n&gt;      ++ HISTFILE=\n&gt;      ++ export PATH HISTFILE\n&gt; • '[' -x /usr/local/libexec/singularity/image-handler.sh ']'\n&gt; • . /usr/local/libexec/singularity/image-handler.sh\n&gt;      ++ '[' -z docker://poldracklab/mriqc ']'\n&gt;      ++ '[' -z shell ']'\n&gt;      ++ case \"$SINGULARITY_IMAGE\" in\n&gt;      +++ echo docker://poldracklab/mriqc\n&gt;      +++ sed -e 's@^docker://@@'\n&gt;      ++ NAME=poldracklab/mriqc\n&gt;      ++ '[' -z '' ']'\n&gt;      ++ SINGULARITY_LOCALCACHEDIR=/tmp\n&gt;      +++ mktemp -d /tmp/.singularity-runtime.XXXXXXXX\n&gt;      ++ SINGULARITY_SESSIONDIR=/tmp/.singularity-runtime.n4MTd02Z\n&gt;      ++ SINGULARITY_ROOTFS=/tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ mkdir -p /tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ SINGULARITY_CONTAINER=docker://poldracklab/mriqc\n&gt;      ++ SINGULARITY_IMAGE=/tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      +++ mktemp /tmp/.singularity-layers.XXXXXXXX\n&gt;      ++ SINGULARITY_CONTENTS=/tmp/.singularity-layers.1qjMaVuo\n&gt;      ++ export SINGULARITY_ROOTFS SINGULARITY_IMAGE SINGULARITY_CONTAINER SINGULARITY_SESSIONDIR SINGULARITY_CONTENTS\n&gt;      ++ eval_abort /usr/local/libexec/singularity/python/import.py\n&gt;      ++ eval /usr/local/libexec/singularity/python/import.py\n&gt;      +++ /usr/local/libexec/singularity/python/import.py\n&gt;      Docker image path: index.docker.io/poldracklab/mriqc:latest\n&gt;      Cache folder set to /home/Eduardo/.singularity/docker\n&gt;      [48/48] |===================================| 100.0% \n&gt;      ++ RETVAL=0\n&gt;      ++ '[' 0 -ne 0 ']'\n&gt;      ++ return 0\n&gt;      ++ message 1 'Importing: base Singularity environment\\n'\n&gt;      ++ LEVEL=1\n&gt;      ++ MESSAGE='Importing: base Singularity environment\\n'\n&gt;      ++ '[' -z 'Importing: base Singularity environment\\n' ']'\n&gt;      ++ shift\n&gt;      ++ shift\n&gt;      ++ case \"$LEVEL\" in\n&gt;      ++ '[' 1 -le 1 ']'\n&gt;      ++ printf 'Importing: base Singularity environment\\n'\n&gt;      Importing: base Singularity environment\n&gt;      ++ return 0\n&gt;      ++ zcat /usr/local/libexec/singularity/bootstrap-scripts/environment.tar\n&gt;      ++ cd /tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ tar -xf -\n&gt;      +++ cat /tmp/.singularity-layers.1qjMaVuo\n&gt;      ++ for i in '`cat \"$SINGULARITY_CONTENTS\"`'\n&gt;      +++ basename /home/Eduardo/.singularity/docker/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\n&gt;      ++ name=sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\n&gt;      ++ message 1 'Exploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\\n'\n&gt;      ++ LEVEL=1\n&gt;      ++ MESSAGE='Exploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\\n'\n&gt;      ++ '[' -z 'Exploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\\n' ']'\n&gt;      ++ shift\n&gt;      ++ shift\n&gt;      ++ case \"$LEVEL\" in\n&gt;      ++ '[' 1 -le 1 ']'\n&gt;      ++ printf 'Exploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\\n'\n&gt;      Exploding layer: sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\n&gt;      ++ return 0\n&gt;      ++ zcat /home/Eduardo/.singularity/docker/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\n&gt;      ++ cd /tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ tar '--exclude=dev/_' -xf -\n&gt;      ++ for i in '`cat \"$SINGULARITY_CONTENTS\"`'\n&gt;      +++ basename /home/Eduardo/.singularity/docker/sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\n&gt;      ++ name=sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\n&gt;      ++ message 1 'Exploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\\n'\n&gt;      ++ LEVEL=1\n&gt;      ++ MESSAGE='Exploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\\n'\n&gt;      ++ '[' -z 'Exploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\\n' ']'\n&gt;      ++ shift\n&gt;      ++ shift\n&gt;      ++ case \"$LEVEL\" in\n&gt;      ++ '[' 1 -le 1 ']'\n&gt;      ++ printf 'Exploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\\n'\n&gt;      Exploding layer: sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\n&gt;      ++ return 0\n&gt;      ++ zcat /home/Eduardo/.singularity/docker/sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\n&gt;      ++ cd /tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ tar '--exclude=dev/_' -xf -\n&gt;      ++ for i in '`cat \"$SINGULARITY_CONTENTS\"`'\n&gt;      +++ basename /home/Eduardo/.singularity/docker/sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\n&gt;      ++ name=sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\n&gt;      ++ message 1 'Exploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\\n'\n&gt;      ++ LEVEL=1\n&gt;      ++ MESSAGE='Exploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\\n'\n&gt;      ++ '[' -z 'Exploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\\n' ']'\n&gt;      ++ shift\n&gt;      ++ shift\n&gt;      ++ case \"$LEVEL\" in\n&gt;      ++ '[' 1 -le 1 ']'\n&gt;      ++ printf 'Exploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\\n'\n&gt;      Exploding layer: sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\n&gt;      ++ return 0\n&gt;      ++ zcat /home/Eduardo/.singularity/docker/sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\n&gt;      ++ cd /tmp/.singularity-runtime.n4MTd02Z/container/poldracklab/mriqc\n&gt;      ++ tar '--exclude=dev/_' -xf -\n&gt;      ++ for i in '`cat \"$SINGULARITY_CONTENTS\"`'\n&gt;      +++ basename /home/Eduardo/.singularity/docker/sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\n&gt;      ++ name=sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\n&gt;      ++ message 1 'Exploding layer: sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\\n'\n&gt;      ++ LEVEL=1\n&gt;      ++ MESSAGE='Exploding layer: sha256:736625e6e08f2b6b983428e79a67a40a…",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/663#issuecomment-299997290|#663: Environment variables defined in Dockerfile are lost when running images from Docker Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494279174.798284",
        "date": 1494279174798
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-299995290|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "text": "Are you using development branch?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/662#issuecomment-299995290|#662: ERROR: Could not remove run directory (...) Directory not empty>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494278669.689327",
        "date": 1494278669689
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/537#issuecomment-299995178|#537: Various additional tweaks for 2.3>",
                "text": "Why are you using current master? Did this ever work with current master?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/537#issuecomment-299995178|#537: Various additional tweaks for 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494278638.682430",
        "date": 1494278638682
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#663 Environment variables defined in Dockerfile are lost when running images from Docker Hub' https://github.com/singularityware/singularity/issues/663 by chrisfilo",
                "text": "```[root@9d45339bd15d /]# singularity exec docker://poldracklab/mriqc:0.9.3 env\nCache folder set to /root/.singularity/docker\nDownloading layer sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\nExtracting /root/.singularity/docker/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\nDownloading layer sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83\nExtracting /root/.singularity/docker/sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\nDownloading layer sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439\nExtracting /root/.singularity/docker/sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\nDownloading layer sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f\nExtracting /root/.singularity/docker/sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\nDownloading layer sha256:de5b15143d20c60c776fd5cd31ca09caf1e293ac50f98f18bcde5dc6a84d55ac\nExtracting /root/.singularity/docker/sha256:de5b15143d20c60c776fd5cd31ca09caf1e293ac50f98f18bcde5dc6a84d55ac.tar.gz\nDownloading layer sha256:54a5564a38ad416b14910a6dc41fec03ff8df40581d9cf026c5f05e4d3ef26f0\nExtracting /root/.singularity/docker/sha256:54a5564a38ad416b14910a6dc41fec03ff8df40581d9cf026c5f05e4d3ef26f0.tar.gz\nDownloading layer sha256:91f577f6f911091eb01b3f1819860d92c4e1fb8550f37773088f0988fdd14cf5\nExtracting /root/.singularity/docker/sha256:91f577f6f911091eb01b3f1819860d92c4e1fb8550f37773088f0988fdd14cf5.tar.gz\nDownloading layer sha256:2f506b00f891f2e84f62cf1acdf59423eda26f37be82f7e39e2d5945e55b707d\nExtracting /root/.singularity/docker/sha256:2f506b00f891f2e84f62cf1acdf59423eda26f37be82f7e39e2d5945e55b707d.tar.gz\nDownloading layer sha256:12f2072347221f221d1676db9f33d123fa4540f290446e0ac7722ed4ef0a0810\nExtracting /root/.singularity/docker/sha256:12f2072347221f221d1676db9f33d123fa4540f290446e0ac7722ed4ef0a0810.tar.gz\nDownloading layer sha256:9ddcf08966105c7e4be67e90fa25881617485ab6cfd74072cd3a1ae913301274\nExtracting /root/.singularity/docker/sha256:9ddcf08966105c7e4be67e90fa25881617485ab6cfd74072cd3a1ae913301274.tar.gz\nDownloading layer sha256:d4a29c916103cde68802c58bf4ec909216cc4972895d2d5b1d448b0c8b17eceb\nExtracting /root/.singularity/docker/sha256:d4a29c916103cde68802c58bf4ec909216cc4972895d2d5b1d448b0c8b17eceb.tar.gz\nDownloading layer sha256:7f4975bb38892fcdb9285fa22776bdd387c1c947c26aa0c7c3b62a0e8650df39\nExtracting /root/.singularity/docker/sha256:7f4975bb38892fcdb9285fa22776bdd387c1c947c26aa0c7c3b62a0e8650df39.tar.gz\nDownloading layer sha256:83539119cf7d0c4d2076e8cdde9dcce2547aca339d0f1a4b6e28b28ae6933caa\nExtracting /root/.singularity/docker/sha256:83539119cf7d0c4d2076e8cdde9dcce2547aca339d0f1a4b6e28b28ae6933caa.tar.gz\nDownloading layer sha256:594bf226e62babfe551e6a88838ef0c5798a447ecedd65d5ac69abce4ae2d351\nExtracting /root/.singularity/docker/sha256:594bf226e62babfe551e6a88838ef0c5798a447ecedd65d5ac69abce4ae2d351.tar.gz\nDownloading layer sha256:399f9aadedac10094e52dc7d685ef8a04e54074bd157ebf1257cc0c4cedf7163\nExtracting /root/.singularity/docker/sha256:399f9aadedac10094e52dc7d685ef8a04e54074bd157ebf1257cc0c4cedf7163.tar.gz\nDownloading layer sha256:7d6bbcadbe0101e0f7deb1b6a83d2a520e805447e5afd48303a0229c034df2ef\nExtracting /root/.singularity/docker/sha256:7d6bbcadbe0101e0f7deb1b6a83d2a520e805447e5afd48303a0229c034df2ef.tar.gz\nDownloading layer sha256:d9e9382a21dd7dfe6babf8a4e744cafd6f2f7ebb983e2d40c7cb13fbc98b115d\nExtracting /root/.singularity/docker/sha256:d9e9382a21dd7dfe6babf8a4e744cafd6f2f7ebb983e2d40c7cb13fbc98b115d.tar.gz\nDownloading layer sha256:6f06d723971b4f12e240f3336a17bf45057b575e501bc65071d4298764d892e3\nExtracting /root/.singularity/docker/sha256:6f06d723971b4f12e240f3336a17bf45057b575e501bc65071d4298764d892e3.tar.gz\nDownloading layer sha256:91641bf41cb3485b405e4b2a287d8abc2c5545367faad1e2f72f103bff9c18f8\nExtracting /root/.singularity/docker/sha256:91641bf41cb3485b405e4b2a287d8abc2c5545367faad1e2f72f103bff9c18f8.tar.gz\nDownloading layer sha256:bd842a2105a862f62ba4ad726531029be49046c290307e9c07a688c89f4606e6\nExtracting /root/.singularity/docker/sha256:bd842a2105a862f62ba4ad726531029be49046c290307e9c07a688c89f4606e6.tar.gz\nDownloading layer sha256:4a70713c436f2350e8a9f1c1e6c823290f331254c6c21d5657056499d8575608\nExtracting /root/.singularity/docker/sha256:4a70713c436f2350e8a9f1c1e6c823290f331254c6c21d5657056499d8575608.tar.gz\nDownloading layer sha256:63fe8c0068a811103c702452985368fc99014f83b5f0151cf631644f13f383b2\nExtracting /root/.singularity/docker/sha256:63fe8c0068a811103c702452985368fc99014f83b5f0151cf631644f13f383b2.tar.gz\nDownloading layer sha256:4daad8bdde31f5969d6a44800e993a911bed25853b2f89417b07ce7f0ac67714\nExtracting /root/.singularity/docker/sha256:4daad8bdde31f5969d6a44800e993a911bed25853b2f89417b07ce7f0ac67714.tar.gz\nDownloading layer sha256:b3e1c725a85f0953e81815b7c7aabfad9ebfd90af53f99248981282b8045d787\nExtracting /root/.singularity/docker/sha256:b3e1c725a85f0953e81815b7c7aabfad9ebfd90af53f99248981282b8045d787.tar.gz\nAdding Docker ENTRYPOINT as Singularity runscript...\n/usr/local/miniconda/bin/mriqc\nSINGULARITY_RUNDIR=/tmp/singularity-container_dir.AALdh4ht/poldracklab/mriqc:0.9.3\nHOSTNAME=9d45339bd15d\nTERM=xterm\nSINGULARITY_libexecdir=/usr/local/libexec\nUSER=root\nLS_COLORS=rs=0:di=01;34:ln=01;36:mh=00:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:mi=01;05;37;41:su=37;41:sg=30;43:ca=30;41:tw=30;42:ow=34;42:st=37;44:ex=01;32:_.tar=01;31:_.tgz=01;31:_.arj=01;31:_.taz=01;31:_.lzh=01;31:_.lzma=01;31:_.tlz=01;31:_.txz=01;31:_.zip=01;31:_.z=01;31:_.Z=01;31:_.dz=01;31:_.gz=01;31:_.lz=01;31:_.xz=01;31:_.bz2=01;31:_.tbz=01;31:_.tbz2=01;31:_.bz=01;31:_.tz=01;31:_.deb=01;31:_.rpm=01;31:_.jar=01;31:_.rar=01;31:_.ace=01;31:_.zoo=01;31:_.cpio=01;31:_.7z=01;31:_.rz=01;31:_.jpg=01;35:_.jpeg=01;35:_.gif=01;35:_.bmp=01;35:_.pbm=01;35:_.pgm=01;35:_.ppm=01;35:_.tga=01;35:_.xbm=01;35:_.xpm=01;35:_.tif=01;35:_.tiff=01;35:_.png=01;35:_.svg=01;35:_.svgz=01;35:_.mng=01;35:_.pcx=01;35:_.mov=01;35:_.mpg=01;35:_.mpeg=01;35:_.m2v=01;35:_.mkv=01;35:_.ogm=01;35:_.mp4=01;35:_.m4v=01;35:_.mp4v=01;35:_.vob=01;35:_.qt=01;35:_.nuv=01;35:_.wmv=01;35:_.asf=01;35:_.rm=01;35:_.rmvb=01;35:_.flc=01;35:_.avi=01;35:_.fli=01;35:_.flv=01;35:_.gl=01;35:_.dl=01;35:_.xcf=01;35:_.xwd=01;35:_.yuv=01;35:_.cgm=01;35:_.emf=01;35:_.axv=01;35:_.anx=01;35:_.ogv=01;35:_.ogx=01;35:_.aac=01;36:_.au=01;36:_.flac=01;36:_.mid=01;36:_.midi=01;36:_.mka=01;36:_.mp3=01;36:_.mpc=01;36:_.ogg=01;36:_.ra=01;36:_.wav=01;36:_.axa=01;36:_.oga=01;36:_.spx=01;36:_.xspf=01;36:\nMESSAGELEVEL=1\nSINGULARITY_localstatedir=/usr/local/var\nPATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/bin:/sbin:/usr/bin:/usr/sbin:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\nNEW_HOME=\nPWD=/\nLANG=en_US.UTF-8\nPS1=Singularity.mriqc:0.9.3&gt;\nRETVAL=0\nHOME=/root\nSHLVL=1\nSINGULARITY_INIT=1\nSINGULARITY_sysconfdir=/usr/local/etc\nLESSOPEN=||/usr/bin/lesspipe.sh %s\nSINGULARITY_CONTAINER=mriqc:0.9.3\nCHANGE_HOME=NO\nSINGULARITY_IMAGE=/tmp/singularity-container_dir.AALdh4ht/poldracklab/mriqc:0.9.3\nG_BROKEN_FILENAMES=1\nHISTFILE=/dev/null\nSingularity: sexec (U=0,P=15)&gt; Could not remove run directory /tmp/singularity-container_dir.AALdh4ht/poldracklab/mriqc:0.9.3: Directory not empty\n\nERROR  : Could not remove run directory /tmp/singularity-container_dir.AALdh4ht/poldracklab/mriqc:0.9.3: Directory not empty\n```\n\nHowever:\n\n```PS D:\\drive\\workspace\\singularitytest&gt; docker run -ti --rm --entrypoint=env poldracklab/mriqc:0.9.3\nPATH=/usr/local/miniconda/bin:/opt/ants:/usr/lib/fsl/5.0:/usr/lib/afni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\nHOSTNAME=bdb490ced557\nTERM=xterm\nFSLDIR=/usr/share/fsl/5.0\nFSLOUTPUTTYPE=NIFTI_GZ\nFSLMULTIFILEQUIT=TRUE\nPOSSUMDIR=/usr/share/fsl/5.0\nLD_LIBRARY_PATH=/usr/lib/fsl/5.0:\nFSLTCLSH=/usr/bin/tclsh\nFSLWISH=/usr/bin/wish\nAFNI_MODELPATH=/usr/lib/afni/models\nAFNI_IMSAVE_WARNINGS=NO\nAFNI_TTATLAS_DATASET=/us…",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisfilo|chrisfilo>",
                "title": "#663 Environment variables defined in Dockerfile are lost when running images from Docker Hub",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/663",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494271528.938978",
        "date": 1494271528938
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#662 ERROR: Could not remove run directory (...) Directory not empty' https://github.com/singularityware/singularity/issues/662 by chrisfilo",
                "text": "I'm getting the following error at the end of execution:\n\n```\n[root@efa4dfbd5360 /]# singularity run docker://poldracklab/mriqc:0.9.3\nCache folder set to /root/.singularity/docker\nExtracting /root/.singularity/docker/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\nDownloading layer sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83\nExtracting /root/.singularity/docker/sha256:a4936036b8465027fd8e6a51cb5cae33190f705b4c4d17a8acf41f471c87ca83.tar.gz\nDownloading layer sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439\nExtracting /root/.singularity/docker/sha256:d71212883635f51c04e6030dc23dad7a8a5db1a013eafed23fcc976db3ef3439.tar.gz\nDownloading layer sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f\nExtracting /root/.singularity/docker/sha256:736625e6e08f2b6b983428e79a67a40acfb9647ab17184e9e2e911cd0a0c6f4f.tar.gz\nDownloading layer sha256:de5b15143d20c60c776fd5cd31ca09caf1e293ac50f98f18bcde5dc6a84d55ac\nExtracting /root/.singularity/docker/sha256:de5b15143d20c60c776fd5cd31ca09caf1e293ac50f98f18bcde5dc6a84d55ac.tar.gz\nDownloading layer sha256:54a5564a38ad416b14910a6dc41fec03ff8df40581d9cf026c5f05e4d3ef26f0\nExtracting /root/.singularity/docker/sha256:54a5564a38ad416b14910a6dc41fec03ff8df40581d9cf026c5f05e4d3ef26f0.tar.gz\nDownloading layer sha256:91f577f6f911091eb01b3f1819860d92c4e1fb8550f37773088f0988fdd14cf5\nExtracting /root/.singularity/docker/sha256:91f577f6f911091eb01b3f1819860d92c4e1fb8550f37773088f0988fdd14cf5.tar.gz\nDownloading layer sha256:2f506b00f891f2e84f62cf1acdf59423eda26f37be82f7e39e2d5945e55b707d\nExtracting /root/.singularity/docker/sha256:2f506b00f891f2e84f62cf1acdf59423eda26f37be82f7e39e2d5945e55b707d.tar.gz\nDownloading layer sha256:12f2072347221f221d1676db9f33d123fa4540f290446e0ac7722ed4ef0a0810\nExtracting /root/.singularity/docker/sha256:12f2072347221f221d1676db9f33d123fa4540f290446e0ac7722ed4ef0a0810.tar.gz\nDownloading layer sha256:9ddcf08966105c7e4be67e90fa25881617485ab6cfd74072cd3a1ae913301274\nExtracting /root/.singularity/docker/sha256:9ddcf08966105c7e4be67e90fa25881617485ab6cfd74072cd3a1ae913301274.tar.gz\nDownloading layer sha256:d4a29c916103cde68802c58bf4ec909216cc4972895d2d5b1d448b0c8b17eceb\nExtracting /root/.singularity/docker/sha256:d4a29c916103cde68802c58bf4ec909216cc4972895d2d5b1d448b0c8b17eceb.tar.gz\nDownloading layer sha256:7f4975bb38892fcdb9285fa22776bdd387c1c947c26aa0c7c3b62a0e8650df39\nExtracting /root/.singularity/docker/sha256:7f4975bb38892fcdb9285fa22776bdd387c1c947c26aa0c7c3b62a0e8650df39.tar.gz\nDownloading layer sha256:83539119cf7d0c4d2076e8cdde9dcce2547aca339d0f1a4b6e28b28ae6933caa\nExtracting /root/.singularity/docker/sha256:83539119cf7d0c4d2076e8cdde9dcce2547aca339d0f1a4b6e28b28ae6933caa.tar.gz\nDownloading layer sha256:594bf226e62babfe551e6a88838ef0c5798a447ecedd65d5ac69abce4ae2d351\nExtracting /root/.singularity/docker/sha256:594bf226e62babfe551e6a88838ef0c5798a447ecedd65d5ac69abce4ae2d351.tar.gz\nDownloading layer sha256:399f9aadedac10094e52dc7d685ef8a04e54074bd157ebf1257cc0c4cedf7163\nExtracting /root/.singularity/docker/sha256:399f9aadedac10094e52dc7d685ef8a04e54074bd157ebf1257cc0c4cedf7163.tar.gz\nDownloading layer sha256:7d6bbcadbe0101e0f7deb1b6a83d2a520e805447e5afd48303a0229c034df2ef\nExtracting /root/.singularity/docker/sha256:7d6bbcadbe0101e0f7deb1b6a83d2a520e805447e5afd48303a0229c034df2ef.tar.gz\nDownloading layer sha256:d9e9382a21dd7dfe6babf8a4e744cafd6f2f7ebb983e2d40c7cb13fbc98b115d\nExtracting /root/.singularity/docker/sha256:d9e9382a21dd7dfe6babf8a4e744cafd6f2f7ebb983e2d40c7cb13fbc98b115d.tar.gz\nDownloading layer sha256:6f06d723971b4f12e240f3336a17bf45057b575e501bc65071d4298764d892e3\nExtracting /root/.singularity/docker/sha256:6f06d723971b4f12e240f3336a17bf45057b575e501bc65071d4298764d892e3.tar.gz\nDownloading layer sha256:91641bf41cb3485b405e4b2a287d8abc2c5545367faad1e2f72f103bff9c18f8\nExtracting /root/.singularity/docker/sha256:91641bf41cb3485b405e4b2a287d8abc2c5545367faad1e2f72f103bff9c18f8.tar.gz\nDownloading layer sha256:bd842a2105a862f62ba4ad726531029be49046c290307e9c07a688c89f4606e6\nExtracting /root/.singularity/docker/sha256:bd842a2105a862f62ba4ad726531029be49046c290307e9c07a688c89f4606e6.tar.gz\nDownloading layer sha256:4a70713c436f2350e8a9f1c1e6c823290f331254c6c21d5657056499d8575608\nExtracting /root/.singularity/docker/sha256:4a70713c436f2350e8a9f1c1e6c823290f331254c6c21d5657056499d8575608.tar.gz\nDownloading layer sha256:63fe8c0068a811103c702452985368fc99014f83b5f0151cf631644f13f383b2\nExtracting /root/.singularity/docker/sha256:63fe8c0068a811103c702452985368fc99014f83b5f0151cf631644f13f383b2.tar.gz\nDownloading layer sha256:4daad8bdde31f5969d6a44800e993a911bed25853b2f89417b07ce7f0ac67714\nExtracting /root/.singularity/docker/sha256:4daad8bdde31f5969d6a44800e993a911bed25853b2f89417b07ce7f0ac67714.tar.gz\nDownloading layer sha256:b3e1c725a85f0953e81815b7c7aabfad9ebfd90af53f99248981282b8045d787\nExtracting /root/.singularity/docker/sha256:b3e1c725a85f0953e81815b7c7aabfad9ebfd90af53f99248981282b8045d787.tar.gz\nAdding Docker ENTRYPOINT as Singularity runscript...\n/usr/local/miniconda/bin/mriqc\nusage: mriqc [-h] [-v]\n             [--participant_label [PARTICIPANT_LABEL [PARTICIPANT_LABEL ...]]]\n             [-m [{T1w,bold,T2w} [{T1w,bold,T2w} ...]]] [-s SESSION_ID]\n             [-r RUN_ID] [--nthreads NTHREADS] [--n_procs N_PROCS]\n             [--mem_gb MEM_GB] [--write-graph] [--dry-run]\n             [--use-plugin USE_PLUGIN] [--ica] [--testing] [--profile]\n             [--hmc-afni] [--hmc-fsl] [-f] [--fft-spikes-detector]\n             [-w WORK_DIR] [--report-dir REPORT_DIR] [--verbose-reports]\n             [--ants-nthreads ANTS_NTHREADS] [--ants-settings ANTS_SETTINGS]\n             [--deoblique] [--despike] [--start-idx START_IDX]\n             [--stop-idx STOP_IDX] [--correct-slice-timing]\n             bids_dir output_dir {participant,group} [{participant,group} ...]\nmriqc: error: the following arguments are required: bids_dir, output_dir, analysis_level\nSingularity: sexec (U=0,P=61)&gt; Could not remove run directory /tmp/singularity-container_dir.KJo66K53/poldracklab/mriqc:0.9.3: Directory not empty\n\nERROR  : Could not remove run directory /tmp/singularity-container_dir.KJo66K53/poldracklab/mriqc:0.9.3: Directory not empty\n```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/chrisfilo|chrisfilo>",
                "title": "#662 ERROR: Could not remove run directory (...) Directory not empty",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/662",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494270864.774426",
        "date": 1494270864774
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/537#issuecomment-299962436|#537: Various additional tweaks for 2.3>",
                "text": "I am also running into this error:\n\n```[root@efa4dfbd5360 /]# singularity run docker://bids/mriqc\nCache folder set to /root/.singularity/docker\nDownloading layer sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4\nExtracting /root/.singularity/docker/sha256:a3ed95caeb02ffe68cdd9fd84406680ae93d633cb16422d00e8a7c22955b46d4.tar.gz\nDownloading layer sha256:a8ae7b6cf97e5b5a38351ba8da779b141582ba04b72f7683bf2abc42e9031923\nExtracting /root/.singularity/docker/sha256:a8ae7b6cf97e5b5a38351ba8da779b141582ba04b72f7683bf2abc42e9031923.tar.gz\nDownloading layer sha256:4b3fed55e120f6a8344987f284a875cd992602da343f0e5910b5ef85ec4d7a1a\nExtracting /root/.singularity/docker/sha256:4b3fed55e120f6a8344987f284a875cd992602da343f0e5910b5ef85ec4d7a1a.tar.gz\nDownloading layer sha256:a71e220f17a26b208edbf6e41a13a44fd7e5bfca9cc03e41a522274c75893388\nExtracting /root/.singularity/docker/sha256:a71e220f17a26b208edbf6e41a13a44fd7e5bfca9cc03e41a522274c75893388.tar.gz\nDownloading layer sha256:d4e3bf49a457483df3bdd6aa159d5f34eb574aa8b96aee520e503422ab5d2b51\nExtracting /root/.singularity/docker/sha256:d4e3bf49a457483df3bdd6aa159d5f34eb574aa8b96aee520e503422ab5d2b51.tar.gz\nDownloading layer sha256:8cc81360634640e0001d80fe4650e0ebd8bded0c938035d3465e0ba0b61149ab\nExtracting /root/.singularity/docker/sha256:8cc81360634640e0001d80fe4650e0ebd8bded0c938035d3465e0ba0b61149ab.tar.gz\nDownloading layer sha256:050b82eab0dbc2f196e804d75260b3c70b593ec4afc099993998fcea28405cb5\nExtracting /root/.singularity/docker/sha256:050b82eab0dbc2f196e804d75260b3c70b593ec4afc099993998fcea28405cb5.tar.gz\nDownloading layer sha256:87a97b332407e404cc98d52c73fd9c9a5714a655565a49c022c398027425b2e5\nExtracting /root/.singularity/docker/sha256:87a97b332407e404cc98d52c73fd9c9a5714a655565a49c022c398027425b2e5.tar.gz\nDownloading layer sha256:46ace269c0593aeecaf8fad05ed04ebeb7ac5ebd88ffb47473cd1e90d7b1b329\nExtracting /root/.singularity/docker/sha256:46ace269c0593aeecaf8fad05ed04ebeb7ac5ebd88ffb47473cd1e90d7b1b329.tar.gz\ntar: usr/local/miniconda/lib/python2.7/site-packages/conda-4.1.11-py2.7.egg-info: Cannot open: File exists\ntar: usr/local/miniconda/pkgs/conda-4.1.11-py27_0/lib/python2.7/site-packages/conda-4.1.11-py2.7.egg-info: Cannot hard link to `usr/local/miniconda/lib/python2.7/site-packages/conda-4.1.11-py2.7.egg-info': Operation not permitted\ntar: Exiting with failure status due to previous errors\nERROR:python:Error extracting image: /root/.singularity/docker/sha256:46ace269c0593aeecaf8fad05ed04ebeb7ac5ebd88ffb47473cd1e90d7b1b329.tar.gz\nERROR: Aborting with RETVAL=0\n```\n\nusing current master (6007d3a1a46790bf1342eb99e2ac0aedd2e9cdb1)",
                "pretext": "[singularityware/singularity] New comment by chrisfilo on issue <https://github.com/singularityware/singularity/issues/537#issuecomment-299962436|#537: Various additional tweaks for 2.3>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494270735.742986",
        "date": 1494270735742
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/633|#633 ERROR Cannot untar layer> by <https://github.com/chrisfilo|chrisfilo>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/633|#633 ERROR Cannot untar layer> by <https://github.com/chrisfilo|chrisfilo>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494270310.634234",
        "date": 1494270310634
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299924788|#611: Nvidia GPU support with different driver versions?>",
                "text": "I apologize for your misunderstanding - most of Singularity to run on a shared resource would require an administeator to install the base software, then the user is empowered to run and use images without root. The idea is that the software that would normally require root to install can live and run in the image that has been created by the user off of the cluster. The exception is for an image creation then import from docker, which would not require root. Singularity does not let the user escalate to root as Docker does. That is the primary difference.\n\nI hope that your group gives it a second go at some point! Feel free to close the issue if it's resolved for now, or wait for feedback from others.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299924788|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494262517.493117",
        "date": 1494262517493
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299922757|#611: Nvidia GPU support with different driver versions?>",
                "text": "@vsoch I tried to run the non-gpu version. It downloaded *a lot* of stuff and it took quite a few minutes. After that, it failed with \n\n```ERROR  : User namespace not supported, and program not running privileged.\nABORT  : Retval = 255\n```\n\nMy comments on this:\n• The check should be done before the download\n• One of the design goals of singularity is not requiring root like docker does, and now you're telling me _well, we do too_? I understand this is _less_ than docker requires, but my sysadmins (yep, an all-male group) will not install it.",
                "pretext": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299922757|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494262035.365064",
        "date": 1494262035365
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299883886|#661: singularity shell of tar.gz images>",
                "text": "It looks like it's reading the header:\n\n```DEBUG   [U=1000,P=12157]   singularity_image_check()                 First line of image(fd=5): c��Xubuntu.img\n```\nand expecting it to be squashfs\n\n```DEBUG   [U=1000,P=12157]   singularity_image_mount_squashfs_check()  Image does not appear to be of type '.sqsh': ubuntu.img.gz\n```\nI'm thinking this is no longer supported, but we should check with @gmkurtzer. I think the fix would be to do the decompression before checking the image, unless it's no longer to be supported, in which case we want it to fail. @gmkurtzer is giving a talk today so I would expect some delay, unless he is bored and waiting around and find the issue, haha. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299883886|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494253963.063809",
        "date": 1494253963063
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299792224|#661: singularity shell of tar.gz images>",
                "text": "ah ok, I think I see the underlying issue - it's past midnight and I need to go to sleep, but I can definitely help with this later today! TLDR - we want to trace the variable for referencing the image, and if we decompress, make sure the name changes accordingly. We should check with @gmkurtzer about this too, it may be that there is a good reason for not supporting running .tar.gz directly. More later! gnite!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299792224|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494228145.634173",
        "date": 1494228145634
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299790487|#661: singularity shell of tar.gz images>",
                "text": "@vsoch, indeed the image is extracted to \n\"/tmp/singularity-rundir.UPaAzka0/ubuntu-14-desktop.tar.gz/images\" so maybe its not picking it up,\nLooking quickly through the sources the tar.gz files are handled in *image-handler.sh*. So maybe there is an issues. Btw, I can not invoke the --debug option.\n\n`\n    *.tgz|*.tar.gz)\n        NAME=`basename \"$SINGULARITY_IMAGE\"`\n        if [ -z \"${SINGULARITY_CACHEDIR:-}\" ]; then\n            SINGULARITY_CACHEDIR=\"/tmp\"\n        fi\n        if [ ! -d \"$SINGULARITY_CACHEDIR\" ]; then\n            message ERROR \"Cache directory does not exist: $SINGULARITY_CACHEDIR\\n\"\n            ABORT 1\n        fi\n        if ! SINGULARITY_TMPDIR=`mktemp -d $SINGULARITY_CACHEDIR/singularity-rundir.XXXXXXXX`; then\n            message ERROR \"Failed to create tmpdir\\n\"\n            ABORT 255\n        fi\n```    CONTAINER_DIR=\"$SINGULARITY_TMPDIR/$NAME\"\n    if ! mkdir -p \"$CONTAINER_DIR\"; then\n        message ERROR \"Could not create cache directory: $CONTAINER_DIR\\n\"\n        ABORT 255\n    fi\n\n    message 1 \"Opening gzip compressed archive, stand by...\\n\"\n    # this almost always gives permission errors, so ignore them when\n    # this almost always gives permission errors, so ignore them when\n    # running as a user.\n    tar -C \"$CONTAINER_DIR\" -xzf \"$SINGULARITY_IMAGE\" 2&gt;/dev/null\n\n    chmod -R +w \"$CONTAINER_DIR\"\n\n    SINGULARITY_IMAGE=\"$CONTAINER_DIR\"\n    SINGULARITY_RUNDIR=\"$SINGULARITY_TMPDIR\"\n    export SINGULARITY_RUNDIR SINGULARITY_IMAGE\n;;```\n`",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299790487|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494227519.556639",
        "date": 1494227519556
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299786704|#661: singularity shell of tar.gz images>",
                "text": "It might be that it's decompressing in a temp folder, but forgetting to rename based on the tweaked extension, or not implemented. I remember way back for some older version (or at least I think) it would decompress before using the image. I also remember that @gmkurtzer and I were chatting about .tar.gz specifically, and reasons for not using it for images.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299786704|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494226122.394682",
        "date": 1494226122394
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299786433|#661: singularity shell of tar.gz images>",
                "text": "Could you try that last one with --debug?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299786433|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494226013.383644",
        "date": 1494226013383
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299785835|#661: singularity shell of tar.gz images>",
                "text": "@vsoch: Tnx, uncompressing the file with the archive manager and the running it again is fine,\nBut I want to run the compressed archive directly.   I think its not related to a compression error, but maybe incompatible format or other issues, or its not implemented yet. In case of tar.gz the archive is somehow handled, for *.gz only it can not handle it, because the contained is not found. \n\n````\n\n*singularity image of bootstrapped ubuntu14 works fine*\n\nvm@ubuntu:~/git/singularity$ singularity shell images/ubuntu-14-desktop.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity.ubuntu-14-desktop.img&gt; $ exit\nvm@ubuntu:~/git/singularity$ \n\n*compressing with gzip only*\n\nvm@ubuntu:~/git/singularity$ gzip -c -9 images/ubuntu-14-desktop.img &gt; images/ubuntu-14-desktop.img.gz\nvm@ubuntu:~/git/singularity$ \n\n*using gzip only the container is not found*\n\nvm@ubuntu:~/git/singularity$ singularity shell ubuntu-14-desktop.img.gz\nERROR  : Container not found: ubuntu-14-desktop.img.gz\nABORT  : Retval = 255\n````",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299785835|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494225774.358553",
        "date": 1494225774358
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299784370|#661: singularity shell of tar.gz images>",
                "text": "The command I've typically used to compress images is:\n\n```gzip -c -9 image.img &gt; image.img.gz'\n```\n\nand to decompress:\n\n```gzip -d -f image.img.gz\n```\n\nI'm not sure about .tar.gz, but I would recommend the above.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299784370|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494225161.297786",
        "date": 1494225161297
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299784181|#661: singularity shell of tar.gz images>",
                "text": "My naming convention for the image file was wrong, It is not a directory but really an image file.\nBut the issue persists.\n\n````\n\n*singularity image of bootstrapped ubuntu14 works fine*\n\nvm@ubuntu:~/git/singularity$ singularity shell images/ubuntu-14-desktop.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity.ubuntu-14-desktop.img&gt; $ exit\nvm@ubuntu:~/git/singularity$ \n\n*compressing the image file*\n\nvm@ubuntu:~/git/singularity$ tar -czvf images/ubuntu-14-desktop.tar.gz   images/ubuntu-14-desktop.img \nimages/ubuntu-14-desktop.img\nvm@ubuntu:~/git/singularity$ \n\n*starting the singularity shell with the tar.gz image file*\n\nvm@ubuntu:~/git/singularity$ singularity shell images/ubuntu-14-desktop.tar.gz\nOpening gzip compressed archive, stand by...\nERROR  : Container does not have a valid /bin/sh\nABORT  : Retval = 255\nvm@ubuntu:~/git/singularity$ \n````",
                "pretext": "[singularityware/singularity] New comment by tobigithub on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299784181|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494225085.290742",
        "date": 1494225085290
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299783032|#661: singularity shell of tar.gz images>",
                "text": "I haven't done a tgz image yet... but when you made it, you made the tarball with the `images/ubuntu-14-desktop` path.\n\nI'm not sure when it extracts it, if it expects it to be with the root as the extract point. What happens if you create the tarball like:\n\n```cd images/ubuntu-14-desktop\ntar -czvf ../ubuntu-14-desktop.tar.gz .\n```\nDo you still get the same error?",
                "pretext": "[singularityware/singularity] New comment by jmstover on issue <https://github.com/singularityware/singularity/issues/661#issuecomment-299783032|#661: singularity shell of tar.gz images>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494224577.241720",
        "date": 1494224577241
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#661 singularity shell of tar.gz images' https://github.com/singularityware/singularity/issues/661 by tobigithub",
                "text": "Not sure if bug or feature request, running tar.gz images does not work, however singularity says its uncompressing the tar.gz container and trying to run it. Also changing permissions to read/write (other) does not help. Maybe caching issue of expanded image?\n\nReason for compression: smaller files, faster handling on network or USB sticks etc.\nExample:\n\n````\n\n*bootstrapped ubuntu image runs fine (131 MByte)*\n\nvm@ubuntu:~/git/singularity$ singularity shell images/ubuntu-14-desktop\nSingularity: Invoking an interactive shell within container...\nSingularity.ubuntu-14-desktop&gt; $ exit\n\n*now compress to tar.gz (2.1 MB) // File shrank by 2147483679 bytes; padding with zeros*\n\nvm@ubuntu:~/git/singularity$ tar -czvf images/ubuntu-14-desktop.tar.gz   images/ubuntu-14-desktop \nimages/ubuntu-14-desktop\n\n*singularity shell with tar.gz singularity image does not run*\n\nvm@ubuntu:~/git/singularity$ \nvm@ubuntu:~/git/singularity$ singularity shell images/ubuntu-14-desktop.tar.gz\nOpening gzip compressed archive, stand by...\nERROR  : Container does not have a valid /bin/sh\nABORT  : Retval = 255\nvm@ubuntu:~/git/singularity$ \n````\nTobias",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/tobigithub|tobigithub>",
                "title": "#661 singularity shell of tar.gz images",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/661",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494224134.200868",
        "date": 1494224134200
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#660 compiling singularity on RHEL 5' https://github.com/singularityware/singularity/issues/660 by Amjadhpc",
                "text": "Hello,\nWe have  an HPC system that is still running on RHEL 5 for legacy reasons. \nWe have kernel   2.6.18-164.el5 , glibc-2.5.42 and gcc-4.1.2 .\n\nI would like to know if someone has been able to compile and install singularity on  RHEL 5. ?\nI tried compiling 2.2.1 version and ran into errors regarding  'O_CLOEXEC'  .\nO_CLOEXEC is not supported on glibc 2.5.42\n\nThanks",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/Amjadhpc|Amjadhpc>",
                "title": "#660 compiling singularity on RHEL 5",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/660",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494143866.203536",
        "date": 1494143866203
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299680131|#611: Nvidia GPU support with different driver versions?>",
                "text": "Well, it won't replicate the error entirely, so we can't really test it. What we can do is figure out if it has to do with your installation, specifically the fact that you don't have sudo (and doesn't have anything to do with gpu/nvidia at all). If you can try the same command on your (non sudo install) location with the non-gpu image:\n\n```/path/to/singularity shell docker://tensorflow/tensorflow:latest\n```\nif that doesn't work, we know for sure it's the install., and perhaps you can ask a system admin to install for you? \n\nAnd if you were to try the above on your (sudo) workstation, it would work too :)\n\nProbably either way, your best bet is going to be to wait for a version (2.3) that your admin is comfortable installing, and have him/her install it. Probability says it's a him, lol.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299680131|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494128024.756592",
        "date": 1494128024756
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299678816|#611: Nvidia GPU support with different driver versions?>",
                "text": "@vsoch Yes, I have a workstation where I can be root, however that one does not have GPUs. Does it matter?",
                "pretext": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299678816|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494125429.680927",
        "date": 1494125429680
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299653763|#611: Nvidia GPU support with different driver versions?>",
                "text": "And do you have a workstation where you can be root to create and bootstrap images?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299653763|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494091025.326595",
        "date": 1494091025326
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299653678|#611: Nvidia GPU support with different driver versions?>",
                "text": "I think @GodloveD might have hit the nail in the head. To test, could you try running with --debug, and then without those additional args?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299653678|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494090931.321859",
        "date": 1494090931321
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299641578|#611: Nvidia GPU support with different driver versions?>",
                "text": "When you install Singularity as root it creates an SUID binary that's used\nto escalate privileges for some operations.  I believe that the --nv option\nmay require privilege escalation because all of the libraries must be bind\nmounted into the container regardless of whether or not the appropriate\nplaces to mount them already exist.  This might be different if you have\naccess to an overlay file system(?) but what I'm trying to say is that if\nyou are installing Singularity on a machine where you don't have root\naccess --nv may not work.\n\nOn Sat, May 6, 2017 at 8:34 AM, Davide <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; @vsoch <https://github.com/vsoch> Thanks for the suggestion, I will try\n&gt; that and let you know. Just one detail which might be important: my prefix\n&gt; is not nor can be /usr/local because I'm not root on the machine where\n&gt; I'm installing. Therefore I can delete everything in my prefix in one shot.\n&gt; I'm mentioning just in case this --nv hack makes implicit assumptions\n&gt; about the prefix.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/611#issuecomment-299636926>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AHUUXH5Tq2BNbE4IErhupPqYU9CdwEmiks5r3GjQgaJpZM4M-zk7>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299641578|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494079106.753055",
        "date": 1494079106753
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299636926|#611: Nvidia GPU support with different driver versions?>",
                "text": "@vsoch Thanks for the suggestion, I will try that and let you know. Just one detail which might be important: my prefix is not nor can be `/usr/local` because I'm not root on the machine where I'm installing. Therefore I can delete everything in my prefix in one shot. I'm mentioning just in case this `--nv` hack makes implicit assumptions about the prefix.",
                "pretext": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299636926|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494074063.546118",
        "date": 1494074063546
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299610152|#611: Nvidia GPU support with different driver versions?>",
                "text": "I think your install might be off.. can you try removing everything from the old version completely, there is actually a lot hiding:\n\n```$ sudo rm -rf /usr/local/libexec/singularity\n$ sudo rm -rf /usr/local/etc/singularity\n$ sudo rm -rf /usr/local/include/singularity\n$ sudo rm -rf /usr/local/lib/singularity\n$ sudo rm -rf /usr/local/var/lib/singularity/\n$ sudo rm /usr/local/bin/singularity\n$ sudo rm /usr/local/bin/run-singularity\n$ sudo rm /usr/local/etc/bash_completion.d/singularity \n$ sudo rm /usr/local/man/man1/singularity.1\n```\nThen, when you download and install, just do this in a fresh place:\n\n```$ git clone -b development https://github.com/singularityware/singularity.git\n$ cd singularity\n$ git fetch\n$ git checkout development\n$ ./autogen.sh\n$ ./configure --prefix=/usr/local --sysconfdir=/etc\n$ make\n$ sudo make install\n```\nthen do `singularity --version`. You should see something that looks like `2.2.99-development.g945c6ee\n` - the ones above don't seem quite right to me.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299610152|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494037753.290572",
        "date": 1494037753290
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299608407|#611: Nvidia GPU support with different driver versions?>",
                "text": "Thanks @vsoch for the message. I should have mentioned that on my own...\nThanks also @GodloveD for that, however these were some of the options I did try and did not work (I retried them right now, just in case).\n\nI installed many versions, but I deleted a few of them. For the ones that I did not delete, the output of `--version` is one of `2.2.1`, `2.2.99-HEAD.g1a64d3b` or `2.2.99`. Is any of these supposed to work?",
                "pretext": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299608407|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494035515.192648",
        "date": 1494035515192
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600804|#611: Nvidia GPU support with different driver versions?>",
                "text": "good catch @GodloveD !",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600804|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494028807.795993",
        "date": 1494028807795
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600737|#611: Nvidia GPU support with different driver versions?>",
                "image_url": "https://asciinema.org/a/2n8lxkukfa0z2o6pcxp1yki9g.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 60612,
                "text": "Use either --nv (2 dashes) or -n. :relaxed:\n\nOn May 5, 2017 7:57 PM, \"Vanessa Sochat\" <mailto:notifications@github.com|notifications@github.com> wrote:\n\n&gt; hey @davidedelvento <https://github.com/davidedelvento> could you double\n&gt; check the version?\n&gt; \n&gt; singularity --version\n&gt; \n&gt; I just tested with a (slightly dated) and then updated development branch,\n&gt; and I couldn't produce this error:\n&gt; \n&gt; <https://asciinema.org/a/2n8lxkukfa0z2o6pcxp1yki9g?speed=3>\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub\n&gt; <https://github.com/singularityware/singularity/issues/611#issuecomment-299600521>,\n&gt; or mute the thread\n&gt; <https://github.com/notifications/unsubscribe-auth/AHUUXC0NHeg06lkcXk1yENBaNxiP6fR6ks5r27dMgaJpZM4M-zk7>\n&gt; .",
                "pretext": "[singularityware/singularity] New comment by GodloveD on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600737|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494028767.792487",
        "date": 1494028767792
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600521|#611: Nvidia GPU support with different driver versions?>",
                "image_url": "https://asciinema.org/a/2n8lxkukfa0z2o6pcxp1yki9g.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 60612,
                "text": "hey @davidedelvento could you double check the version? \n\n```singularity --version\n```\n\nI just tested with a (slightly dated) and then updated development branch, and I couldn't produce this error:\n\n<https://asciinema.org/a/2n8lxkukfa0z2o6pcxp1yki9g?speed=3>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299600521|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494028634.782433",
        "date": 1494028634782
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299583061|#611: Nvidia GPU support with different driver versions?>",
                "text": "I must be doing something very stupid. Every time I try to run something like\n\n```/path/to/singularity shell -nv docker://tensorflow/tensorflow:latest-gpu\n```\n\nI get\n\n```ERROR: Unknown option: -nv\n```\n\nAnd yes, I installed the dev branch, and even explicitly tried the `1a64d3b`. I also set the `SINGULARITY_INCLUDEGPU` env variable to `1` at configure/compile time and runtime.\n\nSince the `exec` command mentioned `-n`, I tried that too (and double dashes --nv etc).\n\nClues?",
                "pretext": "[singularityware/singularity] New comment by davidedelvento on issue <https://github.com/singularityware/singularity/issues/611#issuecomment-299583061|#611: Nvidia GPU support with different driver versions?>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1494020684.880261",
        "date": 1494020684880
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299334508|#659: Using development branch on Singularity Hub>",
                "text": "yeah I understand completely! There are some exciting updates / changes to singularity hub, and it's infrastructure coming in the next few months - still figuring out some details and then we will be able to move forward with the work! Minimally, when 2.3 is out I will update the builders quickly for the new version.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299334508|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493939677.525428",
        "date": 1493939677525
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299333965|#659: Using development branch on Singularity Hub>",
                "text": "@vsoch , \n It makes sense to shy away from \"quasi-finished\" versions! I have all I need on my end. Just figured it may serve some use in controlled settings. ",
                "pretext": "[singularityware/singularity] New comment by belledon on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299333965|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493939452.496806",
        "date": 1493939452496
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299333551|#659: Using development branch on Singularity Hub>",
                "text": "hey @belledon ! I could definitely generate a custom development image for a workaround for now, although my hope was to be able to provide versioned (eg 2.3) images to not have any \"quasi finished\" ones up there. Hey @gmkurtzer how close realistically are we to 2.3 release?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/659#issuecomment-299333551|#659: Using development branch on Singularity Hub>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493939286.475430",
        "date": 1493939286475
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#659 Using development branch on Singularity Hub' https://github.com/singularityware/singularity/issues/659 by belledon",
                "text": "Hey @vsoch ,\n\nI was trying to build a container from a docker container and ran into an old issue with file names being too long when using `2.2.1`. I was pressed for time so I didn't think to save the output (I'd be happy to recreate it over the weekend). However, I remember that bug was fixed in the `librefractor` branch (which I'm assuming is now `development`). Cloning and doing a local build from the `development` branch worked without a hitch. I was wondering if it would be easy on your end to include the singularity branch in build options of Singularity Hub? Sorry if this is a repost/ not practical.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/belledon|belledon>",
                "title": "#659 Using development branch on Singularity Hub",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/659",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493938482.361950",
        "date": 1493938482361
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#658 [feature request] Option to run only parts of the bootstrapping process. ' https://github.com/singularityware/singularity/issues/658 by georghildebrand",
                "text": "Hi here, i am fascinated by singularity. In the last weeks i started playing around with it a little and it works quite nice on our HPC system. One nice feature to have would be, if you could add a functionality to allow running the different bootstrapping stages separately. \n\nExample: \nwhen doing\n&gt; singularity bootstrap image.img imagedef.def\nit would help to if one could run %post, %setup, bootstrap separately.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/georghildebrand|georghildebrand>",
                "title": "#658 [feature request] Option to run only parts of the bootstrapping process. ",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/658",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493928552.301936",
        "date": 1493928552301
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299249237|#628: Add a Gitter chat badge to README.md>",
                "text": "There still could be another option, here are some that I found:\n\n• <https://ryver.com/>\n• <https://rocket.chat/>\n• <https://www.samepage.io/>\n• <https://sdelements.github.io/lets-chat/>\n• <https://glip.com/pricing>\n\nit's too bad the <https://www.recode.net/2017/3/9/14872162/googles-hangouts-slack-rooms-thread-conversation|new hangouts> I think isn't free, I bet that one will top them all :)\n\nself hosting is probably a no go, but a nice option if we ever have the resources.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299249237|#628: Add a Gitter chat badge to README.md>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493917812.358585",
        "date": 1493917812358
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299226383|#628: Add a Gitter chat badge to README.md>",
                "text": "yeah I'm in agreement - I really wanted Gitter to be great, but it doesn't work very well. ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299226383|#628: Add a Gitter chat badge to README.md>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493912854.915981",
        "date": 1493912854915
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/475#issuecomment-299209731|#475: Add/opensuse>",
                "text": "@FlyElephant-M31, We are getting close to releasing 2.3, and would love to have this support. Any chance on getting it ported to the development branch?\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/475#issuecomment-299209731|#475: Add/opensuse>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493909679.884390",
        "date": 1493909679884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299209300|#628: Add a Gitter chat badge to README.md>",
                "text": "Do we want Gitter as our default? I love the idea, but it is a tad clunky and not as intuitive as Slack. On the other hand, even though Slack has a fantastic interface, it's financially motivated limitations (especially for an open source project) has really rubbed me the wrong way.\n\nThoughts?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/628#issuecomment-299209300|#628: Add a Gitter chat badge to README.md>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493909592.856661",
        "date": 1493909592856
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-299207333|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "Thank you very much @gmkurtzer.  I was waiting on my sys admin here to build and install the new version to test it.\n\nThank you very much, I will open an issue or PR if we find anything not working.",
                "pretext": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-299207333|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493909216.735997",
        "date": 1493909216735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/653|#653 Add bind mounts to slurm support, and clarify options> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/653|#653 Add bind mounts to slurm support, and clarify options> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493909127.706604",
        "date": 1493909127706
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-299206862|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "I am inclined to accept this PR as it stands considering I am pretty sure that the SLURM support as it stands in the development branch right now doesn't work.\n\n@djw8605 If you have an opportunity to test and find any issues, let's open another PR.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-299206862|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493909121.704624",
        "date": 1493909121704
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493854685.202630",
        "date": 1493854685202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-299065104|#642: bind paths and overlay in the configuration file>",
                "text": "It sounds like this issue is ready for closing, and I'm in cleanup mode. Comment and let me know if it needs reopening.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-299065104|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493854685.202613",
        "date": 1493854685202
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299036986|#655: Making the world a better place>",
                "text": "Wahoo, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299036986|#655: Making the world a better place>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493845956.704398",
        "date": 1493845956704
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299036919|#655: Making the world a better place>",
                "text": ":rainbow: :earth_asia: :smile: ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299036919|#655: Making the world a better place>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493845936.700033",
        "date": 1493845936700
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/655|#655 Making the world a better place> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/655|#655 Making the world a better place> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493845877.686258",
        "date": 1493845877686
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-299025394|#657: Files missing in release archive>",
                "text": "haha, np! I think at that time we were still having conversations like \"oh, releases! yeah we should have those... Github tags? Oh yeah that will make it work!\" :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-299025394|#657: Files missing in release archive>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493843238.995460",
        "date": 1493843238995
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299024148|#655: Making the world a better place>",
                "image_url": "https://asciinema.org/a/118922.png",
                "image_width": 226,
                "image_height": 250,
                "image_bytes": 88689,
                "text": "I've updated the PR to do the following:\n\n• info statements are not printed with any color, even\n• the progress bar is not printed with any color, ever\n• this means by default, we can have colors enabled for logger prefixes for a subset of levels (but not all)\n\nFor a demo of this during runtime, <https://asciinema.org/a/118922?speed=3|see here>\nFor a demo of the different levels and all colors, <https://asciinema.org/a/118923?speed=3|see here>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-299024148|#655: Making the world a better place>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            },
            {
                "fallback": "asciinema.org: Singularity Message (Python) colors, Interactive",
                "image_url": "https://asciinema.org/a/118923.png",
                "image_width": 226,
                "image_height": 250,
                "image_bytes": 76102,
                "service_name": "asciinema.org",
                "text": "This shows the complete array of Singularity message colors for the Python bits. For the complete example, see the description in: the runtime example here",
                "title": "Singularity Message (Python) colors, Interactive",
                "id": 2,
                "title_link": "https://asciinema.org/a/118923?speed=3",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493842967.924073",
        "date": 1493842967924
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/657|#657 Files missing in release archive> by <https://github.com/cclerget|cclerget>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/657|#657 Files missing in release archive> by <https://github.com/cclerget|cclerget>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493840382.230716",
        "date": 1493840382230
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by cclerget on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-299013754|#657: Files missing in release archive>",
                "text": "Oh my bad, sorry ! I thought it was introduced in 2.2 release",
                "pretext": "[singularityware/singularity] New comment by cclerget on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-299013754|#657: Files missing in release archive>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493840382.230714",
        "date": 1493840382230
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-299006683|#642: bind paths and overlay in the configuration file>",
                "text": "@afortiorama Yes, you need dev, sys, and proc mounted.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-299006683|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493838603.754941",
        "date": 1493838603754
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298971756|#656: ImportError: cannot import name get_fullpath>",
                "text": "in an already existing repo:\n\n```git checkout -b development\ngit pull origin development\n```\nor clone fresh\n\n```git checkout -b development https://github.com/singularityware/singularity.git\n```\n\nthen cd singularity and do the same install. You can check with:\n\n```singularity --version\n```\nwhich should be something like 2.99 followed by the commit id.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298971756|#656: ImportError: cannot import name get_fullpath>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493830723.487317",
        "date": 1493830723487
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-298956526|#657: Files missing in release archive>",
                "text": "hey @cclerget! pull wasn't added until a later version of 2.2, so your best bet will be to use development branch. You could also try one of the security releases for 2.2, although I'm not totally sure when it was added.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/657#issuecomment-298956526|#657: Files missing in release archive>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493827348.525763",
        "date": 1493827348525
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#657 Files missing in release archive' https://github.com/singularityware/singularity/issues/657 by cclerget",
                "text": "Hello,\n\nThere is something wrong with generation of release archive.\n\nAfter compiling and installing latest release 2.2.1 from release archive:\n<https://github.com/singularityware/singularity/releases/download/2.2.1/singularity-2.2.1.tar.gz>\nor\n<https://github.com/singularityware/singularity/archive/2.2.1.tar.gz>\nthe resulting binary come without pull command.\n\nBy comparing archive content and git repository, it appear that libexec/cli/pull.* files are missing, for all versions",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/cclerget|cclerget>",
                "title": "#657 Files missing in release archive",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/657",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493825351.900435",
        "date": 1493825351900
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298946384|#656: ImportError: cannot import name get_fullpath>",
                "text": "HI @lheck on your prefered folder. just run\n\n```git clone -b development https://github.com/singularityware/singularity.git \n```\nOr you can try with the <https://github.com/singularityware/singularity-builder|Singularity-Builder> repo.",
                "pretext": "[singularityware/singularity] New comment by ArangoGutierrez on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298946384|#656: ImportError: cannot import name get_fullpath>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493825304.884752",
        "date": 1493825304884
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by lheck on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298918435|#656: ImportError: cannot import name get_fullpath>",
                "text": "How do I get the development branch?",
                "pretext": "[singularityware/singularity] New comment by lheck on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298918435|#656: ImportError: cannot import name get_fullpath>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493819822.167449",
        "date": 1493819822167
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298915906|#656: ImportError: cannot import name get_fullpath>",
                "text": "hey @lheck ! This error was a name conflict, for a package called \"utils\" that does not have our functions. Could you please try installation with the development branch? We've fixed this by renaming utils to sutils. Let us know if this resolves the issue!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298915906|#656: ImportError: cannot import name get_fullpath>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493819307.022376",
        "date": 1493819307022
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by lheck on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298913181|#656: ImportError: cannot import name get_fullpath>",
                "text": "I should mention: we have a linux system and in our python installation we have utils packages installed using pip.",
                "pretext": "[singularityware/singularity] New comment by lheck on issue <https://github.com/singularityware/singularity/issues/656#issuecomment-298913181|#656: ImportError: cannot import name get_fullpath>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493818711.857003",
        "date": 1493818711857
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#656 ImportError: cannot import name get_fullpath' https://github.com/singularityware/singularity/issues/656 by lheck",
                "text": "Dear singularity team, I am trying to build singularity and get \n./configure_transform.py --defaults ../src/lib/config_defaults.h --infile singularity.conf.in --outfile singularity.conf\nTraceback (most recent call last):\n  File \"./configure_transform.py\", line 8, in &lt;module&gt;\n    from utils import (\nImportError: cannot import name get_fullpath\nmake[1]: *** [singularity.conf] Error 1\n\nI found a similar link on this page. It looked that this specific problem only appeared under #542 with dpjensen commenting. \n\nAs I only now downloaded singularity from github, should the problem not have been solved in there?\nWhere can I go from here?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/lheck|lheck>",
                "title": "#656 ImportError: cannot import name get_fullpath",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/656",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493818142.704732",
        "date": 1493818142704
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298792263|#655: Making the world a better place>",
                "text": "I can tell by your quick response to this PR that you are super excited about colors in the terminal @gmkurtzer ! To make it more flexible and error tolerant, I've added an optional environment variable that will completely disable color output. Eg:\n\n```SINGULARITY_COLORIZE=false\nexport SINGULARITY_COLORIZE\n```\nI also do a check to see if the output is not in a terminal (eg going to pipe) and it doesn't use color in those cases. I tried exporting the different TERM environment variables as you specified, but it didn't seem to cause issue with the colors. This could be that I am not able to reproduce a terminal that doesn't support ansi escape. From Googling, it seems like the biggest contender is Windows-based terminals, and we could do a check for the system type if we ever add Windows support. Which I hope is just never. I didn't say that :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298792263|#655: Making the world a better place>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493768856.895686",
        "date": 1493768856895
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298721183|#655: Making the world a better place>",
                "text": "@gmkurtzer is there a way to test this? We can also easily disable all colors if the term is in some list, or not in some list. It really looks nice, and makes it fun and easier to distinguish the different output, I hope we can have colors :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298721183|#655: Making the world a better place>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493749843.817234",
        "date": 1493749843817
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298714989|#642: bind paths and overlay in the configuration file>",
                "text": "Hi,\n\nthank you, so I've disable the users bind control and disabled mount home and mount tmp. And now I can bind /pippo without the rest.\n\nwould you recommend to leave mount dev, sys and proc?",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298714989|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493748505.435288",
        "date": 1493748505435
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298712943|#655: Making the world a better place>",
                "image_url": "https://asciinema.org/a/dqrl3xt07ypa0bkllh1jxezdb.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 57949,
                "text": "<https://asciinema.org/a/dqrl3xt07ypa0bkllh1jxezdb?speed=3|Seems to be ok> unless I did the change of term incorrectly? (I exported the `TERM` variable)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298712943|#655: Making the world a better place>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493748058.304408",
        "date": 1493748058304
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298656279|#643: shell command doesn't read .bashrc>",
                "text": "I meant the --help with the software; I didn't see other docs.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298656279|#643: shell command doesn't read .bashrc>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493736173.786274",
        "date": 1493736173786
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298643075|#655: Making the world a better place>",
                "text": "It's very colorful! Can you set `TERM=xterm` and `TERM=vt100`? I'm just wondering what happens in legacy modes.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/655#issuecomment-298643075|#655: Making the world a better place>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493733410.958272",
        "date": 1493733410958
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/645|#645 `locale` configuration copied into container> by <https://github.com/nordmoen|nordmoen>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/645|#645 `locale` configuration copied into container> by <https://github.com/nordmoen|nordmoen>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493724073.141111",
        "date": 1493724073141
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298608577|#645: `locale` configuration copied into container>",
                "text": "Resolving issue :100: ",
                "pretext": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298608577|#645: `locale` configuration copied into container>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493724073.141103",
        "date": 1493724073141
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298578628|#645: `locale` configuration copied into container>",
                "text": "ok cool, is this issue resolved then? And happy holidays!! I hope we get some more over here soon too :)",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298578628|#645: `locale` configuration copied into container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493717847.233582",
        "date": 1493717847233
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298561763|#645: `locale` configuration copied into container>",
                "text": "To elaborate, I tried to debug in the same way as above.\n\nFor `--contain` I get this `locale` configuration:\n```Singularity locale.img:~&gt; locale\nlocale: Cannot set LC_ALL to default locale: No such file or directory\nLANG=en_US.UTF-8\nLANGUAGE=\nLC_CTYPE=en_US.UTF-8\nLC_NUMERIC=nb_NO.UTF-8\nLC_TIME=nb_NO.UTF-8\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=nb_NO.UTF-8\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=nb_NO.UTF-8\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=nb_NO.UTF-8\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n```\n\nFor `--containall` and `--cleanenv`:\n```Singularity locale.img:~&gt; locale\nLANG=en_US.UTF-8\nLANGUAGE=\nLC_CTYPE=\"en_US.UTF-8\"\nLC_NUMERIC=\"en_US.UTF-8\"\nLC_TIME=\"en_US.UTF-8\"\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=\"en_US.UTF-8\"\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=\"en_US.UTF-8\"\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=\"en_US.UTF-8\"\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n```\nIn all of them I get the following from `locale -a`:\n```Singularity locale.img:~/Repos/singularity_images/locale&gt; locale -a\nC\nC.UTF-8\nen_US.utf8\nPOSIX\n```\nI don't know if `locale` is case-sensitive, but that could be the problem?",
                "pretext": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298561763|#645: `locale` configuration copied into container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493715041.773407",
        "date": 1493715041773
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298556094|#645: `locale` configuration copied into container>",
                "text": "Again, sorry for the delay, Norwegian holidays...\n\nI tried all the options you mentioned with the same result:\n```bash\n ✘  ~/Repos/singularity_images/locale  singularity shell --contain locale.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity locale.img:~&gt; cd /workspace/\nSingularity locale.img:/workspace&gt; ./a.out \nterminate called after throwing an instance of 'std::runtime_error'\n  what():  locale::facet::_S_create_c_locale name not valid\nAborted (core dumped)\nSingularity locale.img:/workspace&gt; exit\nexit\n ✘  ~/Repos/singularity_images/locale  singularity shell --cleanenv locale.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity locale.img:~/Repos/singularity_images/locale&gt; cd /workspace/\nSingularity locale.img:/workspace&gt; ./a.out \nterminate called after throwing an instance of 'std::runtime_error'\n  what():  locale::facet::_S_create_c_locale name not valid\nAborted (core dumped)\nSingularity locale.img:/workspace&gt; exit\nexit\n ✘  ~/Repos/singularity_images/locale  singularity shell --containall locale.img\nSingularity: Invoking an interactive shell within container...\n\nSingularity locale.img:~&gt; cd /workspace/\nSingularity locale.img:/workspace&gt; ./a.out \nterminate called after throwing an instance of 'std::runtime_error'\n  what():  locale::facet::_S_create_c_locale name not valid\nAborted (core dumped)\n```",
                "pretext": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298556094|#645: `locale` configuration copied into container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493714211.641076",
        "date": 1493714211641
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#655 Making the world a better place' https://github.com/singularityware/singularity/pull/655 by vsoch",
                "image_url": "https://asciinema.org/a/118543.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 40632,
                "text": "I'll just leave this here.\n\n<https://asciinema.org/a/118543?speed=3>\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#655 Making the world a better place",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/655",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493706487.648211",
        "date": 1493706487648
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/654#issuecomment-298441597|#654: Add/plugins: environment variable driven custom functions for Singularity>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/654#issuecomment-298441597|#654: Add/plugins: environment variable driven custom functions for Singularity>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493675247.592967",
        "date": 1493675247592
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/654|#654 Add/plugins: environment variable driven custom functions for Singularity> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/654|#654 Add/plugins: environment variable driven custom functions for Singularity> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493675156.576664",
        "date": 1493675156576
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298436356|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "I resolved it via the web interface, can you test it?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298436356|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493673741.309178",
        "date": 1493673741309
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#654 Add/plugins: environment variable driven custom functions for Singularity' https://github.com/singularityware/singularity/pull/654 by vsoch",
                "image_url": "https://asciinema.org/a/118507.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 53901,
                "text": "This is a first go at a (simple) implementation for custom functionality to be triggered by an environment variable. In this case, we have the following issue. For most of our bootstraps, a recursive function to change permissions on the tarballs is sufficient to produce a working container. This process is much faster than our old approach (by 2-6 or 7 times depending on the image), and the ideal \"default\" setting. However, we have niche use cases, namely containers like `docker://blacklabelops/centos` where the default doing this, <https://github.com/singularityware/singularity/issues/538#issuecomment-289534014|as we've seen before>\n\n```singularity shell docker://blacklabelops/centos\n```\nisn't going to work. However we should not add extreme levels of custom commands on funky tarballs that require slowing down the process by 2-7 fold for all users just for these niche use cases. \n\nThe workaround is to empower the user to ask for this permissions fix, and the slowdown, and we can do this by way of what I am calling a \"plugin\" or a custom function/filter to run given the preference for it. With our current base, this makes sense to specify via environment variables, and @gmkurtzer we could have some kind of command line flag, or in the case of many plugins, an additional `%plugins` or `%custom` section in the bootstrap (at some point in the future.) For example, here is how the current PR works:\n\n```\n\n*Runs normally, changing permissions after Python at the end  (fast)*\n\nsingularity shell docker://ubuntu\n\n*Changes permissions in memory using python*\n\nSINGULARITY_FIX_PERMS=True\nexport SINGULARITY_FIX_PERMS\nsingularity shell docker://ubuntu\n```\n\nTo see how it works, I've also prepared a <https://asciinema.org/a/118507?speed=3|DEMO>.\n\nIn the future, you could imagine something like:\n\n```\nBootstrap: docker\nFrom: blacklabelops/centos\n\n%custom\nplugin fix_perms\n```\n\nor\n\n```\nBootstrap: docker\nFrom: blacklabelops/centos\n\n%plugins\nfix_perms var1\nadd_webserver port\n```\netc.etc.\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#654 Add/plugins: environment variable driven custom functions for Singularity",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/654",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493673414.243223",
        "date": 1493673414243
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298421567|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "Great!  @gmkurtzer I was able to change the \"base\" of this pull request.\n\nCould you look at the conflict, it looks like you changed it to use the function `singularity_registry_get` instead of `envar_path`.  I'm not familiar with this function, possibly you could help resolve this conflict?",
                "pretext": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298421567|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493669925.458606",
        "date": 1493669925458
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298416418|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "Hi @djw8605,\n\nThis looks fantastic! Can you rebase or resubmit this PR against the development branch (as opposed to master)? Sorry about the confusion in branches, we are moving to the standard GitFlow model as soon as we get 2.3 released.\n\nThank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298416418|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493668643.156026",
        "date": 1493668643156
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298416027|#648: Fix for glibc-2.25 changes>",
                "text": "Hi @jlec,\n\nOh fantastic news about maintaining it in Gentoo main repo, thank you! We should post a news bulletin about that!\n\nBootstrapping using a base OS tarball is very clean, great idea! Let me know if you need a hand or have any questions. If you want to join our Slack, send me a mail at gmkurtzer@gmail.com.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298416027|#648: Fix for glibc-2.25 changes>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493668546.132971",
        "date": 1493668546132
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/652|#652 Fix for glibc-2.25 changes> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/652|#652 Fix for glibc-2.25 changes> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493668420.102475",
        "date": 1493668420102
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/652#issuecomment-298415511|#652: Fix for glibc-2.25 changes>",
                "text": "Perfect, thank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/652#issuecomment-298415511|#652: Fix for glibc-2.25 changes>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493668416.101631",
        "date": 1493668416101
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298407369|#653: Add bind mounts to slurm support, and clarify options>",
                "text": "@bbockelm As the original maintainer of the slurm support, could you take a look at this pull request.",
                "pretext": "[singularityware/singularity] New comment by djw8605 on pull request <https://github.com/singularityware/singularity/pull/653#issuecomment-298407369|#653: Add bind mounts to slurm support, and clarify options>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493666262.606757",
        "date": 1493666262606
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#653 Add bind mounts to slurm support, and clarify options' https://github.com/singularityware/singularity/pull/653 by djw8605",
                "text": "After testing with real user's feedback, we have made changes to the Slurm support for singularity.\n\nChanges proposed in this pull request:\n\n• Added some return value checks.\n• Renamed option --image to --singularity-image.\n• Added --singularity-bind option\n• Added \"spank/singularity\" string in format string passed to slurm_error().\n• Wrapped lines that spanned more than 80 characters where I could.\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/djw8605|djw8605>",
                "title": "#653 Add bind mounts to slurm support, and clarify options",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/653",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493666224.598166",
        "date": 1493666224598
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/648|#648 Fix for glibc-2.25 changes> by <https://github.com/jlec|jlec>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/648|#648 Fix for glibc-2.25 changes> by <https://github.com/jlec|jlec>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493664168.097408",
        "date": 1493664168097
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#652 Fix for glibc-2.25 changes' https://github.com/singularityware/singularity/pull/652 by jlec",
                "text": "In glibc 2.25 sys/types.h doesn't automatically include sys/sysmacros.h\nanymore [1]. This leads to errors [2] like\n\nlibtool: link: x86_64-pc-linux-gnu-gcc -Wall -fpie -fPIC -O2 -pipe\n-march=native -Wall -Wl,-O1 -Wl,--as-needed -o sexec-suid sexec_suid-sexec.o\nutil/sexec_suid-util.o util/sexec_suid-file.o  lib/.libs/libsingularity.a\nlib/.libs/libsingularity.a(libsingularity_la-loop-control.o): In function\n`singularity_loop_bind':\nloop-control.c:(.text+0x422): undefined reference to `makedev'\nlib/.libs/libsingularity.a(dev.o): In function `singularity_mount_dev':\n\n1)\n<https://sourceware.org/ml/libc-alpha/2015-11/msg00253.html>\n2)\n<https://bugs.gentoo.org/show_bug.cgi?id=617082>\n\nSigned-off-by: Justin Lecher <mailto:jlec@gentoo.org|jlec@gentoo.org>\n\nFixes #648\n\nChanges proposed in this pull request\n\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/jlec|jlec>",
                "title": "#652 Fix for glibc-2.25 changes",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/652",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493664156.094486",
        "date": 1493664156094
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298385631|#643: shell command doesn't read .bashrc>",
                "text": "good idea. Do you mean the --help with the software, the docs, or both?",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298385631|#643: shell command doesn't read .bashrc>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493660944.291430",
        "date": 1493660944291
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298378896|#643: shell command doesn't read .bashrc>",
                "text": "Ok.  How about documenting this surprising behavior in the shell help?  I think normally people would expect it to run the shell from /etc/passwd.  That's what I expected.  I see the help says it will run /bin/sh, but that's not actually what it does.\n\nI also see the -s option can be used to set SINGULARITY_SHELL.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298378896|#643: shell command doesn't read .bashrc>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493659246.882615",
        "date": 1493659246882
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by jlec on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298377337|#648: Fix for glibc-2.25 changes>",
                "text": "Hi @gmkurtzer \n\nsure will send it later.\n\nI am maintaining singularity in the main gentoo repository. \n\nBootstrap should be fairly straight forward. We are providing a _stage 3_ as tarball, which is basically a bootable system. For some more convenience the bootstrap should include setting up at least the main repository. I can have a look into that.",
                "pretext": "[singularityware/singularity] New comment by jlec on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298377337|#648: Fix for glibc-2.25 changes>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493658836.786397",
        "date": 1493658836786
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298375073|#642: bind paths and overlay in the configuration file>",
                "text": "@afortiorama to answer your question about crashing with overlay, that was a problem on Centos7.2 but not CentOS7.3.  It would crash whenever it was used in combination with cvmfs as you are doing.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298375073|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493658247.654473",
        "date": 1493658247654
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-298370582|#651: singularity inspect>",
                "text": "yes exactly! We would start with labels, but probably eventually want to expose more about the containers configuration, etc.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-298370582|#651: singularity inspect>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493657000.374691",
        "date": 1493657000374
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-298369917|#651: singularity inspect>",
                "text": "Something like this?\n\n```$ singularity -q exec docker://centos cat /.singularity.d/labels.json\n{\"build-date\": \"20170406\", \"vendor\": \"CentOS\", \"name\": \"CentOS Base Image\", \"license\": \"GPLv2\"}gmk@gmkdev2:~/git/singularity$ \n```",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/651#issuecomment-298369917|#651: singularity inspect>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493656802.331572",
        "date": 1493656802331
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#651 singularity inspect' https://github.com/singularityware/singularity/issues/651 by vsoch",
                "text": "If our singularity metadata folder is hidden, and if we aren't (yet) having support for a header proper, we should consider providing a simple command line utility for the user to (minimally) access some of the containers metadata. For example, docker inspect reveals the equivalent of it's configuration (and it's json, which isn't great for parsing in bash, but is still possible and of course works great with most programming languages). Here I can see it while running the docker container, ubuntu:\n\n```\n docker inspect ubuntu\n[\n    {\n        \"Id\": \"sha256:f7b3f317ec734a73deca91b34c2b1e3dd7454650da9c8ef3047d29a873865178\",\n        \"RepoTags\": [\n            \"ubuntu:latest\"\n        ],\n        \"RepoDigests\": [\n            \"ubuntu@sha256:f3a61450ae43896c4332bda5e78b453f4a93179045f20c8181043b26b5e79028\"\n        ],\n        \"Parent\": \"\",\n        \"Comment\": \"\",\n\n...\netc\n```\n\nRight now, just by running a command to cat the labels, I can see some basic stuff about a singularity container:\n\n``` singularity exec ubuntu.img cat /.singularity.d/labels.json\n{\n    \"SINGULARITY_DEFFILE_BOOTSTRAP\": \"docker\",\n    \"SINGULARITY_DEFFILE\": \"Singularity\",\n    \"SINGULARITY_DEFFILE_FROM\": \"ubuntu:latest\",\n    \"SINGULARITY_BOOTSTRAP_VERSION\": \"2.2.99\"\n}\n```\nso, given that we will eventually want to interact with containers in this manner (eg integration with external tools) and we want it to not have to be known that labels (or other stuffs) are \"hiding\" in this hidden folder, we should provide easy access to these things via some kind of `inspect`. We could even use singularity to bootstrap Docker's API and serve their metadata without needing to pull the layers (eg you could inspect a Docker image and return a specific field, the size, number of layers, etc., and this is useful so you know how to best generate your singularity spec that bootstraps a Docker image. Thoughts?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/vsoch|vsoch>",
                "title": "#651 singularity inspect",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/651",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493610832.035144",
        "date": 1493610832035
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/650#issuecomment-298274736|#650: adding docs for -T/--notest command in bootstrap>",
                "text": ":)",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/650#issuecomment-298274736|#650: adding docs for -T/--notest command in bootstrap>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493604899.740236",
        "date": 1493604899740
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/650#issuecomment-298274611|#650: adding docs for -T/--notest command in bootstrap>",
                "text": "Haha, thanks!!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/650#issuecomment-298274611|#650: adding docs for -T/--notest command in bootstrap>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493604809.735724",
        "date": 1493604809735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/650|#650 adding docs for -T/--notest command in bootstrap> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/650|#650 adding docs for -T/--notest command in bootstrap> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493604798.735182",
        "date": 1493604798735
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#650 adding docs for -T/--notest command in bootstrap' https://github.com/singularityware/singularity/pull/650 by vsoch",
                "text": "Fixes #@gmk :)\n\nChanges proposed in this pull request\n\n• adding a line to the bootstrap help doc to explain the notest option.\n• \n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#650 adding docs for -T/--notest command in bootstrap",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/650",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493604038.692031",
        "date": 1493604038692
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298273204|#647: Add ability to skip tests when bootstrapping image>",
                "text": "Singularity development branch now supports the ability to skip the `%test` during `bootstrap` with the `--notest` option.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298273204|#647: Add ability to skip tests when bootstrapping image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493603660.669371",
        "date": 1493603660669
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/649#issuecomment-298238458|#649: Add compression support for .img format>",
                "text": "Support for compressed images via SquashFS does already exist. Would that meet the use-case?\n\nBtw, on the fly decompression can not work with the default Singularity image in the format it stands now. ",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/649#issuecomment-298238458|#649: Add compression support for .img format>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493565855.937487",
        "date": 1493565855937
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298238344|#647: Add ability to skip tests when bootstrapping image>",
                "text": "Hiya! Nope, no documentation on it yet as it was just introduced for testing. \n\nOptionally suppressing the tests during build would be an easy addition, I'll add it. \n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298238344|#647: Add ability to skip tests when bootstrapping image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493565736.932676",
        "date": 1493565736932
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#649 Add compression support for .img format' https://github.com/singularityware/singularity/issues/649 by DeepHorizons",
                "text": "While there is already a discussion on minimizing the image size in #470, another idea to reduce the size would be compression. A fast compression method such as LZ4 could be used to allow on the fly decoding. With initial tests images are often reduced to less than 50% of their original size.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DeepHorizons|DeepHorizons>",
                "title": "#649 Add compression support for .img format",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/649",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493565616.927405",
        "date": 1493565616927
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298235984|#647: Add ability to skip tests when bootstrapping image>",
                "text": "Hey @gmkurtzer \n\nNeat option! I'll check that out when I get the chance. Anything in the docs on how it works / debugging?\n\n`%buildtest` and `%runtest` don't exactly fit my use case. I don't know of any test that I could run on my GPU images that would not require a GPU. I still run the tests on the cluster with a GPU, I just don't need to run the tests when building. The main reason behind this is for better error reporting. If I could suppress the tests when building, I could have better error logging on the build process. Instead I have to have everything ignoring errors and looking through the logs manually.",
                "pretext": "[singularityware/singularity] New comment by DeepHorizons on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298235984|#647: Add ability to skip tests when bootstrapping image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493563180.825209",
        "date": 1493563180825
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298234293|#648: Fix for glibc-2.25 changes>",
                "text": "Ahh, this looks great thank you! Can you re-PR this against the \"development\" branch?\n\nAlso is there any chance you would be interested in brining in Gentoo bootstrap support and/or submitting it to Gentoo as a package to include?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/648#issuecomment-298234293|#648: Fix for glibc-2.25 changes>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493561095.739681",
        "date": 1493561095739
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#648 Fix for glibc-2.25 changes' https://github.com/singularityware/singularity/pull/648 by jlec",
                "text": "In glibc 2.25 sys/types.h doesn't automatically include sys/sysmacros.h\nanymore [1]. This leads to errors [2] like\n\nlibtool: link: x86_64-pc-linux-gnu-gcc -Wall -fpie -fPIC -O2 -pipe\n-march=native -Wall -Wl,-O1 -Wl,--as-needed -o sexec-suid sexec_suid-sexec.o\nutil/sexec_suid-util.o util/sexec_suid-file.o  lib/.libs/libsingularity.a\nlib/.libs/libsingularity.a(libsingularity_la-loop-control.o): In function\n`singularity_loop_bind':\nloop-control.c:(.text+0x422): undefined reference to `makedev'\nlib/.libs/libsingularity.a(dev.o): In function `singularity_mount_dev':\n\n1)\n<https://sourceware.org/ml/libc-alpha/2015-11/msg00253.html>\n2)\n<https://bugs.gentoo.org/show_bug.cgi?id=617082>\n\nSigned-off-by: Justin Lecher <mailto:jlec@gentoo.org|jlec@gentoo.org>",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/jlec|jlec>",
                "title": "#648 Fix for glibc-2.25 changes",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/648",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493549965.350752",
        "date": 1493549965350
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298134595|#647: Add ability to skip tests when bootstrapping image>",
                "text": "Hiya @DeepHorizons,\n\nWe too have been working on GPU support and you can check it out in the 'development' branch with the `--nv` option.\n\nWould it work to have a separate %buildtest and %runtest?\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/647#issuecomment-298134595|#647: Add ability to skip tests when bootstrapping image>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493425679.588708",
        "date": 1493425679588
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/615#issuecomment-298132630|#615: Issue looking up hostname inside container>",
                "text": "Great news, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/615#issuecomment-298132630|#615: Issue looking up hostname inside container>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493424310.490883",
        "date": 1493424310490
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298129947|#642: bind paths and overlay in the configuration file>",
                "text": "Hi @afortiorama,\n\nI am not sure that I understand exactly, but the administrator does have the ability to bind the directories that they wish. The admin can define the `bind point`s to always include into the container, and then can enable/disable the `mount tmp` option.\n\nBut we make an assumption.... That the admin defines the most a user can do, but it is up to the user to decide if they want less then that. For example, `--contain` is basically saying, \"I don't need what the admin suggested, I know what I'm doing, using at my own risk\". The ability for users to utilize the `-B` option is also enabled/disabled by the administrator. If the admin decides users can do that, then they can technically override the administrator's bind points and give themselves the ability to shoot themselves in the foot. LOL\n\nHopefully that answers your questions and concerns, otherwise please accept my preemptive apology for the misunderstand and never-mind. ;)\n\nThanks!\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-298129947|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493422673.350255",
        "date": 1493422673350
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/644|#644 running from home path vs system path> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/644|#644 running from home path vs system path> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493422214.307429",
        "date": 1493422214307
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/644#issuecomment-298129138|#644: running from home path vs system path>",
                "text": "Singularity is very specific when it comes to the path of the configuration file, so each of those installations will most likely be using different configs. It also seems that \"test.py\" is in your current directory, so I would suggest that there is a difference between the two installations and/or configurations.\n\nThis doesn't seem like a Singularity error or issue, so I'm closing the issue (perhaps it deserves further discussion on the Google Group)?\n\nHope that helps!\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/644#issuecomment-298129138|#644: running from home path vs system path>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493422213.307377",
        "date": 1493422213307
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/643|#643 shell command doesn't read .bashrc> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/643|#643 shell command doesn't read .bashrc> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493421922.279508",
        "date": 1493421922279
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298128620|#643: shell command doesn't read .bashrc>",
                "text": "This is a \"feature\"! HAH\n\nIt came originally because I would always use `/bin/sh` for shell, but not all sh'es are equal (e.g. some are links to bash, sometimes dash, sometimes zsh, etc). It made the most sense to use Bash by default if present, but, when calling Bash directly, it automatically sources all of it's own login and dot files. Thus, if nothing else is passed, we call it with `--norc` option:\n\n```\n$ singularity shell -p /tmp/centos.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity centos.img:~/git/singularity&gt; ps auxf\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\ngmk          1  0.0  0.0  12884   156 pts/4    S    23:24   0:00 /usr/local/libexec/singularity/bin/action-suid\ngmk          2  0.0  0.3  15208  3120 pts/4    S    23:24   0:00 /bin/bash --norc\ngmk          3  0.0  0.3  50880  3240 pts/4    R+   23:24   0:00   `_` ps auxf\nSingularity centos.img:~/git/singularity&gt; \n```\n\nIf you specify `SINGULARITY_SHELL` in your environment, or use `exec` as you pointed out, you can bypass this default behavior.\n\nHope that helps!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/643#issuecomment-298128620|#643: shell command doesn't read .bashrc>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493421921.279474",
        "date": 1493421921279
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-298128154|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "Fantastic, thank you!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-298128154|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493421681.256602",
        "date": 1493421681256
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#647 Add ability to skip tests when bootstrapping image' https://github.com/singularityware/singularity/issues/647 by DeepHorizons",
                "text": "I'm building singularity images using an automated build system. The build system does not mimic the production system which the containers will be run on, in particular we are adding in support for GPUs. Because of this, the tests that I write for the images are meant to be run on production system, and fail on the build system.\n\nIs there a way to not run tests when bootstrapping an image? There was something like this in #305 but was never fleshed out.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DeepHorizons|DeepHorizons>",
                "title": "#647 Add ability to skip tests when bootstrapping image",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/647",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493420796.167813",
        "date": 1493420796167
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/636|#636 Adding check for empty Docker layers> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/636|#636 Adding check for empty Docker layers> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493419723.049598",
        "date": 1493419723049
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-298118222|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "text": "Just for linking to the docker pull idea: <https://github.com/singularityware/singularity/issues/531>",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-298118222|#646: [feature request]: checking for image size before import/bootstrap/other>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493417419.761076",
        "date": 1493417419761
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-298116662|#646: [feature request]>",
                "text": "hey @ityonemo ! I think this would be very reasonable / doable to implement, even without having the user specify a `%size` field.  Here are a few cases that come off the top of my head:\n\n*Case 1: User is making a new image*\n\nThis would be akin to doing a bootstrap or import into a newly created image. Given that we are adding docker layers to something, it is reasonable that, given that the layers dump is too big for the image that exists or is being generated, we could issue a warning. If we had create and bootstrap (or import) wrapped into one command (eg, @gmkurtzer this would have been like the docker pull I've been poking about) then the size of the image would be already available to compare against the size of the layers.  This would be fairly accurate given that the image is not yet generated, because we have confidence that most of the dump of content is going to fit in the empty image. So in summary:\n• given a new image with pull (bootstrap + create) we compare layers size to image size, stop if overflow\n• given a pre-existing empty image (bootstrap or import after create) we get size of image first, and compare to layers, stop if overflow\n\n*Case 2: User is importing into existing image*\n\nThis (I hope) is less likely done, because it would mean a less reproducible practice, but you can imagine importing layers into an already existing image. In this case, the most we can do is estimate the size of content in the image, estimate the size of the layers, and issue a warning (but probably not stop the process) if the imported stuffs is greater than the image size. The reason is because some of the dump of the layers might just override stuff already there, so the size wouldn't be extra added. So in summary:\n• given a pre-existing non empty image, we can't say what % of the image files will be overwritten, so the most we can do is give a warning.\n\n*Case 3: User is bootstrapping*\n\nThis case is most similar to what you are describing - the user has some idea about the size of the content in his bootstrap spec (meaning downloads and installs that aren't coming from the docker or other bootstrap). In this case, the user could specify some kind of `%size` parameter to check, but to play devil's advocate, couldn't he/she make this same specification when the image is created? Or is the idea to preserve this knowledge with the bootstrap?\n\nTLDR - I think this is a good feature to think about and possibly add, and implementation wise it is very doable. I added an endpoint to the Python internal API that will return the size for Docker layers, and this could be used by the calling function to do a check before any time intensive stuffs are done. I'll chat with @gmkurtzer about if/when/where would be reasonable to implement this!",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/646#issuecomment-298116662|#646: [feature request]>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493416862.678013",
        "date": 1493416862678
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#646 [feature request]' https://github.com/singularityware/singularity/issues/646 by ityonemo",
                "text": "Do you think it's reasonable to have a minimum size check for the singularity container bootstrap definitions? Perhaps a %size field in the container that checks to see if the existing image has at a minimum enough space, and halts if the .img file being bootstrapped is large enough.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ityonemo|ityonemo>",
                "title": "#646 [feature request]",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/646",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493414443.262990",
        "date": 1493414443262
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298053752|#645: `locale` configuration copied into container>",
                "text": "Have you tried the `--contain` and `--containall` commands to isolate your host from the container? If you just want to isolate environment vars, try `--cleanenv`. Note - these are runtime variables, not anything you specify in a bootstrap definition. Eg:\n\n```singularity shell --contain muffin.img\n```",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/645#issuecomment-298053752|#645: `locale` configuration copied into container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493399274.522411",
        "date": 1493399274522
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#645 `locale` configuration copied into container' https://github.com/singularityware/singularity/issues/645 by nordmoen",
                "text": "I have encountered yet another problem on the way to simulate my robot. This time around it seems as if some of my system configuration has been copied into the container, overwriting the docker configuration.\n\nThe problem is that launching <http://gazebosim.org/|`gzserver`> inside a container results in an error being thrown:\n```Singularity dyret_map.img:~&gt; gzserver\nNo protocol specified\nterminate called after throwing an instance of 'std::runtime_error'\n  what():  locale::facet::_S_create_c_locale name not valid\nAborted (core dumped)\n```\n\nTracking this down lead to the discovery that inside the container the `locale` is set to the same thing as outside without installing the necessary languages.\n\nInside my container executing `locale`:\n```Singularity dyret_map.img:~&gt; locale\nlocale: Cannot set LC_ALL to default locale: No such file or directory\nLANG=en_US.UTF-8\nLANGUAGE=\nLC_CTYPE=en_US.UTF-8\nLC_NUMERIC=nb_NO.UTF-8\nLC_TIME=nb_NO.UTF-8\nLC_COLLATE=\"en_US.UTF-8\"\nLC_MONETARY=nb_NO.UTF-8\nLC_MESSAGES=\"en_US.UTF-8\"\nLC_PAPER=nb_NO.UTF-8\nLC_NAME=\"en_US.UTF-8\"\nLC_ADDRESS=\"en_US.UTF-8\"\nLC_TELEPHONE=\"en_US.UTF-8\"\nLC_MEASUREMENT=nb_NO.UTF-8\nLC_IDENTIFICATION=\"en_US.UTF-8\"\nLC_ALL=\n```\nThen executing `locale -a` inside the container shows that the above languages (`nb_NO.UTF-8`) are not installed\n```Singularity dyret_map.img:~&gt; locale -a\nC\nC.UTF-8\nen_US.utf8\nPOSIX\n```\n\nIt seems to me that the configuration has been copied from my host computer into the container. To replicate this I created this small `C++` program:\n```cpp\n#include &lt;iostream&gt;\n#include &lt;locale&gt;\n\n// test_locale.cpp\n\nint main() {\n        auto loc = std::locale(\"nb_NO.UTF-8\");\n        std::cout.imbue(loc);\n        std::cout &lt;&lt; \"Hello 'C' world!\\n\";\n}\n```\nWhich when compiled (`g++ -std=c++11 test_locale.cpp`) works on my host computer, but fails inside a Singularity container.\n\n```bash\nRunning post scriptlet\n• cd /workspace\n• g++ -lboost_date_time -std=c++11 test_locale.cpp\n     Running test scriptlet\n• cd /workspace\n• ./a.out\n     terminate called after throwing an instance of 'std::runtime_error'\n     what():  locale::facet::_S_create_c_locale name not valid\n     Aborted (core dumped)\n     ERROR: Aborting with RETVAL=255\n     ```",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/nordmoen|nordmoen>",
                "title": "#645 `locale` configuration copied into container",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/645",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493386261.784426",
        "date": 1493386261784
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/615#issuecomment-297953722|#615: Issue looking up hostname inside container>",
                "text": "Sorry for the long delay.\n\nAdding `jorgehn-x1-carbon` to `/etc/hosts` works as expected.",
                "pretext": "[singularityware/singularity] New comment by nordmoen on issue <https://github.com/singularityware/singularity/issues/615#issuecomment-297953722|#615: Issue looking up hostname inside container>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493372024.343354",
        "date": 1493372024343
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/615|#615 Issue looking up hostname inside container> by <https://github.com/nordmoen|nordmoen>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/615|#615 Issue looking up hostname inside container> by <https://github.com/nordmoen|nordmoen>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493372024.343347",
        "date": 1493372024343
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297940327|#642: bind paths and overlay in the configuration file>",
                "text": "Said that there should be a way for an admin to share only the directories that she actually wants. for example /pippo but not /tmp ",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297940327|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493368256.670193",
        "date": 1493368256670
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297938525|#642: bind paths and overlay in the configuration file>",
                "text": "Hi Vanessa,\n\nthank you. My bad. I misunderstood the --contain option. Somehow as not \nto mount everything the user wants but only that is listed.\n\nif I remove that it works.\n\ncheers\nalessandra\n\nOn 28/04/2017 09:03, Vanessa Sochat wrote:\n&gt;\n&gt; Hey @afortiorama <https://github.com/afortiorama> ! Could you describe \n&gt; the trouble that you are having? When you use |--contain| you are \n&gt; asking Singularity to disable / not allow all mounts, and so the \n&gt; configuration in your config file to mount /pippo will not be seen. \n&gt; When you add back in |-B|, you are again over-riding that and honoring \n&gt; both |--contain| and the specification for the bind and the overlayfs \n&gt; allowed by the config. Here is the description of the command:\n&gt; \n&gt; |-c/--contain This option disables the automatic sharing of writable \n&gt; filesystems on your host (e.g. $HOME and /tmp). |\n&gt; \n&gt; Could you please describe what isn't working - what your expectation \n&gt; is, and what you are not able to achieve? We can help to debug the issue.\n&gt; \n&gt; —\n&gt; You are receiving this because you were mentioned.\n&gt; Reply to this email directly, view it on GitHub \n&gt; <https://github.com/singularityware/singularity/issues/642#issuecomment-297934961>, \n&gt; or mute the thread \n&gt; <https://github.com/notifications/unsubscribe-auth/AE1IEKjRfIFmEjE1IUXxZg9w92dp8_sUks5r0Z1TgaJpZM4NJ0Ph>.\n-- \nRespect is a rational process. \\//\nFatti non foste a viver come bruti, ma per seguir virtute e canoscenza(Dante)\nFor Ur-Fascism, disagreement is treason. (U. Eco)\nBut but but her emails... (Anonymous)",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297938525|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493367720.577274",
        "date": 1493367720577
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297934961|#642: bind paths and overlay in the configuration file>",
                "text": "Hey @afortiorama ! Could you describe the trouble that you are having? When you use `--contain` you are asking Singularity to disable / not allow all mounts, and so the configuration in your config file to mount /pippo will not be seen. When you add back in `-B`, you are again over-riding that and honoring both `--contain` and the specification for the bind and the overlayfs allowed by the config. Here is the description of the command:\n\n```    -c/--contain        This option disables the automatic sharing of writable\n                               filesystems on your host (e.g. $HOME and /tmp).\n```\n\nCould you please describe what isn't working - what your expectation is, and what you are not able to achieve? We can help to debug the issue.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297934961|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493366610.392489",
        "date": 1493366610392
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297931647|#642: bind paths and overlay in the configuration file>",
                "text": "Hi,\n\nit still doesn't work\n\n*Configuration* \n[singularity]# egrep 'overlay =|pippo' /etc/singularity/singularity.conf\nenable overlay = yes\nbind path = /pippo\n\n*New version*\n[singularity]# /usr/bin/singularity --version\n2.2.99\n\n*Running without options*\n[singularity]# /usr/bin/singularity shell --contain /cvmfs/atlas.cern.ch/repo/images/singularity/x86_64-slc6.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity.x86_64-slc6.img&gt; ls /pippo\nls: cannot access /pippo: No such file or directory\nSingularity.x86_64-slc6.img&gt; exit\n\n*Running with options*\n[singularity]# /usr/bin/singularity shell -B /pippo --contain /cvmfs/atlas.cern.ch/repo/images/singularity/x86_64-slc6.img \nSingularity: Invoking an interactive shell within container...\n\nSingularity.x86_64-slc6.img&gt; ls /pippo\npluto",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297931647|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493365582.230337",
        "date": 1493365582230
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#644 running from home path vs system path' https://github.com/singularityware/singularity/issues/644 by ketancmaheshwari",
                "text": "Running an image using the singularity executable from my $HOME works while using the same executable installed on an arbitrary system path does not work. The error is file not found.\n\n```\n[login1 singularity-Tensorflow]$ which singularity\n/ihome/install/singularity/bin/singularity\n[login1 singularity-Tensorflow]$ singularity exec ubuntu_tensorflow_GPU.img python test.py\npython: can't open file 'test.py': [Errno 2] No such file or directory\n\n```\nFollowing works:\n\n```\n[login1 singularity-Tensorflow]$ ~/singularity-install/bin/singularity exec ubuntu_tensorflow_GPU.img python test.py\n2017-04-27 17:51:40.045086: W tensorflow/core/platform/cpu_feature_guard.cc:45] ...\n...\n...\n\n```\n\nI checked that my home directory is mounted and available in the image. The `test.py` file is located in the directory from where the image is invoked in both cases. This problem is preventing us from making singularity available to the larger user base. Any suggestions?",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/ketancmaheshwari|ketancmaheshwari>",
                "title": "#644 running from home path vs system path",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/644",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493316001.710900",
        "date": 1493316001710
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#643 shell command doesn't read .bashrc' https://github.com/singularityware/singularity/issues/643 by DrDaveD",
                "text": "This is a fairly minor issue, but a little annoying.\n\nIn the latest development branch (I didn't test earlier versions), using the 'shell' command and --containall and --home where the mapped in home directory contains a .bashrc and the login shell is bash, bash does not read the .bashrc.  If I do 'exec $SHELL' inside the container, it then works.  If I use exec bash on the command line instead of shell, that also works.",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/DrDaveD|DrDaveD>",
                "title": "#643 shell command doesn't read .bashrc",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/643",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493311692.461916",
        "date": 1493311692461
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/635|#635 Mounting of user home directory failing with --containall on development branch> by <https://github.com/DrDaveD|DrDaveD>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/635|#635 Mounting of user home directory failing with --containall on development branch> by <https://github.com/DrDaveD|DrDaveD>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493311418.385041",
        "date": 1493311418385
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297771870|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "Yes it is working now, thanks.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297771870|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493311400.379721",
        "date": 1493311400379
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297750868|#642: bind paths and overlay in the configuration file>",
                "text": "Well, the 2.2 series won't get any updates (unless a security fix becomes required). If the 'development' branch works for you, I would just keep using that until the 2.3 version is released.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297750868|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493307252.106613",
        "date": 1493307252106
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297750424|#642: bind paths and overlay in the configuration file>",
                "text": "sure. Should I wait for 2.3?",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297750424|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493307169.079653",
        "date": 1493307169079
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749402|#642: bind paths and overlay in the configuration file>",
                "text": "Ooops, wrong button.",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749402|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306957.008514",
        "date": 1493306957008
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue re-opened: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306951.006544",
        "date": 1493306951006
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/642|#642 bind paths and overlay in the configuration file> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306949.005860",
        "date": 1493306949005
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749363|#642: bind paths and overlay in the configuration file>",
                "text": "Can you try with the development branch (which will soon be the 2.3 release)?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749363|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306949.005819",
        "date": 1493306949005
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749083|#642: bind paths and overlay in the configuration file>",
                "text": "Yes, you are understanding correctly.\n\nI'm using the 2.2.1 tarball.",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297749083|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306889.986425",
        "date": 1493306889986
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297748189|#642: bind paths and overlay in the configuration file>",
                "text": "Hi @afortiorama,\n\nIf I am understanding correctly, you are finding that the `bind path` configuration directive is not creating the directories if they don't already exist within the container even if overlay is enabled? Is that correct?\n\nWhat version of Singularity are you using?",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297748189|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493306706.926615",
        "date": 1493306706926
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297644538|#642: bind paths and overlay in the configuration file>",
                "text": "BTW I'm on CentOS7 with kernel 3.10.0-514.16.1.el7.x86_64  on ext4 and overlay isn't crashing. Are there particular situations in which it happens?",
                "pretext": "[singularityware/singularity] New comment by afortiorama on issue <https://github.com/singularityware/singularity/issues/642#issuecomment-297644538|#642: bind paths and overlay in the configuration file>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493280709.322573",
        "date": 1493280709322
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/636#issuecomment-297632870|#636: Adding check for empty Docker layers>",
                "text": "so weird, Travis appears to have fixed itself! Finally I can rest :P",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/636#issuecomment-297632870|#636: Adding check for empty Docker layers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493277686.841354",
        "date": 1493277686841
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue created: '#642 bind paths and overlay in the configuration file' https://github.com/singularityware/singularity/issues/642 by afortiorama",
                "text": "Question\n\nif I enable overlay and bind paths in the configuration files do the paths have to exist in the image? It is not clear in the documentation. And if I use overlay and -B option I can see the directories in the container but if I list the bind path in the configuration file I can't. ",
                "pretext": "[singularityware/singularity] Issue created by <https://github.com/afortiorama|afortiorama>",
                "title": "#642 bind paths and overlay in the configuration file",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/issues/642",
                "color": "F29513",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493276851.727664",
        "date": 1493276851727
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by bkemish on issue <https://github.com/singularityware/singularity/issues/624#issuecomment-297602646|#624: binding directories in the same base directory as home>",
                "text": "Perfect! Thanks Gregory.",
                "pretext": "[singularityware/singularity] New comment by bkemish on issue <https://github.com/singularityware/singularity/issues/624#issuecomment-297602646|#624: binding directories in the same base directory as home>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493264260.529101",
        "date": 1493264260529
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297600134|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "Oh my goodness... That was a silly error on my part, I blame this head cold I have!\n\nHopefully it is working better now?\n\nThanks for your patience on this!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297600134|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493263030.424724",
        "date": 1493263030424
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297598227|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "It works with overlay enabled, but not with it disabled:\n```DEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking that home directry is configured: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if SINGULARITY_CONTAIN is set\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'CONTAIN' = '1'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if home directories are being influenced by user\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'HOME' = '/cloud/login/dwd/root/home:/srv'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if user bind control is allowed\nDEBUG   [U=3382,P=2]       singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(user bind control, yes)\nDEBUG   [U=3382,P=2]       singularity_config_get_value_impl()       Returning configuration value user bind control='yes'\nDEBUG   [U=3382,P=2]       singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(user bind control, yes) = 1\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          SINGULARITY_HOME was set, not containing\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking ownership of home directory source: /cloud/login/dwd/root/home\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking to make sure home directory destination is a full path: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if home directory is already mounted: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_rootfs()              Returning container_directory: /var/lib/singularity/mnt/final\nDEBUG   [U=3382,P=2]       check_mounted()                           Opening /proc/mounts\nDEBUG   [U=3382,P=2]       check_mounted()                           Iterating through /proc/mounts\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if overlay is enabled\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning NULL on 'OVERLAYFS_ENABLED'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Staging home directory\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if sessiondir/tmpdir is set\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'SESSIONDIR' = '/tmp/.singularity-session-Msn5SOFMjN'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Identifying the base home directory: /srv\nDEBUG   [U=3382,P=2]       basedir()                                 Obtaining basedir for: /srv\nDEBUG   [U=3382,P=2]       basedir()                                 Iterating basedir: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking home directory base exists in container: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Creating temporary directory to stage home: /tmp/.singularity-session-Msn5SOFMjN/srv\nDEBUG   [U=3382,P=2]       s_mkpath()                                Creating directory: /tmp/.singularity-session-Msn5SOFMjN/srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Setting home directory source to: '/tmp/.singularity-session-Msn5SOFMjN' + '/srv'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Setting home directory dest to: '/var/lib/singularity/mnt/final' + '/srv'\nDEBUG   [U=3382,P=2]       singularity_priv_escalate()               Temporarily escalating privileges (U=3382)\nDEBUG   [U=0,P=2]          singularity_priv_escalate()               Clearing supplementary GIDs.\nVERBOSE [U=0,P=2]          singularity_runtime_mount_home()          Mounting home directory source into container: /tmp/.singularity-session-Msn5SOFMjN/srv -&gt; /var/lib/singularity/mnt/final/srv\n```",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297598227|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493262084.342510",
        "date": 1493262084342
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/636#issuecomment-297593540|#636: Adding check for empty Docker layers>",
                "text": "oups, looks like I killed the update to fix the docker layers, oh well. Will add again!",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/636#issuecomment-297593540|#636: Adding check for empty Docker layers>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493259895.136674",
        "date": 1493259895136
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/641|#641 Add \"docker://\" bash_completion to \"shell-exec-run\"> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/641|#641 Add \"docker://\" bash_completion to \"shell-exec-run\"> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493257096.856760",
        "date": 1493257096856
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297585305|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "Ahh, ok. I see the problem. Luckily it was an easy fix! Will you take another look, and let me know?\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297585305|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493256233.765671",
        "date": 1493256233765
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/638#issuecomment-297582332|#638: Bootstrapping a container from a Fedora 25 host>",
                "text": "Oh, on RedHat and Fedora (RPM) based systems, I'd recommend building an RPM. The process is pretty simple:\n\n```$ ./autogen.sh\n$ ./configure\n$ make dist\n$ rpmbuild -ta singularity-*.tar.gz\n```\n\nAnd then install the RPMs onto your base system via the normal means.\n\nHope that helps!\n\nGreg",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/638#issuecomment-297582332|#638: Bootstrapping a container from a Fedora 25 host>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493254912.626883",
        "date": 1493254912626
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297582044|#617: ERROR: Unrecognized OSBuild type: docker>",
                "text": "Oh, and the only reason I picked up on it so fast is because there was just a similar ticket and so it was fresh in my mind.\n\nGlad it's working now for you @inJeans and let us know how it works out for you.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297582044|#617: ERROR: Unrecognized OSBuild type: docker>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493254780.610737",
        "date": 1493254780610
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#641 Add \"docker://\"  bash_completion to \"shell-exec-run\"' https://github.com/singularityware/singularity/pull/641 by ArangoGutierrez",
                "text": "Just a minor add\nChanges proposed in this pull request\n\n• Add \"docker://\" for shell-exec-run to bash_completion\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/ArangoGutierrez|ArangoGutierrez>",
                "title": "#641 Add \"docker://\"  bash_completion to \"shell-exec-run\"",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/641",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493245969.483061",
        "date": 1493245969483
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297511258|#640: fixing tests>",
                "text": "Awesome, thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297511258|#640: fixing tests>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493233744.538269",
        "date": 1493233744538
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/640|#640 fixing tests> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/640|#640 fixing tests> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493233738.536853",
        "date": 1493233738536
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297510852|#640: fixing tests, not sure about pylint but can check in runtime!>",
                "text": "@gmkurtzer ",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297510852|#640: fixing tests, not sure about pylint but can check in runtime!>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493233644.511606",
        "date": 1493233644511
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297500772|#635: Mounting of user home directory failing with --containall on development branch>",
                "text": "@gmkurtzer Unfortunately it still gives me an empty directory.  Here's the debug output portion related to singularity_runtime_mount_home, using the above test command and default singularity.conf:\n```DEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking that home directry is configured: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if home directories are being influenced by user\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'HOME' = '/cloud/login/dwd/root/home:/srv'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if user bind control is allowed\nDEBUG   [U=3382,P=2]       singularity_config_get_bool_char_impl()   Called singularity_config_get_bool(user bind control, yes)\nDEBUG   [U=3382,P=2]       singularity_config_get_value_impl()       Returning configuration value user bind control='yes'\nDEBUG   [U=3382,P=2]       singularity_config_get_bool_char_impl()   Return singularity_config_get_bool(user bind control, yes) = 1\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking ownership of home directory source: /cloud/login/dwd/root/home\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking to make sure home directory destination is a full path: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if home directory is already mounted: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_rootfs()              Returning container_directory: /var/lib/singularity/mnt/final\nDEBUG   [U=3382,P=2]       check_mounted()                           Opening /proc/mounts\nDEBUG   [U=3382,P=2]       check_mounted()                           Iterating through /proc/mounts\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if overlay is enabled\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'CONTAIN' = '1'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Staging home directory\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking if sessiondir/tmpdir is set\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'SESSIONDIR' = '/tmp/.singularity-session-MNXSRljkXY'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Identifying the base home directory: /srv\nDEBUG   [U=3382,P=2]       basedir()                                 Obtaining basedir for: /srv\nDEBUG   [U=3382,P=2]       basedir()                                 Iterating basedir: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Checking home directory base exists in container: /srv\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Creating temporary directory to stage home: /tmp/.singularity-session-MNXSRljkXY/srv\nDEBUG   [U=3382,P=2]       s_mkpath()                                Creating directory: /tmp/.singularity-session-MNXSRljkXY/srv\nDEBUG   [U=3382,P=2]       singularity_registry_get()                Returning value from registry: 'CONTAIN' = '1'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Setting home directory source to: '/tmp/.singularity-session-MNXSRljkXY' + '/srv'\nDEBUG   [U=3382,P=2]       singularity_runtime_mount_home()          Setting home directory dest to: '/var/lib/singularity/mnt/final' + '/srv'\nDEBUG   [U=3382,P=2]       singularity_priv_escalate()               Temporarily escalating privileges (U=3382)\nDEBUG   [U=0,P=2]          singularity_priv_escalate()               Clearing supplementary GIDs.\nVERBOSE [U=0,P=2]          singularity_runtime_mount_home()          Mounting home directory source into container: /tmp/.singularity-session-MNXSRljkXY/srv -&gt; /var/lib/singularity/mnt/final/srv\n```\n\nI get similar results with overlay disabled.",
                "pretext": "[singularityware/singularity] New comment by DrDaveD on issue <https://github.com/singularityware/singularity/issues/635#issuecomment-297500772|#635: Mounting of user home directory failing with --containall on development branch>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493231424.857292",
        "date": 1493231424857
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297489810|#640: fixing tests, not sure about pylint but can check in runtime!>",
                "text": "confirmed pylint looks ok! I just didn't have it installed locally.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/640#issuecomment-297489810|#640: fixing tests, not sure about pylint but can check in runtime!>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493229017.128434",
        "date": 1493229017128
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request submitted: '#640 fixing tests, not sure about pylint but can check in runtime!' https://github.com/singularityware/singularity/pull/640 by vsoch",
                "text": "Probably didn't need to change the tests to output to PIPE, but it doesn't seem to matter.\n\nChanges proposed in this pull request\n\n -\n -\n -\n\n@singularityware-admin",
                "pretext": "[singularityware/singularity] Pull request submitted by <https://github.com/vsoch|vsoch>",
                "title": "#640 fixing tests, not sure about pylint but can check in runtime!",
                "id": 1,
                "title_link": "https://github.com/singularityware/singularity/pull/640",
                "color": "6CC644",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493228678.027123",
        "date": 1493228678027
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/630|#630 Markdown-ify> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/630|#630 Markdown-ify> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493221777.008206",
        "date": 1493221777008
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/630#issuecomment-297454928|#630: Markdown-ify>",
                "text": "Hrmm, this has been merged. Not sure why it didn't auto close, nor do I see it in the commit log, but I based my changes on your work, so I think GitHub is confused thus I'm closing this by hand. Feel free to check out my reorganization at <https://github.com/singularityware/singularity/commit/56ee6e80e158dda288609ca0d342a153c7ddfe19>.\n\nThanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/630#issuecomment-297454928|#630: Markdown-ify>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493221777.008096",
        "date": 1493221777008
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by ShadowAce on issue <https://github.com/singularityware/singularity/issues/638#issuecomment-297347043|#638: Bootstrapping a container from a Fedora 25 host>",
                "text": "Thanks, guys!! \n\nI have got version 2.2.99 up and running.  One thing I noticed, though--On Fedora (and maybe on RH systems in general), the executable gets installed into /usr/local/bin which is not in root's PATH.  Easy enough to fix, but maybe it should be mentioned in the docs.\n\nThis will be great to use!  I look forward to installing it on our HPC cluster.",
                "pretext": "[singularityware/singularity] New comment by ShadowAce on issue <https://github.com/singularityware/singularity/issues/638#issuecomment-297347043|#638: Bootstrapping a container from a Fedora 25 host>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493203187.500860",
        "date": 1493203187500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/638|#638 Bootstrapping a container from a Fedora 25 host> by <https://github.com/ShadowAce|ShadowAce>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/638|#638 Bootstrapping a container from a Fedora 25 host> by <https://github.com/ShadowAce|ShadowAce>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493203187.500845",
        "date": 1493203187500
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by c1t4r on issue <https://github.com/singularityware/singularity/issues/625#issuecomment-297301391|#625: make singularity calling cmdline available from within container>",
                "text": "Thanks @gmkurtzer @vsoch,\n\n  that is what I do now in `/etc/singularity/init` : \n\n```\nSINGULARITY_BINDDIRS=$(grep '^[ ]_bind path[ ]_=' /etc/singularity/singularity.conf | sed 's/._=[ ]_//' | tr '\\n' ':')\nSINGULARITY_COMMANDLINE=\"$*\"\nexport SINGULARITY_COMMANDLINE SINGULARITY_BINDDIRS\n\n```yielding\n```\nsingularity exec -B /lustre /nfs/home1/CiTAR/Plurality/mksapp/images/Gaussian.sapp-2017-04-24-13-20.img /bin/bash\n\necho $SINGULARITY_BINDDIRS\n/nfs:/scratch:/etc/hosts:/etc/ssh:/var/spool/torque:/home:\n\necho $SINGULARITY_COMMANDLINE\n-B /lustre /nfs/home1/CiTAR/Plurality/mksapp/images/Gaussian.sapp-2017-04-24-13-20.img /bin/bash\n```\n\nThis enables me to reconstruct the total binds. You can close this issue :)\n\nPS I realize now this wouldn't work when I use mappings but I can fix this easily myself in `/etc/singularity/init` that's the most important thing...",
                "pretext": "[singularityware/singularity] New comment by c1t4r on issue <https://github.com/singularityware/singularity/issues/625#issuecomment-297301391|#625: make singularity calling cmdline available from within container>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493196773.356790",
        "date": 1493196773356
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/617|#617 ERROR: Unrecognized OSBuild type: docker> by <https://github.com/vsoch|vsoch>",
                "text": "[singularityware/singularity] Issue closed: <https://github.com/singularityware/singularity/issues/617|#617 ERROR: Unrecognized OSBuild type: docker> by <https://github.com/vsoch|vsoch>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493183212.586948",
        "date": 1493183212586
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297239185|#617: ERROR: Unrecognized OSBuild type: docker>",
                "text": "glad to hear @inJeans ! I still fall for these kind of things, and it's nothing to be ashamed of, it just means you are a human :) I'm going to close the issue, please re-open if necessary.",
                "pretext": "[singularityware/singularity] New comment by vsoch on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297239185|#617: ERROR: Unrecognized OSBuild type: docker>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493183212.586933",
        "date": 1493183212586
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by inJeans on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297238612|#617: ERROR: Unrecognized OSBuild type: docker>",
                "text": "Okay team. It was the line endings. Thanks @gmkurtzer for the suggestion. I have fallen victim to such rookie mistakes before. Thanks everyone for the help.",
                "pretext": "[singularityware/singularity] New comment by inJeans on issue <https://github.com/singularityware/singularity/issues/617#issuecomment-297238612|#617: ERROR: Unrecognized OSBuild type: docker>",
                "id": 1,
                "color": "FAD5A1",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493182908.560658",
        "date": 1493182908560
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297233640|#634: Add/multiprocessing>",
                "text": "Fantastic, merged!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297233640|#634: Add/multiprocessing>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493180348.356361",
        "date": 1493180348356
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/634|#634 Add/multiprocessing> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/634|#634 Add/multiprocessing> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493180338.355696",
        "date": 1493180338355
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297223758|#634: Add/multiprocessing>",
                "image_url": "https://asciinema.org/a/117638.png",
                "image_width": 372,
                "image_height": 250,
                "image_bytes": 40901,
                "text": "<https://asciinema.org/a/117638?speed=3>",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297223758|#634: Add/multiprocessing>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493175566.960214",
        "date": 1493175566960
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297216529|#634: Add/multiprocessing>",
                "text": "ok, updates are the following! We wanted to be able to separate the downloading of layers from the changing of permissions, because right now they are packaged together, and each takes a substantial amount of time. However, you can imagine it would be less than ideal to do two \"batches\" like:\n\n1. Multiprocessing task 1: Download huge chunk of layers, since it's atomic, each is saved with some `.tmp` extension.\n2. Pass this list to Multiprocessing task 2: change permissions of layers, save with final name\n\nbecause let's say we have 15 files, it takes 10 minutes to get to number 10 and then for step 1, the entire thing dies. We have to start over. That's annoying, and that's why we have it (now) like:\n\n1. Download A, change permissions A --&gt; final A\n2. Download B, change permissions B --&gt; final B\n\nso the challenge is - how to split up changing permissions from downloading without making it a PITA if you fail mid way? I decided to do the following.\n\n*Dynamic Multiprocessing Client*\n\nWhat I basically wanted to do is allow for the multiprocessing client to, midway running things, add another \"thing\" to his queue, the \"thing\" being the file that is downloaded, but still needs permissions fixed. To support this, I made the MultiProcess client take an optional second function, `func2` and given that it's defined, it doubles the number of tasks to complete:\n\n```        # If two functions are run per task, double total jobs\n        if func2 is not None:\n            total = total * 2\n```\n\nthen, as before, we create a multiprocessing pool to start the first set of tasks to download the files.\n\n```            pool = multiprocessing.Pool(self.workers,init_worker)\n```        self.start()\n        for task in tasks:\n            result = pool.apply_async(multi_wrapper,\n                                      multi_package(func,[task]))\n            results.append(result)\n            level1.append(result._job)```\n```\nbut you'll notice I'm not appending these ids (`result._job` is an int) to a level1 list, and I do this so later I can check if a result object (one of the worker job things in the queue) has been processed through the second function. To do this, I then pop each result off the queue, and if it's a level1, and if a second function (eg change permissions) is defined, I dynamically add this new job to the multiprocessing pool:\n\n```            while len(results) &gt; 0:\n                result = results.pop()\n                result.wait()\n                bot.show_progress(progress,total,length=35,prefix=prefix)\n                progress+=1\n                prefix = \"[%s/%s]\" %(progress,total)\n```            # Pass the result through a second function?\n            if func2 is not None and result._job in level1:\n                result = pool.apply_async(multi_wrapper,\n                                          multi_package(func2,[(result.get(),)]))\n                results.append(result)\n            else:\n                finished.append(result.get())```\n``` \nThen we have some catches to make sure keyboard interrupts are caught, and we return the list of finished. To support this, the different functions for download and changing permissions are now under docker/tasks, and the `get_layer` function for the docker client doesn't change permissions by default.\n\nI think/hope this should speed things up a little bit! I haven't tested that all the results are still passing, but will update the PR with fixes for anything that doesn't.\n\n*Progress Bar*\n\nThe progress bar can now minimally show the number of total tasks (downloads and permissions) as separate things instead of them being bundled into 1. I've also fixed it so the shub downloads will have the progress bar again. I changed the `&gt;` symbol to a `|` because the arrow creates a sense of \"this thing is moving\" for the user, and it's more of a \"this is a marker for where we are\" now.",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/634#issuecomment-297216529|#634: Add/multiprocessing>",
                "id": 1,
                "color": "C4E8B4",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493172322.666418",
        "date": 1493172322666
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/639#issuecomment-297195229|#639: updating test to be specific to use ubuntu 14.04 to calculate size>",
                "text": "no problemo! Working on the other PR now... trying to see if I can use a callback to add the permissions fixes to the queue",
                "pretext": "[singularityware/singularity] New comment by vsoch on pull request <https://github.com/singularityware/singularity/pull/639#issuecomment-297195229|#639: updating test to be specific to use ubuntu 14.04 to calculate size>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493163283.693962",
        "date": 1493163283693
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/639#issuecomment-297194646|#639: updating test to be specific to use ubuntu 14.04 to calculate size>",
                "text": "Thanks!",
                "pretext": "[singularityware/singularity] New comment by gmkurtzer on pull request <https://github.com/singularityware/singularity/pull/639#issuecomment-297194646|#639: updating test to be specific to use ubuntu 14.04 to calculate size>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493163060.665202",
        "date": 1493163060665
    },
    {
        "text": "",
        "bot_id": "B26GYMSLV",
        "attachments": [
            {
                "fallback": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/639|#639 updating test to be specific to use ubuntu 14.04 to calculate size> by <https://github.com/gmkurtzer|gmkurtzer>",
                "text": "[singularityware/singularity] Pull request closed: <https://github.com/singularityware/singularity/pull/639|#639 updating test to be specific to use ubuntu 14.04 to calculate size> by <https://github.com/gmkurtzer|gmkurtzer>",
                "id": 1,
                "color": "E3E4E6",
                "mrkdwn_in": [
                    "text",
                    "pretext"
                ]
            }
        ],
        "type": "message",
        "subtype": "bot_message",
        "ts": "1493163055.664495",
        "date": 1493163055664
    }
]
